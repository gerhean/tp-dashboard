[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-2/tp)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "## bookmark v1.4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Have you ever lost track of where you stopped reading your last book or misplaced your bookmark?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Fret no more, **bookmark** is here to save the day!\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**bookmark** (not your regular bookmark!) is a desktop app for tracking reading progress. It allows you to centralise all your"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "reading progress into one place."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Adding a book and its current bookmark"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* View a specific book and its details"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* Update the details of a specified book"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* Delete a specified book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* Listing all books in the application"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Add notes to books"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Set reading goals"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**bookmark is a desktop application for managing your books and reading progress.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Interested to try out the application? Head over to the [User Guide](https://ay2021s1-cs2103t-f13-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "to get started!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "## Developer Guide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "bookmark is an open source project and we welcome contributions from the community. Head over to the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "[Developer Guide](https://ay2021s1-cs2103t-f13-2.github.io/tp/DeveloperGuide.html) to get started!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Icons from [Flaticon](https://www.flaticon.com/free-icon/bookmark_807354?term\u003dbookmark\u0026page\u003d2\u0026position\u003d43) and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[Icons8](https://icons8.com/icons/set/white-exclamation-mark-emoji\") \u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Background splash image from [Unsplash](https://unsplash.com/photos/YLSwjSy7stw) "
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "TanLeYang": 16,
      "angrybunny123": 14
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "mainClassName \u003d \u0027seedu.bookmark.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "run {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "jacoco {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    toolVersion \u003d \"0.8.5\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    archiveName \u003d \u0027bookmark.jar\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "pennhanlee": 2,
      "TanLeYang": 8
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "We are a team based in the [National University of Singapore, School of Computing](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "### Kenneth Teo"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u003cimg src\u003d\"images/angrybunny123.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "[[github](https://github.com/angrybunny123)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Tan Le Yang"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cimg src\u003d\"images/tanleyang.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[[github](http://github.com/TanLeYang)]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[[portfolio](team/tanleyang.md)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Team Lead"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Lee Penn Han"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cimg src\u003d\"images/pennhanlee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[[github](http://github.com/pennhanlee)]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[[portfolio](team/pennhanlee.md)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Data"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "### Pang Wai Kye"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "\u003cimg src\u003d\"images/pangpuncake.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[[github](http://github.com/pangpuncake)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "### Le Minh Giang"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cimg src\u003d\"images/mgiang2015.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "[[github](http://github.com/mgiang2015)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: UI"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 2,
      "pangpuncake": 4,
      "-": 39,
      "pennhanlee": 4,
      "TanLeYang": 6,
      "angrybunny123": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "## **Introduction**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Purpose "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "This document is written to describe the architecture and software design decisions for the desktop application, _bookmark_"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Scope"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The goal of this document is to cover the high-level system architecture and design. It will also cover the implementation of each"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "feature in _bookmark_."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Audience "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The intended audience is any person who is looking to understand the system architecture and design of _bookmark_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-F13-2/tp/tree/master/docs/diagrams) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/ui/Ui.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `BookListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/resources/view/MainWindow.fxml)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Has two different states, a default summarised view, and a detailed view."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/logic/Logic.java)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. `Logic` uses the `CommandParser` class to parse the user command."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a book)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/model/Model.java)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* stores a `Library` object that represents the data added by the user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* stores a `WordBank` that contains instances of words in Library."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cBook\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-F13-2/tp/blob/master/src/main/java/seedu/bookmark/storage/Storage.java)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* can save the library data in json format and read it back."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Classes used by multiple components are in the `seedu.bookmark.commons` package."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Changing Ui view"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "*bookmark\u0027s* UI supports two types of views: the default, **summarised view** which displays summarised information"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "regarding the books stored, and the **detailed view** which displays detailed information about a particular book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`BookListPanel` `BookCard` as well as its corresponding subclasses `DetailedBookListPanel` and `DetailedBookCard` facilitates"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "the display of book information."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "When in the summarised view, `MainWindow` renders `BookListPanel` which displays the book information using `BookCard`,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "while in the detailed view, `DetailedBookListPanel` is rendered which displays the book information using"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`DetailedBookCard`. `DetailedBookCard` will in turn use other components to display the book information,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "such as `NoteCard` to display the notes added to a book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Both `BookListPanel` and `DetailedBookListPanel` makes use of JavaFX\u0027s `ListView` to display the `BookCard` or `DetailedBookCard`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The class diagram below shows the relevant classes involved:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![Ui view class diagram](images/UiViewClassDiagram.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Switching between the two views"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`MainWindow` and `CommandResult` facilitates the switching between the two views."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`MainWindow#executeCommand()` initializes all changes to what is displayed by the UI by calling `Logic#execute()`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "which returns a `CommandResult`. `MainWindow#executeCommand()` is called when user enters a command into the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "From the returned `CommandResult`, `CommandResult#getViewType()` indicates how the UI should switch its view."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`CommandResult#getViewType()` returns a `ViewType`, of which there are three types: "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `ViewType.DEFAULT` - Instructs UI to switch to the default, summarised view"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `ViewType.DETAILED` - Instructs UI to switch to the detailed, single book view"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `ViewType.MOST_RECENTLY_USED` - Instructs UI to stay in whatever view it is in"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Based on the type of `ViewType` returned by `CommandResult#getViewType()`, `MainWindow#resetView()`,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`MainWindow#changeToDetailedView()`, or no method is called accordingly."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The activity diagram below illustrates the flow of execution when the UI decides which view to use:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![View switching flow of execution](images/ViewSwitchingActivityDiagram.png)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Below is a sequence diagram that shows a scenario whereby the UI switches from the default summarised view to the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "detailed view:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![Switching to detailed view sequence diagram](images/ViewSwitchingSequenceDiagram.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "##### Aspect: What to display DetailedBookCard with"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 1 (current choice):** Use JavaFX ListView"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Easy to keep UI up to sync with model by overriding ListCell\u0027s updateItem method"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: Extra care must be taken to not allow multiple books to be displayed as detailed view is only meant to show"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  one book"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 2:** Use other JavaFX layouts"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: More in-line with the purpose of the detailed view of showing only one book"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: More work has to be done to sync up the UI with the model."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### General _bookmark_ Command Logic"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_bookmark_\u0027s commands generally follow the same procedure. The following section will explain the "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "general flow of events for the following commands: "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `add`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `list`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `view`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `edit`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `delete` "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The listed commands follow a similar sequence diagram as adding a book. These commands are "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "facilitated by `LogicManager`, `ModelManager`, `XYZCommandParser` and `XYZCommand` where XYZ refers to the specific command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "eg. List, View, Edit etc. "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`LogicManager` will handle the user input by first identifying the type of command (eg. Add, List, View, Edit etc.) and create a "
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`XYZCommandParser` object that will handle the remaining user input if any to produce a `XYZCommand`. "
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`XYZCommand` will then handle the specific command through `XYZCommand#execute()`. This method "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "interacts with and modifies `ModelManager` to display the appropriate"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "list of book(s). A `CommandResult` object which contains the return message "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "to the User will be created by `XYZCommand` and passed to the UI component to be displayed to the User."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "*If the commands are in incorrect format, an exception message will be passed to the UI component to be displayed to the User*"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "In this section, `Add` command will be used as an example."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "This feature is facilitated mainly by `LogicManager`, `ModelManager`, `AddCommandParser` and `AddCommand`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Classes involved in the Add Command](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 1: `LogicManager#execute()` handles the command to identify the type of command (eg. Add)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " to create `AddCommandParser` to parse the remaining inputs. `AddCommandParser#parse()` tokenizes each prefix to create a `Book` object. \u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 2: This `Book` object will be passed as a parameter to create a `AddCommand` that will be returned to `LogicManager`\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "*If there are missing or invalid prefixes, an exception will be thrown with a message to the User.*"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 3: `LogicManager#execute()` will call `AddCommand#execute()` to add the `Book` into"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "the `Model` via `ModelManager#addBook()`. Subsequently, `ModelManager#sortByDefaultComparator()` would be called"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "to sort the internal book list according to the user\u0027s sorting preference, if any. \u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "This method will return a `CommandResult` object which contains the return message to be displayed for the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 4: `CommandResult` is returned as a feedback to the user. \u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "*If there is an existing book with the same name, an exception will be thrown with a message to the User*"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Below is an activity diagram which illustrates the flow of events for adding a book"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Add command flow of execution](images/AddActivityDiagram.png)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Below is a sequence diagram which illustrates the a scenario where a User adds a valid book \u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Command: `add n/Harry Potter g/Fiction tp/1000 b/100`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Interactions inside the logic component for the add command](images/AddSequenceDiagram.png) "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "### Find feature"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "*bookmark* allows users to find books by a specified field."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "This feature is facilitated mainly by `ModelManager`, `FindCommandParser` and `FindCommand`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The find mechanism is facilitated by `ModelManager`, specifically, the `ModelManager#updateFilteredBookList()` method. "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`ModelManager#updateFilteredBookList()` takes in a single parameter, a `predicate`, and applies the `predicate` "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "on all elements of the observable book list. Books that satisfy the `predicate` remain in the "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "list, while elements that do not are removed and omitted from the user\u0027s view. Currently, the `find` command "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "supports finding by name, genre and tag fields, and can also filter completed \u0026 non-completed books."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Given below is an example usage scenario and how the find mechanism alters `FilteredList` at each step."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Step 1. The user launches the application for the first time. `FilteredList` is initialised with the user\u0027s book data."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "![FindState1](images/FindState1.png)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Step 2. The user executes `find n/ Harry` command to find all books with Harry in the Name field. The "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "`NameContainsKeywordsPredicate` predicate is generated and is used as a filter in this scenario."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "![FindState2](images/FindState2.png)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "#### Filtering the FilteredList"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The `FindCommandParser#parse()` parses the `find` command input, and checks for input errors for which if found,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "would throw an error. Subsequently, `FindCommandParser#predicateGenerator()` generates a predicate based on the "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "user\u0027s input keyword(s) and filtering prefix. The resulting `predicate` is used to generate a new `FindCommand` object, "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "and when `FindCommand#execute()` is called, the `predicate` is passed to `ModelManager#updateFilteredBookList()`,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "where the filtering of the observable book list based on the `predicate` occurs. "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "The activity diagram below illustrates the flow of execution when the user inputs a `find` command."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "![FindActivityDiagram](images/FindActivityDiagram.png)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Below is a sequence diagram that shows a scenario whereby the user decides to find the keyword `Harry` in the book name "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "field.\u003cbr\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Command : `find n/ Harry`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "![FindSequenceDiagram](images/FindSequenceDiagram.png)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "##### Aspect: Finding within user specified field or in all fields"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* **Alternative 1 (current choice):** Finding keywords within specified field"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Pros: Allows the user to streamline their search and find their desired book quicker."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Cons: Could be a drawback if the user forgets which field he used the keyword in."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* **Alternative 2:** Finding keywords in all fields"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Pros: Allows the user to find all books with the keyword in any input field, which could be an advantage if "
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  the user uses the keyword for multiple fields."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Cons: Might not be easy to find specific books, i.e. cannot streamline the search as well."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "### Sort feature"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "#### Implementation "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "*bookmark* allows Users to sort books by a specified field."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "This feature is facilitated mainly by `ModelManager`, `SortCommandParser` and `SortCommand`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "`ModelManager#sortFilteredBookList()` takes in a single parameter, a `comparator`, and applies the `comparator` on all elements"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "of the internal observable book list. Book\u0027s are sorted according to the input comparator in ascending order. "
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "`ModelManager#setSortingPreference()` takes in a single parameter, a `newSortingPreference`, and updates the sorting preference "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "in the `preferences.json` file. Thereafter, the specified sorting mechanism will apply to the user until the user decides to change "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "the sorting mechanism using the sort command. "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Currently, the `sort` command supports sorting by name, genre, bookmark, and reading progress."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "#### Sorting the ObservableList"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "The `SortCommandParser#parse()` parses the `sort` command input, and checks for input errors for which if found,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "would throw an error. Subsequently, `ComparatorGenerator#comparatorGenerator()` generates a comparator based on the "
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "user\u0027s `inputPrefix`. `inputPrefix` and the resultant `comparator` are used to generate a new `SortCommand` object."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "When `SortCommand#execute()` is called, `inputPrefix` is passed to `ModelManager#setSortingPreference()`, where "
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "updating of user sorting preferences in `preferences.json` occurs. `comparator` is passed to `ModelManager#sortFilteredBookList()`,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "where sorting of the internal observable list based on the `comparator` occurs."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "The activity diagram below illustrates the flow of execution when the user inputs a `sort` command."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "![SortActivityDiagram](images/SortActivityDiagram.png)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Below is a sequence diagram that shows a scenario whereby the user decides to sort books by the name field."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Command : `sort n/`"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "![SortSequenceDiagram](images/SortSequenceDiagram.png)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "##### Aspect: Sorting visible observable list or internal observable list"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* **Alternative 1 (current choice):** Sorting internal observable list"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Pros: Allows user to set sorting preference. When the user exits and reopens the application, the books would remain"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  in the sorted order."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Cons: Could be a drawback if the user only wants to sort for temporary view."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "* **Alternative 2:** Sorting visible observable list"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Pros: Sorts the user\u0027s book list temporarily, which is useful if the user only wants the sorted view momentarily."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "  * Cons: Book list would always return to default view after subsequent commands which could be distracting."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Suggestion feature"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "*bookmark*\u0027s Did you mean? feature uses the Damerau-Levenshtien algorithm to calculate the distance between the"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "user-input word and the words in the application Library."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The `Edit Distance` refers to the number of steps needed to change difference between two words. "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "This mechanism is implemented through 3 operations: "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. Addition"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "2. Deletion"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "3. Transposition (Swapping)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "For example: "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Hbrry -\u003e Harry (Edit Distance: 1)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Hrry -\u003e Harry (Edit Distance: 1)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Hrary -\u003e Harry (Edit Distance 1)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Haarry -\u003e Harry (Edit Distance 1)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The suggestion mechanism is facilitated by `Logic` Component through `FindCommand` which calls on `SuggestionAlgorithm` if "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "no books can be found."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`SuggestionAlgorithm` will call on `WordBank` in `Model` for the stored words required to complete the mechanism."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`SuggestionAlgorithm` will implement the following operations:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `SuggestionAlgorithm#findSuggestions()` — Filters the relevant words to be returned as a suggestion"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* `SuggestionAlgorithm#calculateDistance()` — Calculate the EditDistance of the source word and words in the WordBank"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "The class diagram below shows the relevant classes involved."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Suggestion Algorithm and the Classes involved](images/SuggestionAlgorithmClassDiagram.png)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Given below is an example usage scenario and how a Suggestion mechanism behaves at each step."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 1: The user inputs the command `find n/h@rry` to find books with `harry` in their names. \u003cbr\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "*harry is deliberately mispelled* \u003cbr\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`FindCommand` will implement `execute` and the `model`\u0027s `FilteredList`  will be empty."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 2: Since no books are found, `FindCommand` will call on `SuggestionAlgorithm#findSuggestions()` to find the closest matching word"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "in the appropriate `WordStore` of `WordBank`."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 3: `SuggestionAlgorithm#calculateDistance()` will be called to calculate the edit distance of `h@rry` and the words in `nameWordBank`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "and store words that are within the predefined `DISTANCE_LIMIT`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 4: `FindCommand#execute()` will add each word into a `PriorityQueue` and poll out the word with the smallest distance"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "to be used as the suggested word."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Step 4*: If no words are within the `DISTANCE_LIMIT` in Step 3, there will not be any words in the `PriorityQueue` and `FindCommand#execute()`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "will return a Standard Message for no suggestion."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_Within the `SuggestionAlgorithm#FindSuggestion()`_\u003cbr\u003e "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Suggestion Feature flow of events](images/SuggestionActivityDiagram1.png) "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_Within `FindCommand#execute()`_"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Suggestion Feature flow of events](images/SuggestionActivityDiagram2.png)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Below is a sequence diagram that shows a scenario where a suggestion is provided when a typing error is committed."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "![Interactions inside logic component and Algo component for Suggestion feature](images/SuggestionSequenceDiagram.png)"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#### Design Consideration"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "##### Aspect: Data structure for storing words "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * **Alternative 1: Using Damerau-Levenstien Algorithm (Currently Implemented)**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   The Damerau-Levenstien Algorithm will cover calculation for the edit distance for 3 kinds of String Differences as mentioned above "
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Pros: \u003cbr\u003e Will provide an accurate measure of the closest matching word based on the distance \u003cbr\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   First letter need not match the keyword (First letter might be typed wrongly too)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Cons: \u003cbr\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    Incurs either a large time complexity (3^n) where n is length of string to be compared with (No Memoization) \u003cbr\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   Incurs a large space consumption (construction of 2D Array) (With Memoization)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * **Alternative 2: Storing all words in a Trie**  "
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   Store all words into a Trie Data structure and use recursion to find the matching words."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Pros: Easy to implement, consumes less time and space than Alternative 1"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Cons: \u003cbr\u003e Words must start with the same letter, hence its on the assumption that 1st letter of the word is not "
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   misspelt. \u003cbr\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   Difficult to find transpositional errors (Eg. Harry vs Hrary)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Alternative 1 was ultimately chosen as it is difficult to predict what type of typing errors will be committed. Hence, analysing"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "missing, additional or transpositional letters are equally important. It is also naive to assume that users will not type the first"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "letter wrongly too. In addition, there was no noticeable degradation of performance during testing using Alternative 1. Since Alternative 1"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "provided a better solution to a Suggestion Feature with no noticeable performance slowdown, it was hence chosen. "
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "### Add Goal feature"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "*bookmark* allows Users to add notes to a book."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "This feature is facilitated mainly by `LogicManager`, `GoalCommandParser`, `GoalCommand` and `Book`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "![class diagram for goals](images/GoalClassDiagram.png)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "`LogicManager#execute()` (not shown in the diagram above) handles the command word to create "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "`GoalCommandParser` to parse the remaining inputs. `GoalCommandParser#parse()` tokenizes each prefix"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "to create a `Goal` object. This `Goal` object will be passed as a parameter to create a `GoalCommand`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "that will be returned to `Logic Manager`.\\"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "*If there are missing or invalid parameters in command, an exception will be thrown with a "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "message to the User.*"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Below is an activity diagram which illustrates the flow of events for adding a Goal."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "![goal activity diagram](images/GoalActivityDiagram.png)"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Below is a sequence diagram which illustrates a scenario where a User adds a valid Goal"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "to a valid book via Command: `goal 1 p/69 d/10-12-2020`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "![goal sequence diagram](images/GoalSequenceDiagram.png)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "### Add Note feature"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*bookmark* allows Users to add notes to a book."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "This feature is facilitated mainly by `AddNoteCommandParser` and `AddNoteCommand`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "![Classes involved in the AddNoteCommand](images/NoteClassDiagram.png)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`LogicManager#execute()` (not shown in the diagram above) handles the command word to create `AddNoteCommandParser` to parse the remaining inputs."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`AddNoteCommandParser#parse()` tokenizes each prefix to create a `Note` object. This `Note` object will be"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "passed as a parameter to create a `AddNoteCommand` that will be returned to `LogicManager`.\u003cbr\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*If there are missing or invalid prefixes, an exception will be thrown with a message to the User.*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`LogicManager#execute()` will call `AddNoteCommand#execute()` to add the `Book` with the added `Note` into"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "the `Model` and return a `CommandResult` as a feedback to the user."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*If there is an existing note with the same title and text, an exception will be thrown with a message to the User*"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Below is an activity diagram which illustrates the flow of events for adding a book"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "![Add note command flow of execution](images/NoteActivityDiagram.png)"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Below is a sequence diagram which illustrates the a scenario where a User adds a valid note to a valid book\u003cbr\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Command: `note 1 n/Thoughts txt/Something`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "![Interactions inside the logic component for the add note command](images/NoteSequenceDiagram.png)"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Undo/redo feature"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The undo/redo mechanism is implemented by storing the state of the application after each command. The state of the "
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "application can be divided into two components:"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   1. The state of the [Model](#model-component)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   2. The state of the [Ui](#ui-component)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The state of the Model is managed by `HistoryManager`. It does so by storing `State` objects. Each `State` object contains a "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ReadOnlyLibrary`, `ReadOnlyUserPrefs` and a `Predicate` used to decide which books stored in the Model should be visible to"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "users. `HistoryManager` maintains a current state property representing the current state of the Model. It also stores "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "previous states that be restored via a redo or undo."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `HistoryManager#addNewState()` — Adds a new state to be used as the current state"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `HistoryManager#undo()` — Restores the most recent previous state."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `HistoryManager#redo()` — Restores the most recently undone state."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The state of the Ui is managed by `ViewTypeManager`. "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The state of the Ui refers to what `ViewType` the Ui is in (see [Changing Ui View](#changing-ui-view))."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewTypeManager` maintains a mapping between `State` objects and a `ViewType`. This mapping indicates what "
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewType` the Ui should be given a particular `State` of the Model."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `ViewTypeManager#addViewTypePairing()` — Adds a new pairing between a given `State` and `ViewType`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `ViewTypeManager#getViewType()` — Get the correct `ViewType` for the given `State`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Whenever the user enters any commands EXCEPT:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `help`"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `exit`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `undo` and `redo` itself"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "the method `Model#save()` will be called which adds a new `State`, representing the new state of the Model, to `HistoryManager`"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "and causes `HistoryManager` to store the previous `State`. Additionally, `ViewTypeManager#addViewTypePairing()` will be "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "called to create a new pairing between the newly created `State` and the appropriate `ViewType` to use to display the contents of the "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Model to the user. The stored `States` and its corresponding `ViewType` pairing will be used to change the application"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "state accordingly when a undo or redo operation, exposed as `Model#undo()` and `Model#redo()` respectively, is executed."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The class diagram below illustrates the classes that facilitates the undo and redo"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "feature."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoClassDiagram](images/UndoRedoClassDiagram.png)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The next section will go into more detail about how the state of the application is managed as well as how undo and redo"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "executes."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### How state is managed"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`HistoryManager` manages state by keeping a current state variable as well as two deques, an undo deque and a redo deque."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The undo deque stores the states to be recovered via an undo command, while the redo deque stores previously undone states "
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "to be recovered via a redo command. `ViewTypeManager` maintains a map that maps `State` objects to a corresponding "
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewType`."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Below is an example to illustrate how undoing and redoing works in a typical scenario."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `HistoryManager` will be inititalised with the"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "initial state of the model as the current state, i.e State 1. Undo and redo deques will be empty. `ViewTypeManager`\u0027s map"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "will also only have 1 entry, mapping the initial `State` to `ViewType.DEFAULT`."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 2. The user executes add command to add a new book. The command will call the `Model#save()` method"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "which will create a new `State`, State 2, representing the new state of the Model and add it into `HistoryManager` via the "
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`HistoryManager#addNewState()` method. State 2 will now be the current state while the previous current state, State 1,"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "will be pushed into the undo deque. `ViewTypeManager`\u0027s map will be updated accordingly by calling the"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewTypeManager#addViewTypePairing()` method with State 2 and the correct `ViewType` to be used to display State 2 to "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "the user."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#save()`, so the state will not be saved."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 3. The user decides that adding the book was a mistake and decides to undo the action by using the undo command."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "This causes the current state, State 2 to be pushed to the redo deque. State 1 will be popped from the undo deque and "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "made the current state. `ViewTypeManager#getViewType()` will be called with State 1 in order to get the correct "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewType` to display State 1 with."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 4. The user changes his mind again, deciding that he wants to add the book. He redoes the action by using the redo"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "command, causing the current state, State 1 to be pushed back into the undo deque and State 2 to be popped from the redo"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deque and made the current state. Again, `ViewTypeManager#getViewType()` will be called to get the correct `ViewType`"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "to display State 2 with."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the undo deque or redo deque is empty"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "when the user tries to undo and redo respectively, an error will be shown and no state change will occur."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 5. Now suppose the user adds a book and then edits a book, causing State 3 and State 4 to be created. He then"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "undoes the edit command. `HistoryManager` will now look like this:"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 6: The user decides to then delete a book, causing State 5 to be created and made the current state."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The previous current state, State 3, will be pushed into the undo deque while the redo deque is cleared and "
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "hence State 4 is deleted."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState6](images/UndoRedoState6.png)"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "This design choice of clearing the redo deque when a new state is added was made because states existing in the redo deque"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "cannot be represented in a linear, sequential path together with newly added states. Hence, it will be confusing"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "to allow users to redo to these states. To see this, we can plot the evolution of state changes in a sequential manner: "
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState7](images/UndoRedoState7.png)"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "To get a clearer picture, we consider what could occur if the redo deque is not "
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "cleared upon adding new state into the `HistoryManager`. "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Consider a scenario where the redo deque originally contains some state. The user subsequently enters "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "5 commands that each create a new state and the redo deque is never cleared upon new states being added."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Then, the user enters the redo command, causing the top-most state in the redo deque to be popped and made the current state. "
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "As a result, all the changes that the user has done through the 5 commands are removed in a single redo command, "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "which is not the intended behaviour."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Furthermore, to prevent excessive memory usage, a cap on the number of states stored by `HistoryManager`\u0027s undo deque"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "can be set in `HistoryManager#MAX_UNDO_COUNT`. If a new state is added but the undo deque is already at max capacity,"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "then the oldest state in the undo deque will be deleted to make room. A similar strategy is employed for `ViewTypeManager`,"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "with its map being implemented as a FIFO cache with a fixed maximum size."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The activity diagram below explains the flow of execution when a new state is added to `HistoryManager`."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![NewStateActivityDiagram](images/NewStateActivityDiagram.png)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 1 (current choice):** Saves copies of the entire `Library` and `UserPrefs` in `State`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: We must ensure that the implementation of undoing/redoing of each individual command are correct, complexity builds up as more"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  commands are added."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Alternative 1 was eventually chosen as there was no noticable performance degradation during testing with a reasonable "
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "cap (10) on the number of states stored. It is also much more scalable and less prone to breaking upon addition"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "or modification of commands. "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "##### Aspect: How to decide which actions should create and save state"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 1 (current choice):** Expose a method in the `Model` interface that when called creates and saves state."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: More declarative, easier to see when the model will create and save state."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: Worse separation of concerns, the responsibility of deciding when to create and save state is moved away "
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    from the model and to the components that interact with the model."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 2:** The methods implemented by `ModelManager` to modify the model such as "
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    `ModelManager#addBook()` also creates and save state."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Better separation of concerns, the model is responsible for deciding what actions constitute a modification"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    and thus warrants the creation and saving of state."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: The creation and saving of state becomes a side effect, not immediately clear that it occurs.  "
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Alternative 1 was eventually chosen as we liked the declarative nature of it as well as the clarity it provides. We also"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "felt that alternative 2 could cause a lot of problems if a command needed to modify the model in multiple ways thus"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "would cause multiple states to be created for a single command."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* has a need to keep track of which page they stopped reading at for multiple books"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* has a need to set reading goals and write reflections about what they read"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Value proposition**: Manage bookmarks faster than a typical mouse/GUI driven app. "
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Removes the need for physical bookmarks. Help maintain the motivation to read by making reading more interactive."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                                 | So that I can…​                                                         |"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| -------- | ------------------------------------------ | -------------------------------------------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* * *`  | user                                       | add a new book                                                             | track my progress                                                      |"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* * *`  | user                                       | delete a book                                                              | remove books that I no longer read                                     |"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `* * *`  | user                                       | find a book by name                                                        | locate details of books without having to go through the entire list   |"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `* * *`  | user                                       | see all the data about a particular book (title, bookmark, progress)       | get all necessary information about my book                            |"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* * *`  | user                                       | view a list of all the books and their progress                            | conveniently check my progress on all my books                         |"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* * *`  | user                                       | update the data of a book                                                  |                                                                        |"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `* * *`  | user                                       | have an easy to use user interface                                                     | easily navigate through the system with minimal difficulty             |"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `* * *`  | user                                       | have a help page                                                           | find out how to use the app                                            |"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | user                                       | classify my books according to genre                                       | organise my books better                                               |"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | analytical user                            | write down my thoughts on a book                                           | re-read my analysis later                                              |"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | user                                       | create my own classifications for genres not in the application            | organise the books to my liking                                        |"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | Kindle user                                | have a clearer representation of my progress                               | conveniently get my progress without navigating to the Kindle screen   |"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | user                                       | place tags or notes at different pages                                     | stop using sticky notes                                                |"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | user                                       | have a few functions that I can use seamlessly                             | learn the app easily without bothering with large numbers of functions |"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | user                                       | be able to edit my tags and reflections                                    | edit mistakes and typos                                                |"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `* *`    | careless user                              | undo any wrong commands that i’ve entered                                  |                                                                        |"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `* *`    | user                                       | be able to filter my books by Lexicographic order, Date, Reading, Finished | get the information I\u0027m looking for                                    |"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `* *`    | beginner user                              | have default settings                                                      | skip configuring them at the start                                     |"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `*`      | user                                       | have a home page that summarises important details                         | conveniently access the most important information                     |"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `*`      | user                                       | have colour coded tags                                                     | so that I can easily differentiate important tags from the rest        |"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `*`      | user                                       | customise the look of the application                                      | make it feel personal                                                  |"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `*`      | user                                       | have a summary page for statistics on the books I\u0027ve read                  |                                                                        |"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `*`      | user                                       | be able to resize the application                                          | fit it to different screens                                            |"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "| `*`      | user                                       | see and modify my current settings                                         |                                                                        |"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `*`      | user                                       | customise the background by uploading my own photo                         | customerize the look of the app to my liking                           |"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `*`      | forgetful user                             | keep track of my loaned books expiry date                                  | remember to return the book or extend the loan                         |"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `*`      | user                                       | have a visual representation of my loans expiry period                     | instantly know the urgency of each loan                                |"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "| `*`      | user                                       | set reminders for a book loan                                              | be reminded to return my book on time                                  |"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "For all use cases below, the **System** is `bookmark` and the **Actor** is the `user`, unless specified otherwise"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Use case: UC01 - Add a book**"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. User requests to add a book."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "2. bookmark adds the book."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* 1a. User provides the wrong command."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * 1a1. bookmark returns an error message."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* 1b. User provides a non-numeral for total pages or bookmarked page."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * 1b1. bookmark returns an error message."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* 1c. Provided bookmarked page is larger than total pages."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * 1c1. bookmark returns an error message."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Use case: UC02 - View a book**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. User \u003cu\u003erequests to list all books (UC05)\u003c/u\u003e."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. User requests to view a specific book using its displayed index."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "3. bookmark returns all the book\u0027s information to user."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* 2a. The index given is invalid."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 2a1. bookmark returns an error message."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Use case: UC03 - Delete a book**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1.  User \u003cu\u003erequests to list all books (UC05)\u003c/u\u003e."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2.  User requests to delete a specific book using its displayed index."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "3.  bookmark deletes the book."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* 2a. The index given is invalid."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * 2a1. bookmark returns an error message."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Use case: UC04 - Edit a book**"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. User \u003cu\u003erequests to list all books (UC05)\u003c/u\u003e."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. User requests to edit a specific book using its displayed index."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "3. The requested entry is updated."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* 2a. The index given is invalid."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 2a1. bookmark returns an error message."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * 2b. The requested entry to update is invalid."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 2b1. bookmark returns an error message."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * 2c. The provided value for the entry to update is invalid."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 2c1. bookmark returns an error message."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Use Case: UC05 - List all books**"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. User requests to list all books."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. bookmark returns a list of all books."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* 1a. The book list is empty."
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 1a1. bookmark returns a message informing user that book list is empty."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Use Case: UC06 - Help**"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. User requests to see the Help page."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. bookmark returns the Help page."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Use Case: UC07 - Undo**"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. User requests to undo last action."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. bookmark undoes the last user action."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* 1a. There is no action to undo."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 1a1. bookmark returns a message informing user that there is no action to undo."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Use Case: UC08 - Adding a goal**"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. User requests to add a goal to a specific book using its displayed index."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. User specifies the goal target and deadline."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "3. The goal is added to the book."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* 3a. There is already a goal for the book."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * 3a1. bookmark replaces the existing goal with the new goal."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case resumes at step 3."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Use Case: UC09 - Adding a note**"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. User requests to add a note to a specific book using its displayed index."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "2. The note is added to the specified book."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* 1a. The index given is invalid."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    * 1a1. bookmark returns an error message."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * 1b. The provided prefix is invalid."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    * 1b1. bookmark returns an error message."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * 1c. The provided value for note title and text is invalid."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    * 1c1. bookmark returns an error message."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    "
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**Use Case: UC10 - Deleting a note**"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. User requests to delete a note from a specific book using its displayed index."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "2. The requested note is deleted from the specified book."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* 1a. The index given is invalid."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    * 1a1. bookmark returns an error message."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    "
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* 1b. The note index provided is invalid."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    * 1b1. bookmark returns an error message."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    "
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    Use case resumes at step 1."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**Use Case: UC11 - Sorting the book list**"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. User requests to sort the book list by name."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. bookmark sorts all the books by name."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2.  Should be able to hold up to 100 books without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "4.  Should be backwards compatible with data from previous versions."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "5.  Should not crash when data is given in compatible formats."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "6.  The app should be accessible via the downloaded JAR file without any other installations needed."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Download the bookmark.jar file and copy into an empty folder"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Double-click the bookmark.jar file Expected: Shows the GUI with a set of sample books. The window size may not be optimum."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If double clicking does not work,"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   navigate to the folder containing the jar file using your terminal or command prompt and enter `java -jar bookmark.jar`"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Deleting a book"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Deleting a book while all books are being shown."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: List all books using the `list` command. Multiple books in the list."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: First book is deleted from the list. Details of the deleted book shown in the status message."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   c. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: No book is deleted. Error details shown in the status message."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   d. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Adding a book"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Adding a book while all books are being shown."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Test case: `add n/Test book g/Test genre tp/1000 b/50`\u003cbr\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: A book with the name of \"Test book\", genre of \"Test genre\", 1000 total pages and bookmark placed at page"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      50 will be created and added to the list"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `add n/Test book g/T@st genre tp/1000 b/50`\u003cbr\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: No book is added. Error details shown in the status message."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   c. Other incorrect add commands to try: `add n/Test g/Test tp/X b/Y` where Y is larger than X \u003cbr\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: Similar to previous"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "2. Adding a book while only some books are being shown."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Test case: `add n/Test book g/Test genre tp/1000 b/50`\u003cbr\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: A book with the name of \"Test book\", genre of \"Test genre\", 1000 total pages and bookmark placed at page"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      50 will be created and added to the list. All books will be shown.  "
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Editing a book"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Editing a book while all books are being shown."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: List all books using the `list` command. Multiple books in the list."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `edit 1 n/Edited Name`\u003cbr\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: First book in the list is edited to have a name of \"Edited Name\""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Details of the edited book shown in the status message."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   c. Test case: `edit 1 t/Good t/Educational`\u003cbr\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: First book in the list has all existing tags removed and the \"Good\" and \"Educational\" tags added."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   d. Test case: `edit 0 n/Edited Name`\u003cbr\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: No book is edited. Error details shown in the status message."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      "
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   e. Other incorrect delete commands to try: `edit`, `edit x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: Similar to previous. "
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Editing a book while only some books are being shown."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Book list filtered by a command (e.g `find` command). At least one book shown in the list."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `edit 1 n/Edited Name`\u003cbr\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: First book in the list is edited to have a name of \"Edited Name\"."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Details of the edited book shown in the status message."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      The edited book remains in the list regardless of how it was edited."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      "
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Sorting the book list"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Sorting the book list while some books are being shown."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Book list is showing at least 2 books to see the sorting effect."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `sort n/`\u003cbr\u003e"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: The books shown in the list will be sorted by their names in lexicographical order."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      "
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Adding a book into a sorted book list."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Book list is initially showing at least 1 books to see the sorting effect."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `sort n/`\u003cbr\u003e followed by `add` command to add another book."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: After the sort command, the books shown in the list will be sorted by their names in lexicographical order."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      The new book will be added to the book list in the correct position that maintains the sorted order."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Undo "
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Using undo when there are no commands to undo."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Must not have made any commands since starting the application."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `undo`\u003cbr\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: Nothing is undone. Error details shown in status message."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Using undo when there are commands to undo."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Test case: Any command except `help` and `exit` followed by `undo`"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: The command entered is undone. The application reverts to exactly how it was before the command was"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      made. Success message shown in status message."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      "
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Redo"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Using redo when there are no undone commands to redo."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Must not have used `undo` command since starting the application."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: `redo`\u003cbr\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: Nothing is redone. Error details shown in status message."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Using redo when there are undone commands to redo."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Test case: Any command except `help` and `exit`, followed by `undo` and then `redo`\u003cbr\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: The command entered is first undone, then on using `redo`, it will be redone. The application will be "
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      exactly as it was after the first  command was entered. Success message shown in status message."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Dealing with missing data files"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Must have started the application at least once."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: In the folder containing `bookmark.jar`, delete the `data/library.json` file. Open the application. "
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Make some commands and then close the application with the `exit` command. \u003cbr\u003e"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: The application starts up with some sample data. On exit, the `data/library.json` file is created again,"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      containing the new data."
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Dealing with corrupted data files"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   a. Prerequisites: Must have started the application at least once. At least one book stored in the data file."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   b. Test case: In the folder containing `bookmark.jar`, open the `data/library.json` file and edit it by removing the"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \"name\"\" property from one of the JSON objects. This simulates a corrupted data file. Open the application. Make "
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      some commands and then close the application with the `exit` command. \u003cbr\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      Expected: The application starts up with no books being displayed. On exit, the `data/library.json` file is recreated,"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      containing the new data and will overwrite the \"corrupted\" data file."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      "
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** In normal usage, users are not expected "
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   to manually make changes to the JSON data file. "
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 26,
      "pangpuncake": 107,
      "-": 300,
      "pennhanlee": 211,
      "TanLeYang": 392,
      "angrybunny123": 96
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   1. Run the `seedu.bookmark.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "TanLeYang": 1
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   e.g. `seedu.bookmark.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   e.g. `seedu.bookmark.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   e.g. `seedu.bookmark.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "TanLeYang": 3
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_bookmark_ is a desktop application to manage your indulgent bookworm habits! Use _bookmark_ to track your book reading progress "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "or pen down thoughts of mindboggling fan theories about your favourite characters!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_bookmark_ allows you to add and update your beloved books, track your reading progress using our bookmark and even add reading goals and notes to your chosen books!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Guess what? _bookmark_ also uses the special Command Line Interface style so if you love to type, you\u0027re in luck! So "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "get cracking and start saving your best reads and ideas into _bookmark_, Type away!~"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Installation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "1. Download the latest `bookmark.jar` from [here](https://github.com/AY2021S1-CS2103T-F13-2/tp/releases)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for _bookmark_."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Starting _bookmark_"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "#### Windows Users"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. Double-click the `bookmark.jar` file to start the application. \u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "*If you\u0027re starting _bookmark_ for the first time, you will see some sample books! Simply delete them with our delete command if you want a fresh start!*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. Add your first book! \u003cbr\u003e Invoke your first command by typing this in the input box located at the bottom of the application. \u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`add n/My First Book g/NonFiction t/Yay tp/1000` "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "1. You should see that My First Book will be added into the list of books you see! "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "#### MacOS Users"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "##### Preferred Method"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Right-click the `bookmark.jar` file and navigate to `Open With` and click `Jar Launcher`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Allow _bookmark_ to run by clicking `Open`.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*If you\u0027re starting _bookmark_ for the first time, you will see some sample books! Simply delete them with our delete command if you want a fresh start!*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Add your first book! \u003cbr\u003e Invoke your first command by typing this in the input box located at the bottom of the application. \u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`add n/My First Book g/Non-Fiction t/Yay tp/1000` "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. You should see that My First Book will be added into the list of books you see!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "##### Alternative Method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Open the terminal application. (You can search in spotlight `terminal`)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Type in `cd` (Please include a space after `cd`) in the terminal."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Find the folder containing bookmark and drag it into the terminal and hit enter."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Run this command to start the application. `java -jar bookmark.jar`. \u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*If you\u0027re starting _bookmark_ for the first time, you will see some sample books! Simply delete them with our delete command if you want a fresh start!*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. Add your first book! \u003cbr\u003e Invoke your first command by typing this in the input box located at the bottom of the application. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`add n/My First Book g/Non-Fiction t/Yay tp/1000` "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "1. You should see that My First Book will be added into the list of books you see!"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### The _bookmark_ Tour"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Here\u0027s a brief tour of the _bookmark_ application! \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "When you open _bookmark_, you will be greeted by our user-friendly interface. (Exhibit 1)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![Ui](images/mainwindow.png)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   *Exhibit 1*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can find a list of all your recorded books in the main window. (Exhibit 2) \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Summarised versions of your book records will be displayed in a list. "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![Ui](images/mainwindow_list.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   *Exhibit 2*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "You can also see data of the summary of all the shown books, bookmarks and pages read on the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "right side of the application window. (Exhibit 3)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![Ui](images/mainwindow_summary.png)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   *Exhibit 3*"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can start to invoke commands by typing them in the provided input box at the bottom of "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "the application window. (Exhibit 4) \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " _bookmark_ will reply you with the appropriate response for each command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![Ui](images/mainwindow_cli.png)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   *Exhibit 4*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Want to do more? Refer to the [Features](#features) section below for details of many more commands!"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "## Prefixes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Before diving into the features, this section will provide you with some"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "information on what each prefix used in the features below represent."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Prefix | Explanation"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-------|------------"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`n/` | Name of the book / Title of the note to add to a book"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`g/` | Genre of the book"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`t/` | Tag attached to a book"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`tp/` | Total pages of the book"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`b/` | The page where the bookmark is placed at"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`c/` | Completed books"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`nc/` | Not completed books"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`rp/` | The reading progress of the book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`p/` | The page to set your goal on"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`d/` | The date to complete your goal by"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`txt/` | The text of your note"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Words in `UPPER_CASE` are the information to be given by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  e.g. in `add n/BOOK_TITLE`, `BOOK_TITLE` refers to the name of the book you want to add."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Words in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  e.g `n/BOOK_TITLE [b/PAGE_NUMBER]` means that you can omit this if you do not want to include a bookmark.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  You can always edit the book to have that information at a later time."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* Words with trailing `…` refers to fields that can be used multiple times.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* You can enter your book information in any order you like.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  e.g. If our command instructions specify `n/BOOK_TITLE tp/TOTAL_PAGES`, `tp/TOTAL_PAGES n/BOOK_TITLE` is also acceptable."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* The `INDEX` will **change based on the currently shown books on the screen.**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "  For example, the `INDEX` of the first book shown will be 1, the `INDEX` of the second book shown will be 2, etc."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "  If you would like to use commands on other books, please ensure they are currently displayed."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Adding a book into _bookmark_: `add`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Add your book into _bookmark_ by using our Add Command so that you can"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "track your book reading progress."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  `add n/BOOK_TITLE g/GENRE [t/TAG]... tp/TOTAL_PAGES [b/PAGE_NUMBER]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Detailss:** "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `NAME` is limited to 1 to 120 characters."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `GENRE` and `TAG` only accepts Alphabets and Numbers (Special symbols like ! ? * are not supported)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You can add up to 10 tags"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Adding tags and/or bookmarks is optional"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`add n/Pacman g/Game strategy tp/5000` | Adds a book named `Pacman`, with genre `Game strategy`, with `5000` total pages"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![addcommand](images/addcommandeg.png)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "### Viewing details of a book : `view`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "View detailed information such as notes of your book of choice by using the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "View Command. \u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `view INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Detailss:** "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` **must be a positive number** 1, 2, 3, …"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * After using the view command, the viewed book will have an INDEX of 1 since it is the only book shown on the screen. "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "      To interact with the book, use the INDEX of 1 to refer to the book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * If you would like to go back to see all your books, you can use the [list](#listing-all-books--list) command."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*Suppose you have at least two books currently displayed*"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`view 2` | views the 2nd book in the list. "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![detailed_view](images/viewcommandeg.PNG)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Listing all books : `list`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the List Command to display all the books that you have added into _bookmark_"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `list`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`list` | displays all books stored in _bookmark_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![list_view](images/editeg1.png) "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "### Locating books: `find`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Find Command to search for your book of choice"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "by filtering your list of books to only show those that you are searching for. "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `find {Field}` \u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   {Field} refers to any of the following:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `n/BOOK_TITLE` : find by input book name"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `g/GENRE` : find by input book genre"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `t/TAG` : find by input tag"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `c/` : find by completed books"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `nc/` : find by uncompleted books"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Detailss:** "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * In the current version of _bookmark_ You can only find on 1 field"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You cannot add any keywords behind `c/` and `nc/` prefix"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You can interact with your found books with their updated `INDEX` on the displayed list. "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`find n/bear` | Returns a list of books that contain `bear` in its name."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`find t/dog cat` | Returns a list of books that contain `dog` and/or `cat` in its tags."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`find c/` | Returns a list of completed books."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![findcommand](images/findcommandeg.png)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   _Result of `find n/bear`_"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "#### Suggestions feature for Typing Error when finding a book"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "If you had misspelled your search keyword,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_bookmark_ has an automatic Suggestion feature that will recommend the closest matching word to your misspelled word "
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "to aid you in locating your book. "
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   This process is activated automatically when using Find command and does not require any manual inputs"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   This feature is applied when finding for books using these fields: "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Name"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Genre"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Tags"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "-------------| ---------------"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "find n/Hsrry | Did you mean: Harry?"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "find n/Drgns | Did you mean: Dragons?"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![suggestion](images/suggestioneg.png)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   _Result when Keyword: Artermis is typed wrongly_"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "### Sorting books: `sort` "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Sort Command to organise your bookshelf so that you can view your books"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "in the order you have indicated."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`sort {Field}` \u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    {Field} refers to any of the following:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `n/` : Sort by Name"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `g/` : Sort by Genre"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `b/` : Sort by bookmarked page"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * `rp/` : Sort by reading progress"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You should not add any inputs behind the prefixes"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You can interact with your sorted books with their updated `INDEX` on the displayed list. "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`sort n/` | Returns a list of books sorted by name in alphabetical order."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`sort g/` | Returns a list of books sorted by genre in alphabetical order."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`sort b/` | Returns a list of books sorted by ascending number of pages read."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`sort rp/` | Returns a list of books sorted by ascending reading progress."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![sortcommand](images/sortcommandeg.png)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   _Result of `sort g/`_"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "### Deleting a book : `delete`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Delete Command to delete unwanted books from _bookmark_ so that "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "you remove books that you no longer want to track. "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    `delete INDEX`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Deletes the book at the specified `INDEX`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` **must be a positive number** 1, 2, 3, …"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Be aware that deleted books will not be retrievable after you restart the application or "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     call more than 10 commands after deletion."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*Suppose you have at least two books currently displayed*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`delete 2` | deletes the 2nd book in the book list. "
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| --------------- |"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `delete 2` |"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/deleteeg1.png\" alt\u003d\"delete\"\u003e |"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `delete 2` | "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/deleteeg2.png\" alt\u003d\"delete\"\u003e | "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "### Editing a book : `edit`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Edit Command to update information of a book so that"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "you can keep your books up to date. "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`edit INDEX [n/BOOK_TITLE] [tp/TOTAL_PAGES] [b/PAGE_NUMBER] [g/GENRE] [t/TAG]` "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Edit the book at the specified `INDEX`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   * The `INDEX` **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * At least one of the fields must be provided."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   * Existing values will be updated to the input values."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*Suppose you have at least two books currently displayed*"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`edit 2 n/Harry Potter g/Fantasy` | Edits the name and genre of the 2nd book to `Harry Potter` and `Fantasy` respectively."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`edit 2 b/250` | Edits the bookmark of the 2nd book to be `250`. "
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| ------------------- |"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `edit 2 b/250` |"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/editeg1.png\" alt\u003d\"edit\"\u003e |"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `edit 2 b/250` |  "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/editeg2.png\" alt\u003d\"edit\"\u003e | "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "### Set goal for your book: `goal`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Goal Command to set a reading goal to your chosen book so that "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "you can motivate yourself to read."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`goal INDEX p/PAGE d/DD-MM-YYYY` "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Sets goal for the book at the specified `INDEX`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` **must be a positive number** 1, 2, 3, …"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * If you add a goal to a book with an existing goal, the newly added goal will replace it."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You can only set dates that have not passed"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "   * Your goal is displayed in yellow, green or red for in progress, completed or overdue."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "   Goal In Progress:"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    ![goal_in_progress](images/GoalUi_InProgress.png)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "   Goal Completed:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    ![goal_completed](images/GoalUi_Completed.png)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "   Goal Overdue:"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    ![goal_overdue](images/GoalUi_Overdue.png)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`goal 3 p/69 d/22-11-2020` | Sets a goal to reach page 69 of the 3rd book by 22nd November 2020."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   ![goalcommand](images/goaleg2.png)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "### Remove your Goal: `goaldel`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Goal Delete command to remove the previously set goal from"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "a book so that you can remove unwanted goals."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `goaldel INDEX`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Removes goal for the book at the specified `INDEX`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The index **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*Suppose you have at least one book currently displayed*"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "`goaldel 1` | Goal successfully removed for Harry Potter. "
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| ------------------- |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `goaldel 1` |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/goaldeleg1.png\" alt\u003d\"goaldel\"\u003e |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `goaldel 1` |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/goaldeleg2.png\" alt\u003d\"goaldel\"\u003e | "
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "### Adding a note to a book : `note`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Note Command to add notes to your book so that you can pen down your thoughts and reflections."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`note INDEX n/TITLE txt/TEXT` "
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   * `TITLE` and `INDEX` must not start with a whitespace."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   * `TITLE` is limited to 1 to 120 characters."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "   * `TEXT` is limited to 1 to 1000 characters."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Edits the book at the specified `INDEX`."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The index refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The index **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*Suppose you have at least one book currently displayed*"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`note 1 n/Thoughts txt/What is he thinking!` | Adds a note to the first book shown with the title `Thoughts` and text `What is he thinking!` "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| ------------------- |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `note 1 n/Thoughts txt/What is he thinking!` |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/noteeg1.png\" alt\u003d\"note\"\u003e |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `note 1 n/Thoughts txt/What is he thinking!` |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/noteeg2.png\" alt\u003d\"note\"\u003e | "
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "### Deleting a note from a book : `notedel`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Delete Note command to delete notes so that you can"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "remove unwanted notes from _bookmark_."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`notedel INDEX NOTE_INDEX`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * Deletes the note at the specified `NOTE_INDEX` of the book specified at `INDEX`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `INDEX` refers to the index number shown in the displayed book list."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * The `NOTE_INDEX` refers to the index number shown in the displayed notes in the detailed view."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * All indexes **must be a positive number** 1, 2, 3, …​"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "*Suppose you have at least two books currently displayed*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`notedel 1 3` | Deletes the 3rd note of the 1st book displayed"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "`notedel 4 2` | Deletes the 4th note of the 2nd book displayed "
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| ------------------- |"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `notedel 1 3` |"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/notedeleg1.png\" alt\u003d\"notedel\"\u003e |"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `notedel 1 3` |"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/notedeleg2.png\" alt\u003d\"notedel\"\u003e | "
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " "
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Undoing a command : `undo`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Undo Command to revert previous commands so that you can"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "correct your mistakes. "
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `undo`"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * All commands can be undone except the following: \u003cbr\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * `exit`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * `help`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * You can undo as many as 10 previous actions."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "--------------- | ----------"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`undo` | Previous version is restored"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":warning: **Warning:** "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   The undo command will not execute if there are no commands available to undo. Once you close _bookmark_, the commands"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   entered during your last usage session cannot be undone using the `undo` command when you start the application again."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e  "
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| ------------------- |"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `undo` |"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/undocommand1.png\" alt\u003d\"undo\"\u003e |"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `undo` | "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/undocommand2.png\" alt\u003d\"undo\"\u003e | "
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Redoing a command: `redo`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Redo Command to reinstate previously undone commands."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `redo`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * This command can be used multiple times consecutively to redo up to ten undone commands. \u003cbr\u003e "
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     You should use `redo` in conjunction with the [undo](#undoing-a-command--undo) command. "
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   * All commands can be redone except the following: \u003cbr\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * `exit`"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * `help`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " "
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "--------------- | ----------"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`redo` | Previously undone command is invoked again "
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_when redo is called on a deleted book (previously undone)_  "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| What you should see |"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| ------------------- |"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| Before `redo` |"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/undocommand2.png\" alt\u003d\"redo\"\u003e |"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| After `redo` |"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "| \u003cimg src\u003d\"images/redocommand.png\" alt\u003d\"redo\"\u003e | "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":warning: **Warning:** "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   The redo command will not execute if there are no undone commands available to redo. Once _bookmark_ is closed, the"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   commands that have been undone during your last usage session cannot be redone using the `redo` command when you"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   start _bookmark_ again."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Clearing all books : `clear`"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Clear Command to delete all your books at once."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `clear`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e  "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-danger\"\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":warning: **Warning: ** "
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   Take caution! While the undo feature will help you restore books deleted by `clear`, you will not be able"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   to recover your deleted books if you call too many commands (10 and more) after clearing!"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_bookmark_ data will be saved in the hard disk automatically after any command that changes the data is called."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " There is no need to save manually."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Accessing Help : `help`"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Help Command to access the Help window so that you can quickly"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "find details to the commands that _bookmark_ supports."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `help`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":star: **Important Details:** "
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   You can also press `F1` on your keyboard or click on `help` on the navigation bar located at the top of the window."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "-----------------|--------"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`help` | Help Window opens"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " ![helpcommand](images/helpeg.png)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "### Exiting the program : `exit`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "You can use the Exit Command to quickly exit _bookmark_."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " "
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-success\"\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":heavy_check_mark: **Format:** "
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "   `exit`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Example Command | Result"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "---------------- | ---------"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`exit` | Exits _bookmark_"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the "
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "`library.json` file located in the `data` file of your previous bookmark home folder."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**Q**: How many books can I add to _bookmark_? \u003cbr\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**A**: You can add a total of 100 books to _bookmark_."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "**Q**: How can I know more about the available commands that _bookmark_ supports?\u003cbr\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**A**: Type `help` to open up the Help Window where the available commands will be shown."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Action | Format"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Add](#adding-a-book-into-_bookmark_-add)** | `add n/BOOK_TITLE g/GENRE [t/TAG] tp/TOTAL_PAGES [b/PAGE_NUMBER]`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[View](#viewing-details-of-a-book--view)** | `view INDEX`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[List](#listing-all-books--list)** | `list`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Find](#locating-books-find)** | `find n/BOOK_TITLE`, `find g/GENRE`, `find t/TAG`, `find c/`, `find nc/`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Sort](#sorting-books-sort)** | `sort n/`, `sort g/`, `sort b/`, `sort rp/`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Delete](#deleting-a-book--delete)** | `delete INDEX`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Edit](#editing-a-book--edit)** | `edit INDEX [n/BOOK_TITLE] [tp/TOTAL_PAGES] [b/PAGE_NUMBER] [g/GENRE] [t/TAG]`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Add Goal](#set-goal-for-your-book-goal)** | `goal INDEX p/PAGE d/DD-MM-YYYY`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Delete Goal](#remove-your-goal-goaldel)** | `goaldel INDEX`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Add Note](#adding-a-note-to-a-book--note)** | `note INDEX n/TITLE txt/TEXT`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Delete Note](#deleting-a-note-from-a-book--notedel)** | `notedel INDEX NOTE_INDEX`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Undo](#undoing-a-command--undo)** | `undo`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Redo](#redoing-a-command-redo)** | `redo`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Clear](#clearing-all-books--clear)** | `clear`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Exit](#exiting-the-program--exit)** | `exit`"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**[Help](#accessing-help--help)** | `help`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Term | Meaning"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "-------- | ------------"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Genre** | The classification of the book \u003cbr\u003e (eg. Fiction, Nonfiction, Selfhelp etc.)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Tag** | Short descriptive words to describe your book \u003cbr\u003e (eg. Fun, Exciting, Magic)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Note** | Short paragraphs written by you to be added to your stored book records."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Goal** | A date set by you to finish a certain page of the book"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "**Reading Progress** | The percentage of the book completed"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 21,
      "pangpuncake": 100,
      "-": 114,
      "pennhanlee": 440,
      "TanLeYang": 31,
      "angrybunny123": 7
    }
  },
  {
    "path": "docs/diagrams/AddActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":User executes AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "if() then ([No user input error \\n or missing fields])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Check for Duplicate Books;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    if() then ([No Duplicate Book Found])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        :Add book into Model and Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    else ([Duplicate Book found])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        :Produce Error Message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    :Sort books by user\u0027s sorting preference, if any;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "else ([Input error or missing fields])"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Produce Error Message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":Return message to user;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 17,
      "angrybunny123": 1
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[-\u003e LogicManager : execute(\"add \\n n/Harry Potter g/Fiction \\n tp/1000 b/100\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"add \\n n/Harry Potter g/Fiction \\n tp/1000 b/100\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser -\u003e AddCommandParser : parse(\"n/Harry Potter g/Fiction \\n tp/1000 b/100\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommandParser -\u003e AddCommand : book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommand --\u003e AddCommandParser :"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommandParser --\u003e CommandParser :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommandParser -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser --\u003e LogicManager :"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "LogicManager -\u003e AddCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommand -\u003e Model : addBook(book)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "AddCommand -\u003e Model : sortByDefaultComparator()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "AddCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 69,
      "angrybunny123": 6
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteBook(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveLibrary(library)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "TanLeYang": 2
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "DeleteCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "DeleteCommandParser --\u003e CommandParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DeleteCommand -\u003e Model : deleteBook(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "pennhanlee": 10,
      "TanLeYang": 1
    }
  },
  {
    "path": "docs/diagrams/FindActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":User executes find command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "if() then ([No user input error])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Generate predicate based on input prefix and keyword(s);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Apply predicate to FilteredList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "else ([User input error])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "endif"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Return message to user;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 13
    }
  },
  {
    "path": "docs/diagrams/FindSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \"f:FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "[-\u003e LogicManager : execute(\"find n/ harry\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"find n/ harry\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "create FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandParser -\u003e FindCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandParser -\u003e FindCommandParser : parse(\"n/ harry\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommandParser -\u003e FindCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommand --\u003e FindCommandParser : f"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommandParser --\u003e CommandParser : f"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommandParser -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "destroy FindCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandParser --\u003e LogicManager : f"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "LogicManager -\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommand -\u003e Model : updateFilteredBookList\\n (NameContainsKeywordsPredicate)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Model --\u003e FindCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "FindCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 69
    }
  },
  {
    "path": "docs/diagrams/FindState1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class State1 as \"__fb0:filteredList__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class Pointer as \"__b0:Harry Potter__\" #FFFFF"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class Pointer1 as \"__b1:Hunger Games__\" #FFFFF"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class Pointer2 as \"__b2:Cinderella__\" #FFFFF"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Pointer -up- State1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Pointer1 -up- State1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Pointer2 -up- State1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 18
    }
  },
  {
    "path": "docs/diagrams/FindState2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "title After command \"find n/ harry\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class State1 as \"__fb0:filteredList__\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class Pointer as \"__b0:Harry Potter__\" #FFFFF"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class Pointer1 as \"__b1:Hunger Games__\" #FFFFF"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "class Pointer2 as \"__b2:Cinderella__\" #FFFFF"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Pointer1 -[hidden]left-\u003e State1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Pointer2 -[hidden]right-\u003e State1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "hide Pointer1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "hide Pointer2"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Pointer -up- State1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 20
    }
  },
  {
    "path": "docs/diagrams/GoalActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ":User executes goal command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "if () then ([index, page and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "date are valid])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    : Find the book using index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    : Set goal to the book;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    : Notify error to user;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 18
    }
  },
  {
    "path": "docs/diagrams/GoalClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Class GoalCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Class CommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Class GoalCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommandParser .up.|\u003e Parser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "CommandParser .right.\u003e GoalCommandParser: creates \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommandParser ..\u003e GoalCommand : creates \u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand .up.|\u003e Command"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand ..\u003e CommandResult : creates \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 30
    }
  },
  {
    "path": "docs/diagrams/GoalSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "participant \":GoalCommandParser\" as GoalCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "participant \"goalCommand:GoalCommand\" as GoalCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "participant \"result:CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "[-\u003e LogicManager : execute(\"goal 1 p/69 d/10-12-2020\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"goal 1 p/69 d/10-12-2020\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "create GoalCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "CommandParser -\u003e GoalCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate GoalCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate GoalCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "CommandParser -\u003e GoalCommandParser : parse(\"goal 1 p/69 d/10-12-2020\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate GoalCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "create GoalCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommandParser -\u003e GoalCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate GoalCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand --\u003e GoalCommandParser : goalCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate GoalCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommandParser --\u003e CommandParser : goalCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate GoalCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommandParser -[hidden]-\u003e LogicManager"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "destroy GoalCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "CommandParser --\u003e LogicManager : goalCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "LogicManager -\u003e GoalCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate GoalCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand -\u003e GoalCommand : createBookWithGoal()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate GoalCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand --\u003e GoalCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate GoalCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand -\u003e Model : getFilteredBookList()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Model --\u003e GoalCommand : filteredBookList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand -\u003e Model : setBook()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "Model --\u003e GoalCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "CommandResult --\u003e GoalCommand : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "GoalCommand --\u003e LogicManager: result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate GoalCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "[\u003c-- LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 82
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class CommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Algorithm {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class XYZAlgorithm"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "LogicManager --\u003e\"1\" CommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "XYZCommandParser ..\u003e XYZAlgorithm"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "pennhanlee": 9
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Interface ReadOnlyLibrary \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class Library"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class ReadOnlyLibrary"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class WordBank"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Package Book {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class Book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class Genre"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class TotalPages"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class Bookmark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class UniqueBookList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package WordBank {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class WordBank"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package WordStore {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Abstract class WordStore"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class XYZWordStore"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Word {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class Word"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Library .up.|\u003e ReadOnlyLibrary"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "ModelManager o--\u003e \"1\" Library"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "ModelManager o--\u003e \"1\" WordBank"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Library *--\u003e \"1\" UniqueBookList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "UniqueBookList o--\u003e \"*\" Book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Book *--\u003e Name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Book *--\u003e Genre"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Book *--\u003e TotalPages"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Book *--\u003e Bookmark"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Book *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "WordBank \"*\" -down-\u003e \"1\" WordStore"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "XYZWordStore .up.|\u003e WordStore"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "note left of XYZWordStore: \"XYZWordStore \u003d NameWordStore, \\n GenreWordStore etc\" as N1"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "XYZWordStore \"1\" -\u003e \"*\" Word"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Name -[hidden]right-\u003e Genre"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Genre-[hidden]right-\u003e TotalPages"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "TotalPages-[hidden]right-\u003e Bookmark"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "ModelManager --\u003e\"1\" Book : filtered list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "pennhanlee": 41
    }
  },
  {
    "path": "docs/diagrams/NewStateActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "if () then ([command modifies model])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    :Clear all states in redo deque;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    if () then ([undo deque is full])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        :Remove oldest state in undo deque;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    :Move existing current state to undo deque;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    :Create new state with the modified model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    :Save new state as the current state;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "endif"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 20
    }
  },
  {
    "path": "docs/diagrams/NoteActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ":User executes add note command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ":Get the list of books;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "if () then ([index is valid])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    :Create a copy of the book with the added note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    :Replace outdated book with the updated book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 18
    }
  },
  {
    "path": "docs/diagrams/NoteClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "skinparam arrowColor LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Class AddNoteCommandParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Class CommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Class AddNoteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "CommandParser .left.\u003e AddNoteCommandParser: creates \u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommandParser ..\u003e AddNoteCommand : creates \u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand ..|\u003e Command"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand ..\u003e CommandResult : creates \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 32
    }
  },
  {
    "path": "docs/diagrams/NoteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "participant \":AddNoteCommandParser\" as AddNoteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "participant \"n:AddNoteCommand\" as AddNoteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[-\u003e LogicManager : execute(\"note 1 n/Thoughts txt/Something\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"note 1 n/Thoughts txt/Something\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "create AddNoteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "CommandParser -\u003e AddNoteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate AddNoteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate AddNoteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "CommandParser -\u003e AddNoteCommandParser : parse(\"1 n/Thoughts txt/Something\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate AddNoteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "create AddNoteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommandParser -\u003e AddNoteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate AddNoteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand --\u003e AddNoteCommandParser : n"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate AddNoteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommandParser --\u003e CommandParser : n"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate AddNoteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommandParser -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "destroy AddNoteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "CommandParser --\u003e LogicManager : n"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "LogicManager -\u003e AddNoteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate AddNoteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand -\u003e AddNoteCommand : createEditedBook()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate AddNoteCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand --\u003e AddNoteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate AddNoteCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand -\u003e Model : setBook()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Model --\u003e AddNoteCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand -\u003e Model : updateFilteredBookList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Model --\u003e AddNoteCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "CommandResult --\u003e AddNoteCommand : result"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "AddNoteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate AddNoteCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 81
    }
  },
  {
    "path": "docs/diagrams/SortActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":User executes sort command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "if() then ([No user input error])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Generate comparator based on input prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Update user sorting preference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Sort internal Observable List according to comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "else ([Input error])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":Return message to user;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 15
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \"s:SortCommand\" as SortCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "[-\u003e LogicManager : execute(\"sort n/\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(\"sort n/\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "create SortCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandParser -\u003e SortCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommandParser --\u003e CommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandParser -\u003e SortCommandParser : parse(\"n/\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommandParser -\u003e SortCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommand --\u003e SortCommandParser : s"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommandParser --\u003e CommandParser : s"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end os the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommandParser -[hidden]-\u003e CommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "destroy SortCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "LogicManager -\u003e SortCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommand -\u003e Model : setSortingPreference(\"n/\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommand -\u003e Model : sortFilteredBookList\\n (BookNameComparator)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "CommandResult --\u003e SortCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "SortCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 75
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Interface LibraryStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class JsonLibraryStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "StorageManager o--\u003e LibraryStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "JsonLibraryStorage .left.|\u003e LibraryStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "JsonLibraryStorage .down.\u003e JsonSerializableLibrary"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "JsonSerializableLibrary .right.\u003e JsonAdaptedBook"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "JsonAdaptedBook .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "pennhanlee": 7
    }
  },
  {
    "path": "docs/diagrams/SuggestionActivityDiagram1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":User misspell word in FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Search wordBank for suggestions;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    while() is ([words remaining \\n in wordBank])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    if() then ([Word within \\n Distance Limit])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        :Add to Suggestion List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    else ([Else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    endwhile ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Return Suggestion List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 13
    }
  },
  {
    "path": "docs/diagrams/SuggestionActivityDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":Add Words in Suggestion List to PriorityQueue();"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "if() then ([No words in PriorityQueue])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Prepare No Suggestion Message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "else ([Else])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Poll first word;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    :Prepare Suggestion Message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "endif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ":Return message to user;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 13
    }
  },
  {
    "path": "docs/diagrams/SuggestionAlgorithmClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Algorithm {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class SuggestionAlgorithm LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package WordBank {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class WordBank MODEL_COLOR"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package WordStore {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Abstract class WordStore MODEL_COLOR"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class XYZWordStore MODEL_COLOR"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package Word {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Class Word MODEL_COLOR"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "HiddenOutside .down.\u003e WordBank"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "SuggestionAlgorithm -\u003e \"1\" WordBank"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "FindCommand \"1\" -down-\u003e \"1\" SuggestionAlgorithm"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "note bottom of SuggestionAlgorithm: XYZAlgorithm \u003d SuggestionAlgorithm etc"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "WordBank \"*\" -down-\u003e \"1\" WordStore"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "XYZWordStore .up.|\u003e WordStore"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "note bottom of XYZWordStore: XYZWordStore \u003d NameWordStore, GenreWordStore etc"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "XYZWordStore \"1\" -\u003e \"*\" Word"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 44
    }
  },
  {
    "path": "docs/diagrams/SuggestionSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":FindCommandParser\" as FindCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":FindCommand\" as FindCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "participant \":SuggestionAlgorithm\" as SuggestionAlgorithm LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[-\u003e FindCommandParser : parse(\"find n/h@arry\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate FindCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "create FindCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "FindCommandParser -\u003e FindCommand : new FindCommand(predicate, inputPrefix, keyWords)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "FindCommand --\u003e FindCommandParser :"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[\u003c--FindCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate FindCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[-\u003e FindCommand : execute()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate FindCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "loop for each keyword"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    FindCommand -\u003e SuggestionAlgorithm : findSuggestions()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    activate SuggestionAlgorithm"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    loop for each word in wordbank"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        SuggestionAlgorithm -\u003e SuggestionAlgorithm : calculateDistance()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        activate SuggestionAlgorithm"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        SuggestionAlgorithm --\u003e SuggestionAlgorithm"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        deactivate SuggestionAlgorithm"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        SuggestionAlgorithm --\u003e FindCommand :"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        deactivate SuggestionAlgorithm"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    end"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "end"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "SuggestionAlgorithm -[hidden]-\u003e FindCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "destroy SuggestionAlgorithm"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "FindCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "CommandResult --\u003e FindCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "[\u003c-- FindCommand : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "deactivate FindCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 57
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class BookListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class DetailedBookListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class BookCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class DetailedBookCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class SidebarPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow *--\u003e SidebarPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow *-down-\u003e BookListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "BookListPanel -down-\u003e BookCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "BookListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "BookCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookCard -up-|\u003e BookCard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookListPanel -up-|\u003e BookListPanel"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "BookCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "BookListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "TanLeYang": 14
    }
  },
  {
    "path": "docs/diagrams/UiViewClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class MainWindow"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class BookListPanel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class DetailedBookListPanel"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class BookCard"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class DetailedBookCard"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow *-down-\u003e \"1\" BookListPanel"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "BookListPanel -right-\u003e \"*\" BookCard : renders \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookListPanel -up-|\u003e BookListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookCard -up-|\u003e BookCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookCard -right-\u003e \"*\" NoteCard : renders \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "skinparam classAttributeFontColor white"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package Model {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Interface ReadOnlyLibrary\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Interface ReadOnlyUserPrefs\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Interface Predicate\u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class HistoryManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class State"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class ViewTypeManager LOGIC_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Class Command LOGIC_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ViewTypeManager : addViewTypePairing()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ViewTypeManager : getViewType()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "show ViewTypeManager members"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Command --right-\u003e ViewTypeManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Command ---\u003e Model"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Model : undo()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Model : redo()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Model : save()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "show Model members"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "HistoryManager : addNewState()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "HistoryManager : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "HistoryManager : redo()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "show HistoryManager members"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ModelManager *--\u003e HistoryManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "HistoryManager --up-\u003e \"1..*\" State : \u003e Stores"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "State *-up-\u003e \"1\" ReadOnlyLibrary"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "State *-up-\u003e \"1\" ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "State *-up-\u003e \"0..1\" Predicate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 49
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":CommandParser\" as CommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":ViewTypeManager\" as ViewTypeManager LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":ModelManager\" as ModelManager MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":HistoryManager\" as HistoryManager MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "LogicManager -\u003e CommandParser : parseCommand(undo)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate CommandParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "CommandParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "UndoCommand --\u003e CommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "CommandParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate CommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "UndoCommand -\u003e ModelManager : undo()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate ModelManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ModelManager -\u003e HistoryManager : undo()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate HistoryManager"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "HistoryManager --\u003e ModelManager : newCurrentState"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate HistoryManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ModelManager --\u003e UndoCommand : newCurrentState"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate ModelManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "UndoCommand -\u003e ViewTypeManager : getViewType(newCurrentState)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate ViewTypeManager"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ViewTypeManager --\u003e UndoCommand : viewType"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate ViewTypeManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "TanLeYang": 23
    }
  },
  {
    "path": "docs/diagrams/ViewSwitchingActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "if () then ([command causes view switch])"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    if () then ([command causes switch to default view])"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if () then ([already in default view])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        else ()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            : Ui switches switch to default view;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    else ([command causes switch to detailed view])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if () then ([already in detailed view])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        else ()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            : UI switches to detailed view;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 19
    }
  },
  {
    "path": "docs/diagrams/ViewSwitchingSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "box Ui UI_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":MainWindow\" as MainWindow UI_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":DetailedBookListPanel\" as DetailedBookListPanel UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":DetailedBookCard\" as DetailedBookCard UI_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "participant \":NoteCard\" as NoteCard UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[-\u003e MainWindow : executeCommand(command)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow -\u003e LogicManager : execute()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "LogicManager -\u003e CommandResult"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "CommandResult -\u003e LogicManager : result"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "LogicManager -\u003e MainWindow : result"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow -\u003e CommandResult : getViewType()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "CommandResult -\u003e MainWindow : ViewType.DETAILED"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow -\u003e MainWindow : changeToDetailedView()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate MainWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "create DetailedBookListPanel"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow -\u003e DetailedBookListPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate DetailedBookListPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "create DetailedBookCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookListPanel -\u003e DetailedBookCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "activate DetailedBookCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "loop for all notes in the book to display"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    create NoteCard"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    DetailedBookCard -\u003e NoteCard"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    activate NoteCard"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    NoteCard -\u003e DetailedBookCard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    deactivate NoteCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "end"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookCard -\u003e DetailedBookListPanel"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate DetailedBookCard"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "DetailedBookListPanel -\u003e MainWindow"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate DetailedBookListPanel"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "MainWindow -\u003e MainWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deactivate MainWindow"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 64
    }
  },
  {
    "path": "docs/diagrams/style.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/\u0027"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Commonly used styles and colors across diagrams."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027comprehensive list of skinparams."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " \u0027/"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027T1 through T4 are shades of the original color from lightest to darkest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR #1D8900"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T1 #83E769"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T2 #3FC71B"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T3 #166800"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "!define UI_COLOR_T4 #0E4100"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #C8C8FA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #6A6ADC"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR #9D0012"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T1 #F97181"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T2 #E41F36"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T3 #7B000E"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "!define MODEL_COLOR_T4 #51000A"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR #A38300"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T1 #FFE374"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #EDC520"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T3 #806600"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "!define STORAGE_COLOR_T2 #544400"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!define ALGO_COLOR #8C489F"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!define ALGO_COLOR_T1 #C3C3E5"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!define ALGO_COLOR_T2 #F1F0FF"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "!define ALGO_COLOR_T3 #443266"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "!define USER_COLOR #000000"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam BackgroundColor #FFFFFFF"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Class {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFF"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderThickness 1"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    StereotypeFontColor #FFFFFF"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Actor {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    BorderColor USER_COLOR"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    Color USER_COLOR"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Sequence {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    MessageAlign center"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontSize 15"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxPadding 0"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    BoxFontColor #FFFFFF"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    FontName Arial"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Participant {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    FontColor #FFFFFFF"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    Padding 20"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam MinClassWidth 50"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ParticipantPadding 10"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam Shadowing false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam DefaultTextAlignment center"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam packageStyle Rectangle"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hide footbox"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "hide members"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "hide circle"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "pennhanlee": 5
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "ecp -\u003e ec ++: index, editBookDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "TanLeYang": 1
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "title: bookmark"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-F13-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F13-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-F13-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-F13-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "## bookmark v1.4"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Have you ever lost track of where you stopped reading your last book or misplaced your bookmark?"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Fret no more, **bookmark** is here to save the day!\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**bookmark** (not your regular bookmark!) is a desktop app for tracking reading progress. It allows you to centralise all your"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "reading progress into one place."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Example usages:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Adding a book and its current bookmark"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* View a specific book and its details"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* Update the details of a specified book"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* Delete a specified book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "* Listing all books in the application"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Add notes to books"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* Set reading goals"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "**bookmark is a desktop application for managing your books and reading progress.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "## User Guide"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Interested to try out the application? Head over to the [User Guide](https://ay2021s1-cs2103t-f13-2.github.io/tp/UserGuide.html)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "to get started!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "## Developer Guide"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "bookmark is an open source project and we welcome contributions from the community. Head over to the"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "[Developer Guide](https://ay2021s1-cs2103t-f13-2.github.io/tp/DeveloperGuide.html) to get started!"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Icons from [Flaticon](https://www.flaticon.com/free-icon/bookmark_807354?term\u003dbookmark\u0026page\u003d2\u0026position\u003d43) and"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "[Icons8](https://icons8.com/icons/set/white-exclamation-mark-emoji\") \u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Background splash image from [Unsplash](https://unsplash.com/photos/YLSwjSy7stw) "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 17,
      "-": 12,
      "TanLeYang": 13
    }
  },
  {
    "path": "docs/team/pennhanlee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "title: Penn Han\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "## Project: _bookmark_"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "_bookmark_ is a desktop book management application used for managing user added books to manage book records such as"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "last read page (bookmark), added goals and notes. A user will interact with bookmark through a GUI created with JavaFx and"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "invoke commands through a Command Line Interface style."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dF13\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dpennhanlee\u0026tabRepo\u003dAY2021S1-CS2103T-F13-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* **New Feature**: Added the ability to find Word Suggestions for typing errors during `Find` command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * What it does: When `Find` command is invoked, there might be spelling errors or inaccurate queries given by the user. The feature will help to search for"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  words that are similar and return the most likely word as a suggestion to the user. However, if the given word to search has no similar words, there will not be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  any suggestions returned. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes when finding books which will occur often as _bookmark_ uses the CLI to invoke commands. _bookmark_ will"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  provide suggestions and improve the User Experience as users will be able to find their intended books more easily."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Highlights: This enhancement require the creation with a new data structure into model to store the individual words in each book\u0027s name, genre and tag. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Credits: The suggestion feature is based off the damerau-levenstein algorithm. [Algorithm_link](https://github.com/KevinStern/software-and-algorithms/blob/master/src/main/java/blogspot/software_and_algorithms/stern_library/string/DamerauLevenshteinAlgorithm.java)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* **New Feature**: improved Help Window to display Command Summary for quick access."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * What it does: when `help` command is activated, the Help Window will display a summarised version of the User Guide displaying the "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  commands available and the CLI format that it should follow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Justification: This feature improves the User Experience of _bookmark_ significantly as the newly added commands adds to a long list of"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  prefixes and CLI formats that a user will have to follow to navigate through the application. As opposed to providing a link to the User Guide, "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  experienced Users who have already visited the User Guide can look for what they need in the Help Window quickly."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Highlights: This enhancement resulted in the need for creation of different help page command classes. It will need to be maintained once new commands are added or existing commands are updated."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Credits: JavaFX Scenebuilder"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Updated codebase for Add Command and other relevant classes to accept Books and its attributes.  (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Updated constants in various TestUtil to be used in tests and updated tests to accommodate to "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  revamped Add Command(Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * Added documentation for the features `Add` and `Suggestion Feature` and `Help` [\\#72]()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * Edited Quickstart to installation and starting the application with Images"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * Standardise all comments to follow a format: Command Overview Examples, Important Detail and Warning to existing documentation: [\\#74]()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * Added implementation details of the `Add` feature."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    * Added implementation details of `Suggestion` feature."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 54
    }
  },
  {
    "path": "docs/team/tanleyang.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "title: Le Yang\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "## Project: _bookmark_"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "_bookmark_ is a desktop book management application that allows user to manage their books and reading progress. It allows"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "users to track which page they stopped reading at. It also has features like adding goals and notes to help improve their reading"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "experience. A user will interact with _bookmark_ through a GUI created with JavaFx and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "invoke commands through a Command Line Interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Code contributed:** [RepoSense](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dCS2103T-F13-2\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dTanLeYang\u0026tabRepo\u003dAY2021S1-CS2103T-F13-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **New Feature:** Added the ability to **undo previous commands** and **redo undone commands**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * What it does: Allows the user to undo previous commands or redo commands that have been undone."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Justification: This feature enhances the application by allowing the user to easily undo any mistakes made when"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    entering a command. As an application that relies on a Command Line Interface, typing mistakes are inevitable, hence"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    the undo command would be very useful in providing convenience to the user. The redo command also allows the user to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    move back and forth in history, allowing users to conveniently compare changes."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Highlights: This feature must work with all other commands as well as future commands to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Hence proper brainstorming and planning of the implementation had to be done to ensure the "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    implementation can be easily extended to work with future commands. Furthermore, the feature should not affect the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    speed of the application, hence care had to be taken to ensure redundant states are not stored in order to"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    improve the memory efficiency. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    The implementation was challenging as the application will display the book in different ways according to user entered"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    commands, hence there was not only a need to keep track of the changes to the books stored,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    but also how the books were being displayed in order to allow the undo/redo command to bring the application back to"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    exactly how it was."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Code contributed for this enhancement: [#115](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/115), "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    [#140](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/140)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **New Feature:** Added ability for Ui to switch between a summarised and detailed view of the books stored."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * What it does: Allows the user to select and view a specific book in detail. The application by default shows a "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    summarised view of books but users can use the view command to select a specific book and view its complete details. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Justification: This feature enhances the application by ensuring that users are not overwhelmed by too much information."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Some information, such as the content of the notes added to the books, will only be shown when viewing a book in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    detailed view. This prevents the Ui from being overcrowded with too much information and allows the user to focus"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    their attention on a specific book of interest, improving user experience."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Highlights: This feature must work fast as switching between views should be as smooth as possible to ensure a good"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    user experience. Hence, special care was taken to minimize unecessary re-renderings. Furthermore, the Ui needed to be"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    in sync with changes to the Model. The above requirements were met using an implementation that applied the Observer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    design pattern. Additionally, as I had no prior experience with JavaFX, I had to pick up and learn JavaFX"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    quickly in order to successfully implement this feature. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Code contributed for this enhancement: [#92](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/92),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    [#121](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/121), [#165](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/165)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Enhancements to existing features:** "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Re-designed the Ui of _bookmark_. Added a sidebar to the Ui to display meta-data to user. [#92](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/92)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Added more thorough input validation for the user entered fields. [#130](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/130)  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Contributions to team member\u0027s enhancements:**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Did the initial refactoring of the code inherited from the AB3 project. [#76](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/76)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Documentation:**\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * Wrote documentation and added UML diagrams for the `Ui view switching` and `Undo/redo` features. [#103](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/103),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        [#115](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/103)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * Added more use cases into the Developer Guide. [#170](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/170)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * Updated the manual testing section of the Developer Guide. [#170](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/170)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    * Wrote documentation for the `undo` and `redo` features. [#115](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/103)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Project Management and Dev Ops:**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Managed releases v1.2 and v1.3 on GitHub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Set up the team GitHub repo"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Managed the team repo\u0027s issue tracker"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Community:**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [#107](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/107),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    [#97](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/97), [#168](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/168),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    [#119](https://github.com/AY2021S1-CS2103T-F13-2/tp/pull/119)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Contributed to forum discussions (e.g [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/170), [2](https://github.com/nus-cs2103-AY2021S1/forum/issues/182))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (e.g [1](https://github.com/TanLeYang/ped/issues/4),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  [2](https://github.com/TanLeYang/ped/issues/3), [3](https://github.com/TanLeYang/ped/issues/1))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Given below are the contributions I made to the Developer Guide."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Changing Ui view"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Implementation"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "*bookmark\u0027s* UI supports two types of views: the default, **summarised view** which displays summarised information"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "regarding the books stored, and the **detailed view** which displays detailed information about a particular book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`BookListPanel` `BookCard` as well as its corresponding subclasses `DetailedBookListPanel` and `DetailedBookCard` facilitates"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "the display of book information."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "When in the summarised view, `MainWindow` renders `BookListPanel` which displays the book information using `BookCard`,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "while in the detailed view, `DetailedBookListPanel` is rendered which displays the book information using"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`DetailedBookCard`. `DetailedBookCard` will in turn use other components to display the book information,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "such as `NoteCard` to display the notes added to a book."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Both `BookListPanel` and `DetailedBookListPanel` makes use of JavaFX\u0027s `ListView` to display the `BookCard` or `DetailedBookCard`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "respectively."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The class diagram below shows the relevant classes involved:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![Ui view class diagram](../images/UiViewClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Switching between the two views"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`MainWindow` and `CommandResult` facilitates the switching between the two views."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`MainWindow#executeCommand()` initializes all changes to what is displayed by the UI by calling `Logic#execute()`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "which returns a `CommandResult`. `MainWindow#executeCommand()` is called when user enters a command into the application."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "From the returned `CommandResult`, `CommandResult#getViewType()` indicates how the UI should switch its view."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`CommandResult#getViewType()` returns a `ViewType`, of which there are three types: "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `ViewType.DEFAULT` - Instructs UI to switch to the default, summarised view"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `ViewType.DETAILED` - Instructs UI to switch to the detailed, single book view"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `ViewType.MOST_RECENTLY_USED` - Instructs UI to stay in whatever view it is in"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Based on the type of `ViewType` returned by `CommandResult#getViewType()`, `MainWindow#resetView()`,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`MainWindow#changeToDetailedView()`, or no method is called accordingly."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The activity diagram below illustrates the flow of execution when the UI decides which view to use:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![View switching flow of execution](../images/ViewSwitchingActivityDiagram.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Below is a sequence diagram that shows a scenario whereby the UI switches from the default summarised view to the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "detailed view:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![Switching to detailed view sequence diagram](../images/ViewSwitchingSequenceDiagram.png)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "##### Aspect: What to display DetailedBookCard with"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 1 (current choice):** Use JavaFX ListView"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Easy to keep UI up to sync with model by overriding ListCell\u0027s updateItem method"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: Extra care must be taken to not allow multiple books to be displayed as detailed view is only meant to show"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  one book"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 2:** Use other JavaFX layouts"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: More in-line with the purpose of the detailed view of showing only one book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: More work has to be done to sync up the UI with the model."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "### Undo/redo feature"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The undo/redo mechanism is implemented by storing the state of the application after each command. The state of the "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "application can be divided into two components:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   1. The state of the [Model](#model-component)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   2. The state of the [Ui](#ui-component)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The state of the Model is managed by `HistoryManager`. It does so by storing `State` objects. Each `State` object contains a "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ReadOnlyLibrary`, `ReadOnlyUserPrefs` and a `Predicate` used to decide which books stored in the Model should be visible to"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "users. `HistoryManager` maintains a current state property representing the current state of the Model. It also stores "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "previous states that be restored via a redo or undo."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `HistoryManager#addNewState()` — Adds a new state to be used as the current state"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `HistoryManager#undo()` — Restores the most recent previous state."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `HistoryManager#redo()` — Restores the most recently undone state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The state of the Ui is managed by `ViewTypeManager`. "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The state of the Ui refers to what `ViewType` the Ui is in (see [Changing Ui View](#changing-ui-view))."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewTypeManager` maintains a mapping between `State` objects and a `ViewType`. This mapping indicates what "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewType` the Ui should be given a particular `State` of the Model."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `ViewTypeManager#addViewTypePairing()` — Adds a new pairing between a given `State` and `ViewType`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* `ViewTypeManager#getViewType()` — Get the correct `ViewType` for the given `State`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Whenever the user enters any commands EXCEPT:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `help`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `exit`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   * `undo` and `redo` itself"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "   "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "the method `Model#save()` will be called which adds a new `State`, representing the new state of the Model, to `HistoryManager`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "and causes `HistoryManager` to store the previous `State`. Additionally, `ViewTypeManager#addViewTypePairing()` will be "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "called to create a new pairing between the newly created `State` and the appropriate `ViewType` to use to display the contents of the "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Model to the user. The stored `States` and its corresponding `ViewType` pairing will be used to change the application"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "state accordingly when a undo or redo operation, exposed as `Model#undo()` and `Model#redo()` respectively, is executed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The class diagram below illustrates the classes that facilitates the undo and redo"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "feature."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoClassDiagram](../images/UndoRedoClassDiagram.png)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The next section will go into more detail about how the state of the application is managed as well as how undo and redo"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "executes."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### How state is managed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`HistoryManager` manages state by keeping a current state variable as well as two deques, an undo deque and a redo deque."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The undo deque stores the states to be recovered via an undo command, while the redo deque stores previously undone states "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "to be recovered via a redo command. `ViewTypeManager` maintains a map that maps `State` objects to a corresponding "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewType`."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Below is an example to illustrate how undoing and redoing works in a typical scenario."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 1. The user launches the application for the first time. The `HistoryManager` will be inititalised with the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "initial state of the model as the current state, i.e State 1. Undo and redo deques will be empty. `ViewTypeManager`\u0027s map"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "will also only have 1 entry, mapping the initial `State` to `ViewType.DEFAULT`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState0](../images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 2. The user executes add command to add a new book. The command will call the `Model#save()` method"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "which will create a new `State`, State 2, representing the new state of the Model and add it into `HistoryManager` via the "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`HistoryManager#addNewState()` method. State 2 will now be the current state while the previous current state, State 1,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "will be pushed into the undo deque. `ViewTypeManager`\u0027s map will be updated accordingly by calling the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewTypeManager#addViewTypePairing()` method with State 2 and the correct `ViewType` to be used to display State 2 to "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState1](../images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#save()`, so the state will not be saved."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 3. The user decides that adding the book was a mistake and decides to undo the action by using the undo command."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "This causes the current state, State 2 to be pushed to the redo deque. State 1 will be popped from the undo deque and "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "made the current state. `ViewTypeManager#getViewType()` will be called with State 1 in order to get the correct "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "`ViewType` to display State 1 with."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState2](../images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoSequenceDiagram](../images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 4. The user changes his mind again, deciding that he wants to add the book. He redoes the action by using the redo"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "command, causing the current state, State 1 to be pushed back into the undo deque and State 2 to be popped from the redo"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "deque and made the current state. Again, `ViewTypeManager#getViewType()` will be called to get the correct `ViewType`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "to display State 2 with."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState3](../images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the undo deque or redo deque is empty"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "when the user tries to undo and redo respectively, an error will be shown and no state change will occur."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 5. Now suppose the user adds a book and then edits a book, causing State 3 and State 4 to be created. He then"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "undoes the edit command. `HistoryManager` will now look like this:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState5](../images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Step 6: The user decides to then delete a book, causing State 5 to be created and made the current state."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The previous current state, State 3, will be pushed into the undo deque while the redo deque is cleared and "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "hence State 4 is deleted."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState6](../images/UndoRedoState6.png)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "This design choice of clearing the redo deque when a new state is added was made because states existing in the redo deque"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "cannot be represented in a linear, sequential path together with newly added states. Hence, it will be confusing"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "to allow users to redo to these states. To see this, we can plot the evolution of state changes in a sequential manner: "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![UndoRedoState7](../images/UndoRedoState7.png)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "To get a clearer picture, we consider what could occur if the redo deque is not "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "cleared upon adding new state into the `HistoryManager`. "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Consider a scenario where the redo deque originally contains some state. The user subsequently enters "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "5 commands that each create a new state and the redo deque is never cleared upon new states being added."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Then, the user enters the redo command, causing the top-most state in the redo deque to be popped and made the current state. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "As a result, all the changes that the user has done through the 5 commands are removed in a single redo command, "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "which is not the intended behaviour."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Furthermore, to prevent excessive memory usage, a cap on the number of states stored by `HistoryManager`\u0027s undo deque"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "can be set in `HistoryManager#MAX_UNDO_COUNT`. If a new state is added but the undo deque is already at max capacity,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "then the oldest state in the undo deque will be deleted to make room. A similar strategy is employed for `ViewTypeManager`,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "with its map being implemented as a FIFO cache with a fixed maximum size."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The activity diagram below explains the flow of execution when a new state is added to `HistoryManager`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "![NewStateActivityDiagram](../images/NewStateActivityDiagram.png)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#### Design considerations"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 1 (current choice):** Saves copies of the entire `Library` and `UserPrefs` in `State`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the book being deleted)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: We must ensure that the implementation of undoing/redoing of each individual command are correct, complexity builds up as more"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  commands are added."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Alternative 1 was eventually chosen as there was no noticable performance degradation during testing with a reasonable "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "cap (10) on the number of states stored. It is also much more scalable and less prone to breaking upon addition"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "or modification of commands. "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "##### Aspect: How to decide which actions should create and save state"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 1 (current choice):** Expose a method in the `Model` interface that when called creates and saves state."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: More declarative, easier to see when the model will create and save state."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: Worse separation of concerns, the responsibility of deciding when to create and save state is moved away "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    from the model and to the components that interact with the model."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "* **Alternative 2:** The methods implemented by `ModelManager` to modify the model such as "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    `ModelManager#addBook()` also creates and save state."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Pros: Better separation of concerns, the model is responsible for deciding what actions constitute a modification"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    and thus warrants the creation and saving of state."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  * Cons: The creation and saving of state becomes a side effect, not immediately clear that it occurs.  "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Alternative 1 was eventually chosen as we liked the declarative nature of it as well as the clarity it provides. We also"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "felt that alternative 2 could cause a lot of problems if a command needed to modify the model in multiple ways thus"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "would cause multiple states to be created for a single command."
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 313
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Changes the remark of an existing book in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the book identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"by the index number used in the last book listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param index of the book in the filtered book list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param remark of the book to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.bookmark.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of book data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the book’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Create a new `Remark` in `seedu.bookmark.model.book`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each book."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "Simply add the following to [`seedu.bookmark.ui.BookCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ":exclamation: You must delete bookmark’s storage file located at `/data/library.json` before running it! Not doing so will cause bookmark to default to an empty library!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public PersonCard(Person book, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    remark.setText(book.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Person bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Person editedBook \u003d new Person(bookToEdit.getName(), bookToEdit.getPhone(), bookToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                bookToEdit.getAddress(), remark, bookToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.setPerson(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedBook));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code bookToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private String generateSuccessMessage(Person bookToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.format(message, bookToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 370,
      "TanLeYang": 23,
      "angrybunny123": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.bookmark.model.book.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cLabel fx:id\u003d\"genre\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$genre\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "**`invalidBookLibrary.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "TanLeYang": 4,
      "angrybunny123": 1
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.bookmark.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "       Person bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "       Person editedBook \u003d createEditedPerson(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "       if (!bookToEdit.isSamePerson(editedBook) \u0026\u0026 model.hasPerson(editedBook)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "       model.setPerson(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedBook));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "       books.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 243,
      "TanLeYang": 7
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.LibraryStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing bookmark ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LibraryStorage libraryStorage \u003d new JsonLibraryStorage(userPrefs.getBookmarkFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s library and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * The data from the sample library will be used instead if {@code storage}\u0027s library is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * or an empty library will be used instead if errors occur when reading {@code storage}\u0027s library."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Optional\u003cReadOnlyLibrary\u003e libraryOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ReadOnlyLibrary initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            libraryOptional \u003d storage.readLibrary();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            if (!libraryOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Library\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            initialData \u003d libraryOptional.orElseGet(SampleDataUtil::getSampleLibrary);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Library\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Library\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Library\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        logger.info(\"Starting bookmark \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping bookmark ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 139,
      "pennhanlee": 6,
      "TanLeYang": 38
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String LOG_FILE \u003d \"bookmark.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_INVALID_BOOK_DISPLAYED_INDEX \u003d \"The book index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTE_DISPLAYED_INDEX \u003d \"The note index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_BOOKS_LISTED_OVERVIEW \u003d \"%1$d books listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MESSAGE_WORD_SUGGESTION \u003d \"Could not find: %1$s \\nDid you mean: %2$s?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MESSAGE_WORD_NOT_UNDERSTOOD \u003d \"Could not find: %1$s \\nSorry! I don\u0027t\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                            + \" have any suggestions!!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_TAGS \u003d \"The book has too many tags, every book can only have %d tags!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_NOTES \u003d \"The book has too many notes, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"every book can only have %d notes\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_TOO_MANY_BOOKS \u003d \"Sorry, bookmark can only store up to %d books!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final String MESSAGE_BOOKS_SORTED \u003d \"Sorted by \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 1,
      "-": 10,
      "pennhanlee": 3,
      "TanLeYang": 7,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    .setSerializationInclusion(JsonInclude.Include.NON_NULL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 139,
      "TanLeYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Converts {@code s} representing an unsigned integer into a String representing the same integer but with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * any leading \"0\"s removed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param s String representing a non-zero unsigned integer"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static String trimLeadingZeroes(String s) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        BigInteger value \u003d new BigInteger(s);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "TanLeYang": 15
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the Library."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @see seedu.bookmark.model.Model#getLibrary()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of books */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "TanLeYang": 14
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.CommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final CommandParser commandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        commandParser \u003d new CommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Command command \u003d commandParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            storage.saveLibrary(model.getLibrary());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return model.getLibrary();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return model.getFilteredBookList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return model.getBookmarkFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "TanLeYang": 22
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/ViewType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public enum ViewType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    DETAILED,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    DEFAULT,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    MOST_RECENTLY_USED"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 7
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/ViewTypeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.HistoryManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.State;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Manages what view the {@code Ui} should be in given a {@code State} representing the state of the {@code Model}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Implementation is backed by a FIFO cache using java\u0027s {@code LinkedHashMap}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ViewTypeManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final int MAX_CACHE_SIZE \u003d HistoryManager.MAX_UNDO_COUNT * 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Cache that maps {@code State} to a {@code ViewType}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Deletes entries for obsolete states to prevent excessive memory usage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Map\u003cState, ViewType\u003e stateToViewMap \u003d new LinkedHashMap\u003c\u003e() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        protected boolean removeEldestEntry(final Map.Entry eldest) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return size() \u003e MAX_CACHE_SIZE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private ViewType currentView \u003d ViewType.DEFAULT;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ViewType getCurrentViewType() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return currentView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the correct {@code ViewType} for the given {@code State}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ViewType getViewType(State state) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (stateToViewMap.get(state) \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return ViewType.DEFAULT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return stateToViewMap.get(state);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the current {@code ViewType} to the given ViewType."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setCurrentView(ViewType newView) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (newView !\u003d ViewType.MOST_RECENTLY_USED) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            currentView \u003d newView;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Adds a new pairing between the given {@code State} and {@code ViewType}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void addViewTypePairing(State state, ViewType viewType) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (viewType \u003d\u003d ViewType.MOST_RECENTLY_USED) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            stateToViewMap.put(state, currentView);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            stateToViewMap.put(state, viewType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 59
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/algorithm/SuggestionAlgorithm.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.logic.algorithm;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.logic.parser.Prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.WordBank;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.Word;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * The EditDistance class manages the finding of suggestions for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * misspelled words"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class SuggestionAlgorithm {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final int DISTANCE_TOLERANCE \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private final WordBank wordBank;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a SuggestionAlgorithm object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param wordBank WordBank"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public SuggestionAlgorithm(WordBank wordBank) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(wordBank);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.wordBank \u003d wordBank;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Finds words that are close to the misspelled word."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param sourceWord mispelled word to find suggestion for"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public ArrayList\u003cWord\u003e findSuggestion(String sourceWord, Prefix prefix) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(sourceWord);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(prefix);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String prefixName \u003d prefix.getPrefix();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HashMap\u003cString, Word\u003e wordStore \u003d wordBank.getWordStore(prefixName).getWordStore();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ArrayList\u003cWord\u003e suggestions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Map.Entry\u003cString, Word\u003e word : wordStore.entrySet()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d word.getValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            int wordDistance \u003d calculateDistance(sourceWord, targetWord.getWord());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            if (wordDistance \u003c\u003d DISTANCE_TOLERANCE \u0026\u0026 wordDistance \u003e\u003d 0) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                Word wordCopy \u003d new Word(targetWord.getWord(), wordDistance);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                suggestions.add(wordCopy);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Calculates the string Distance between source and target"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * strings using the Damerau-Levenshtein algorithm. Distance is case sensitive."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param source String object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param target String object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return The edit distance between source and target strings"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @throws IllegalArgumentException if either source or target is null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author crwohlfeil-reused"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //Reused from https://github.com/crwohlfeil/damerau-levenshtein/blob/master/src/main/java/com/codeweasel/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // DamerauLevenshtein.java with minor modifications"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int calculateDistance(String source, String target) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(source);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        int sourceLength \u003d source.length();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int targetLength \u003d target.length();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (sourceLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return targetLength;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (targetLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return sourceLength;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        int[][] distanceArray \u003d new int[sourceLength + 1][targetLength + 1];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c sourceLength + 1; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            distanceArray[i][0] \u003d i;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c targetLength + 1; j++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            distanceArray[0][j] \u003d j;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //setting up 2D array for cost calculation --\u003e Deliberate double forloop."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c sourceLength + 1; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d 1; j \u003c targetLength + 1; j++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                int cost \u003d source.charAt(i - 1) \u003d\u003d target.charAt(j - 1) ? 0 : 1; //testing if char are same"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                distanceArray[i][j] \u003d Math.min(Math.min(distanceArray[i - 1][j] + 1, distanceArray[i][j - 1] + 1),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                                distanceArray[i - 1][j - 1] + cost); //setting up the cost using 2d arr"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                if (i \u003e 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 j \u003e 1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 source.charAt(i - 1) \u003d\u003d target.charAt(j - 2)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 source.charAt(i - 2) \u003d\u003d target.charAt(j - 1)) { //for transpositional swapped chars"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    distanceArray[i][j] \u003d Math.min(distanceArray[i][j], distanceArray[i - 2][j - 2] + cost);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return distanceArray[sourceLength][targetLength];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Gets the wordbank attribute in the Algorithm object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public WordBank getWordBank() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.wordBank;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 41,
      "pennhanlee": 67
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TOTAL_PAGES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * Adds a Book into a Library."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a book to the Library. \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_GENRE + \"GENRE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_TOTAL_PAGES + \"TOTAL PAGES \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + \"[\" + PREFIX_BOOKMARK + \"BOOKMARK] \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_NAME + \"Harry Potter \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_GENRE + \"Fiction \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_TAG + \"Magic \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_TAG + \"Witches \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_TOTAL_PAGES + \"500 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + PREFIX_BOOKMARK + \"10 \\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New book added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the library\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Book toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates an AddCommand to add the specified {@code book}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public AddCommand(Book book) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        toAdd \u003d book;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (model.isFullCapacity()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_TOO_MANY_BOOKS, Model.MAX_BOOK_CAPACITY));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (model.hasBook(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.addBook(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "pennhanlee": 18,
      "TanLeYang": 21
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/AddNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOTE_TEXT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Adds a Note to a Book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class AddNoteCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a note to the book. \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                       + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                       + PREFIX_NOTE_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                       + PREFIX_NOTE_TEXT + \"TEXT\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_ADD_NOTE_SUCCESS \u003d \"Added Note: %1$s, to Book: %2$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NOTE \u003d \"This note already exists for the book.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final Note note;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Creates an AddNoteCommand to add a {@code note} to the specified book at {@code index}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public AddNoteCommand(Index index, Note note) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Creates and returns a {@code Book} with the updated details of {@code bookToEdit} with the added note."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    protected static Book createEditedBook(Book bookToEdit, Note note) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Name updatedName \u003d bookToEdit.getName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Genre updatedGenre \u003d bookToEdit.getGenre();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d bookToEdit.getTags();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TotalPages updatedTotalPages \u003d bookToEdit.getTotalPages();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Bookmark updatedBookmark \u003d bookToEdit.getBookmark();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal updatedGoal \u003d bookToEdit.getGoal();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        List\u003cNote\u003e updatedNotes \u003d new ArrayList\u003c\u003e(bookToEdit.getNotes());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (bookToEdit.containsNote(note)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        updatedNotes.add(note);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!Book.isValidNumNotes(updatedNotes)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_TOO_MANY_NOTES, Book.MAX_NOTE_COUNT));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new Book(updatedName, updatedGenre, updatedTags,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                updatedTotalPages, updatedBookmark, updatedGoal, updatedNotes);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d createEditedBook(bookToEdit, note);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_NOTE_SUCCESS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                note.title, bookToEdit.getName()), false, false,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!(other instanceof AddNoteCommand)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand e \u003d (AddNoteCommand) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                       \u0026\u0026 note.equals(e.note);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 4,
      "pangpuncake": 103,
      "TanLeYang": 7
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Deletes all books stored."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All books have been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.setLibrary(new Library());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewTypeManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.State;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final ViewTypeManager VIEW_TYPE_MANAGER \u003d new ViewTypeManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected void storeViewType(State state, ViewType viewType) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (viewType !\u003d ViewType.MOST_RECENTLY_USED) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            VIEW_TYPE_MANAGER.setCurrentView(viewType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        VIEW_TYPE_MANAGER.addViewTypePairing(state, viewType);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "TanLeYang": 15
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ViewType viewType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, ViewType viewType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.viewType \u003d viewType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this(feedbackToUser, false, false, ViewType.DEFAULT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ViewType getViewType() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return viewType;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 viewType.toString().equals(otherCommandResult.viewType.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, viewType.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "TanLeYang": 15
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Deletes a book identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \": Deletes the book identified by the index number used in the displayed book list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final String MESSAGE_DELETE_BOOK_SUCCESS \u003d \"Deleted Book: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book bookToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "TanLeYang": 13,
      "angrybunny123": 4
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/DeleteNoteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Adds a Note to a Book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class DeleteNoteCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notedel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a note from the book. \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                       + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                       + \"NOTE_INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_DELETE_NOTE_SUCCESS \u003d \"Deleted Note: %1$s, from Book: %2$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final Index noteIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Creates a DeleteNoteCommand to delete a {@code note} at {@code index} from the specified book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public DeleteNoteCommand(Index index, Index noteIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(noteIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.noteIndex \u003d noteIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Creates and returns a {@code Book} with the updated details of {@code bookToEdit} without the deleted note."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    protected static Book createEditedBook(Book bookToEdit, Index index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Name updatedName \u003d bookToEdit.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Genre updatedGenre \u003d bookToEdit.getGenre();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d bookToEdit.getTags();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TotalPages updatedTotalPages \u003d bookToEdit.getTotalPages();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Bookmark updatedBookmark \u003d bookToEdit.getBookmark();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Goal updatedGoal \u003d bookToEdit.getGoal();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        List\u003cNote\u003e updatedNotes \u003d new ArrayList\u003c\u003e(bookToEdit.getNotes());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        updatedNotes.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new Book(updatedName, updatedGenre, updatedTags,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                updatedTotalPages, updatedBookmark, updatedGoal, updatedNotes);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (noteIndex.getZeroBased() \u003e\u003d bookToEdit.getNotes().size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note deletedNote \u003d bookToEdit.getNotes().get(noteIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d createEditedBook(bookToEdit, noteIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_NOTE_SUCCESS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                deletedNote.title, bookToEdit.getName()), false, false,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!(other instanceof DeleteNoteCommand)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand e \u003d (DeleteNoteCommand) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                       \u0026\u0026 noteIndex.equals(e.noteIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 103,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TOTAL_PAGES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Edits the details of an existing book in the library."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the book identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + \"by the index number used in the displayed book list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + \"[\" + PREFIX_GENRE + \"GENRE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + \"[\" + PREFIX_TOTAL_PAGES + \"TOTAL_PAGES] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + \"[\" + PREFIX_BOOKMARK + \"BOOKMARK]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + PREFIX_GENRE + \"Horror\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_EDIT_BOOK_SUCCESS \u003d \"Edited Book: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOK \u003d \"This book already exists in the library.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final EditBookDescriptor editBookDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param index of the book in the filtered book list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param editBookDescriptor details to edit the book with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditCommand(Index index, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(editBookDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.editBookDescriptor \u003d new EditBookDescriptor(editBookDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book bookToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d createEditedBook(bookToEdit, editBookDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!bookToEdit.isSameBook(editedBook) \u0026\u0026 model.hasBook(editedBook)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!Bookmark.isValidBookmark(editedBook.getBookmark(), editedBook.getTotalPages())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new CommandException(Bookmark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.setBook(bookToEdit, editedBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        model.sortByDefaultComparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_BOOK_SUCCESS, editedBook),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                false, false, ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Creates and returns a {@code Book} with the details of {@code bookToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * edited with {@code editBookDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static Book createEditedBook(Book bookToEdit, EditBookDescriptor editBookDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assert bookToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Name updatedName \u003d editBookDescriptor.getName().orElse(bookToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Genre updatedGenre \u003d editBookDescriptor.getGenre().orElse(bookToEdit.getGenre());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editBookDescriptor.getTags().orElse(bookToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TotalPages updatedTotalPages \u003d editBookDescriptor.getTotalPages().orElse(bookToEdit.getTotalPages());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Bookmark updatedBookmark \u003d editBookDescriptor.getBookmark().orElse(bookToEdit.getBookmark());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Goal currentGoal \u003d bookToEdit.getGoal();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        List\u003cNote\u003e currentNotes \u003d bookToEdit.getNotes();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new Book(updatedName, updatedGenre, updatedTags,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                updatedTotalPages, updatedBookmark, currentGoal, currentNotes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 editBookDescriptor.equals(e.editBookDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Stores the details to edit the book with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * corresponding field value of the book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static class EditBookDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        private Genre genre;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        private TotalPages totalPages;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        private Bookmark bookmark;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public EditBookDescriptor() {}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public EditBookDescriptor(EditBookDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            setGenre(toCopy.genre);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            setTotalPages(toCopy.totalPages);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            setBookmark(toCopy.bookmark);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, genre, tags, totalPages, bookmark);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void setGenre(Genre genre) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            this.genre \u003d genre;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public Optional\u003cGenre\u003e getGenre() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return Optional.ofNullable(genre);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void setTotalPages(TotalPages totalPages) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            this.totalPages \u003d totalPages;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public Optional\u003cTotalPages\u003e getTotalPages() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return Optional.ofNullable(totalPages);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void setBookmark(Bookmark bookmark) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public Optional\u003cBookmark\u003e getBookmark() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return Optional.ofNullable(bookmark);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (!(other instanceof EditBookDescriptor)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            EditBookDescriptor e \u003d (EditBookDescriptor) other;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u0026\u0026 getGenre().equals(e.getGenre())"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \u0026\u0026 getTotalPages().equals(e.getTotalPages())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \u0026\u0026 getBookmark().equals(e.getBookmark());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 36,
      "-": 131,
      "TanLeYang": 66,
      "angrybunny123": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, ViewType.DEFAULT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.logic.algorithm.SuggestionAlgorithm;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.Word;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.WordComparator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Finds and lists all books in bookmark whose specified property contains any of the argument keywords."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Currently supports finding in name, genre and tag properties, as well as finding completed and non completed books."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all books that contain any of the specified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"keywords in the specified field (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"Parameters: ONE Prefix Specifier\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_GENRE + \"GENRE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_COMPLETED + \"COMPLETED BOOKS] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_NOT_COMPLETED + \"BOOKS IN PROGRESS]\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"KEYWORD [MORE_KEYWORDS]... (Not needed for c/ and nc/)\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" g/ fantasy horror\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private final Predicate\u003cBook\u003e predicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private final String[] keywords;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private final Prefix prefix;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a FindCommand Object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public FindCommand(Predicate\u003cBook\u003e predicate, Prefix prefix, String[] keywords) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        PriorityQueue\u003cWord\u003e finalSuggestion \u003d new PriorityQueue\u003c\u003e(new WordComparator());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ArrayList\u003cWord\u003e wordSuggestions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (model.getFilteredBookList().size() \u003d\u003d 0"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 !prefix.equals(PREFIX_COMPLETED)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 !prefix.equals(PREFIX_NOT_COMPLETED)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            SuggestionAlgorithm suggestionAlgorithm \u003d new SuggestionAlgorithm(model.getWordBank());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            for (String word : keywords) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                wordSuggestions \u003d suggestionAlgorithm.findSuggestion(word, prefix);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                finalSuggestion.addAll(wordSuggestions);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String searchedWord \u003d String.join(\" \", keywords);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            if (finalSuggestion.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                return new CommandResult(String.format("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                        Messages.MESSAGE_WORD_NOT_UNDERSTOOD, searchedWord));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String suggestedWord \u003d finalSuggestion.poll().getWord();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    String.format(Messages.MESSAGE_WORD_SUGGESTION, searchedWord, suggestedWord));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_LISTED_OVERVIEW, model.getFilteredBookList().size()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "pennhanlee": 37,
      "TanLeYang": 7,
      "angrybunny123": 22
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/GoalCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_PAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a goal for a specified book. \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Parameters: INDEX (positive integer) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + PREFIX_PAGE + \"PAGE NUMBER \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + PREFIX_DEADLINE + \"DEADLINE (DD-MM-YYYY) \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + COMMAND_WORD + \" 2 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + PREFIX_PAGE + \"102 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + PREFIX_DEADLINE + \"21-12-2024\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_DEADLINE_OVERDUE \u003d \"%s has already passed. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Please choose a deadline later than today.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_ADD_GOAL_SUCCESS \u003d \"New goal for %s: %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_GOAL_OVERSHOT_TOTAL_PAGES \u003d \"Your goal (page %d) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"overshot number of pages of the book (%d pages). Please choose a valid page!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_ZERO_GOAL \u003d \"Please choose a page larger than 0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_ALREADY_COMPLETED \u003d \"Your reading progress (page %d) has already \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"exceeded this goal!\\nPlease choose a page at least more than your current bookmark.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private final Goal goal;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Constructor for {@code GoalCommand} object with index and goal."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param targetIndex index of book in List view."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param goal to be set for the book."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public GoalCommand(Index targetIndex, Goal goal) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        List\u003cBook\u003e allBooks \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d allBooks.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (goal.isOverdue()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DEADLINE_OVERDUE, goal.deadline));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (goal.getPageInt() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(MESSAGE_ZERO_GOAL);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookWithoutGoal \u003d allBooks.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (bookWithoutGoal.getTotalPagesNumber() \u003c goal.getPageInt()) { // If goal \u003e totalPages"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_GOAL_OVERSHOT_TOTAL_PAGES, goal.getPageInt(),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    bookWithoutGoal.getTotalPagesNumber()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (bookWithoutGoal.getPagesRead() \u003e\u003d goal.getPageInt()) { // Goal behind current progress"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_ALREADY_COMPLETED,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    bookWithoutGoal.getPagesRead()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookWithGoal \u003d Book.setGoal(bookWithoutGoal, goal);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        model.setBook(bookWithoutGoal, bookWithGoal);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_GOAL_SUCCESS, bookWithGoal.getName(), goal.toString()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                false, false, ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((GoalCommand) other).targetIndex) // same index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                \u0026\u0026 goal.equals(((GoalCommand) other).goal)); // same goal"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 90,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/GoalDelCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalDelCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goaldel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \": Delete goal previously set for the book specified by its index in book list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_NO_GOAL \u003d \"%s currently has no goal to delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Goal successfully removed for %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public GoalDelCommand(Index index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookWithGoal \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (!bookWithGoal.hasGoal()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_GOAL, bookWithGoal.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookWithoutGoal \u003d Book.setGoal(bookWithGoal, Goal.defaultGoal());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        model.setBook(bookWithGoal, bookWithoutGoal);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, bookWithGoal.getName()), false, false,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (other instanceof GoalDelCommand) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return index.equals(((GoalDelCommand) other).index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 58,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Lists all books in the library to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all books\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/RedoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.RedoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Redoes the most recent undone command. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"Usage: redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previous undone command successfully redone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_NO_UNDONE_CHANGES \u003d \"No commands available to redo\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String initialBookList \u003d model.getFilteredBookList().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.info(\"Redo initiated, initial books: \\n\" + initialBookList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            model.redo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String finalBookList \u003d model.getFilteredBookList().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.info(\"Redo success, books modified: \" + finalBookList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            ViewType newViewType \u003d VIEW_TYPE_MANAGER.getViewType(model.getCurrentState());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            VIEW_TYPE_MANAGER.setCurrentView(newViewType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, false, false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    newViewType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (RedoException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String unmodifiedBookList \u003d model.getFilteredBookList().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.info(\"Redo failed, books not modified: \" + unmodifiedBookList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new CommandException(MESSAGE_NO_UNDONE_CHANGES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 44
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.parser.Prefix;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Sorts books in bookmark based on the input prefix."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Currently supports sorting in lexicographical order for Name and Genre properties"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * and ascending order of pages read."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all books in bookmark based on the input \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"prefix and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"Parameters: ONE Prefix Specifier\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_GENRE + \"GENRE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_BOOKMARK + \"PAGES READ (BOOKMARK)]... \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"[\" + PREFIX_READING_PROGRESS + \"READING PROGRESS]... \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" g/ \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private final Comparator\u003cBook\u003e comparator;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private final Prefix inputPrefix;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param comparator The comparator to sort the book list by"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @param inputPrefix The new sorting preference prefix"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public SortCommand(Comparator\u003cBook\u003e comparator, Prefix inputPrefix) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        requireNonNull(inputPrefix);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.inputPrefix \u003d inputPrefix;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        model.setSortingPreference(inputPrefix.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        model.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                String.format(Messages.MESSAGE_BOOKS_SORTED + comparator.toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u0026\u0026 comparator.equals(((SortCommand) other).comparator)) // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u0026\u0026 inputPrefix.equals(((SortCommand) other).inputPrefix); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 64,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/UndoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.UndoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Undoes the most recent command. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"Only commands which modified, added or deleted the Books stored in the Library are considered \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"Usage: undo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Previous command successfully undone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_MOST_RECENT_CHANGE \u003d \"No commands available to undo\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String initialBookList \u003d model.getFilteredBookList().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.info(\"Undo initiated, initial books: \\n\" + initialBookList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            model.undo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String finalBookList \u003d model.getFilteredBookList().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.info(\"Undo success, books modified: \" + finalBookList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            ViewType newViewType \u003d VIEW_TYPE_MANAGER.getViewType(model.getCurrentState());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            VIEW_TYPE_MANAGER.setCurrentView(newViewType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS, false, false,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    newViewType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } catch (UndoException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            String unmodifiedBookList \u003d model.getFilteredBookList().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            logger.info(\"Undo failed, books not modified: \" + unmodifiedBookList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new CommandException(MESSAGE_MOST_RECENT_CHANGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 44
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/ViewCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": " * Allows user to view a all details of a specific book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class ViewCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \": View all details of the book identified by index number in book list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Viewing %1$d\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public final Index index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public ViewCommand(Index index) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        List\u003cBook\u003e lastShownList \u003d model.getFilteredBookList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookToView \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        model.updateFilteredBookList(b -\u003e b.equals(bookToView));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storeViewType(model.getCurrentState(), ViewType.DETAILED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                false, false, ViewType.DETAILED);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (other instanceof ViewCommand) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return index.equals(((ViewCommand) other).index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 53,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_TOO_MANY_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TOTAL_PAGES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or bookmark \u003e totalpages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENRE, PREFIX_TAG,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                        PREFIX_TOTAL_PAGES, PREFIX_BOOKMARK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENRE, PREFIX_TOTAL_PAGES)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Genre genre \u003d ParserUtil.parseGenre(argMultimap.getValue(PREFIX_GENRE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        TotalPages totalPages \u003d ParserUtil.parseTotalPages(argMultimap.getValue(PREFIX_TOTAL_PAGES).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Bookmark bookmark \u003d ParserUtil.parseBookmark(argMultimap.getValue(PREFIX_BOOKMARK));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!Bookmark.isValidBookmark(bookmark, totalPages)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new ParseException(Bookmark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!Book.isValidNumTags(tagList)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_TOO_MANY_TAGS, Book.MAX_TAG_COUNT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book book \u003d new Book(name, genre, tagList, totalPages, bookmark);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new AddCommand(book);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "pennhanlee": 21,
      "TanLeYang": 12
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/AddNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOTE_TEXT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Parses input arguments and creates a new AddNoteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class AddNoteCommandParser implements Parser\u003cAddNoteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNoteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * and returns an AddNoteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public AddNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        PREFIX_NOTE_TITLE, PREFIX_NOTE_TEXT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note note \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE_TITLE).isPresent()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    \u0026\u0026 argMultimap.getValue(PREFIX_NOTE_TEXT).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            note \u003d ParserUtil.parseNote("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    argMultimap.getValue(PREFIX_NOTE_TITLE).get(), argMultimap.getValue(PREFIX_NOTE_TEXT).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // If PREFIX_NOTE_TITLE and/or PREFIX_NOTE_TEXT is not present."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new AddNoteCommand(index, note);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 51
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Prefix PREFIX_GENRE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Prefix PREFIX_TOTAL_PAGES \u003d new Prefix(\"tp/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Prefix PREFIX_BOOKMARK \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final Prefix PREFIX_READING_PROGRESS \u003d new Prefix(\"rp/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final Prefix PREFIX_PAGE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final Prefix PREFIX_NOTE_TITLE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final Prefix PREFIX_NOTE_TEXT \u003d new Prefix(\"txt/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final Prefix PREFIX_COMPLETED \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static final Prefix PREFIX_NOT_COMPLETED \u003d new Prefix(\"nc/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns a prefix based on the input string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Prefix based on the input string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static Prefix sortingPrefixGenerator(String prefix) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Prefix result;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        switch (prefix) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        case \"n/\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            result \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        case \"g/\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            result \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        case \"b/\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            result \u003d PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        case \"rp/\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            result \u003d PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            result \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 2,
      "pangpuncake": 2,
      "-": 10,
      "TanLeYang": 4,
      "angrybunny123": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/CommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.GoalDelCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class CommandParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        case ViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new ViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        case GoalDelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new GoalDelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case AddNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return new AddNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        case DeleteNoteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            return new DeleteNoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 22,
      "pangpuncake": 7,
      "-": 62,
      "TanLeYang": 12,
      "angrybunny123": 4
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/DeleteNoteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Parses input arguments and creates a new DeleteNoteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class DeleteNoteCommandParser implements Parser\u003cDeleteNoteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final Pattern DELETE_NOTE_COMMAND_FORMAT \u003d Pattern.compile(\"^(?\u003cindex\u003e\\\\d*) (?\u003cnoteIndex\u003e\\\\d*)$\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteNoteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * and returns an DeleteNoteCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public DeleteNoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index noteIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String indexes \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final Matcher matcher \u003d DELETE_NOTE_COMMAND_FORMAT.matcher(indexes.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final String argsIndex \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final String argsNoteIndex \u003d matcher.group(\"noteIndex\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argsIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            noteIndex \u003d ParserUtil.parseIndex(argsNoteIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new DeleteNoteCommand(index, noteIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 46
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_TOO_MANY_TAGS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TOTAL_PAGES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                        PREFIX_NAME, PREFIX_GENRE, PREFIX_TAG, PREFIX_TOTAL_PAGES, PREFIX_BOOKMARK);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditCommand.EditBookDescriptor editBookDescriptor \u003d new EditCommand.EditBookDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            editBookDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENRE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            editBookDescriptor.setGenre(ParserUtil.parseGenre(argMultimap.getValue(PREFIX_GENRE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editBookDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TOTAL_PAGES).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            editBookDescriptor.setTotalPages("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    ParserUtil.parseTotalPages(argMultimap.getValue(PREFIX_TOTAL_PAGES).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BOOKMARK).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            editBookDescriptor.setBookmark("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    ParserUtil.parseBookmark(Optional.of(argMultimap.getValue(PREFIX_BOOKMARK).get())));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!editBookDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new EditCommand(index, editBookDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Set\u003cTag\u003e parsedTags \u003d ParserUtil.parseTags(tagSet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!Book.isValidNumTags(parsedTags)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_TOO_MANY_TAGS, Book.MAX_TAG_COUNT));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Optional.of(parsedTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 14,
      "-": 55,
      "TanLeYang": 23
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.BookCompletedPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.BookNotCompletedPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.GenreContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Prefix inputPrefix;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Predicate\u003cBook\u003e predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int prefixCount \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        PREFIX_NAME, PREFIX_GENRE, PREFIX_COMPLETED, PREFIX_NOT_COMPLETED, PREFIX_TAG);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENRE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPLETED).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOT_COMPLETED).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_TAG;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (prefixCount !\u003d 1) { //if more than/ less than 1 input prefix, we throw an error."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String trimmedArgs \u003d argMultimap.getValue(inputPrefix).get().trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (trimmedArgs.isEmpty() \u0026\u0026 inputPrefix !\u003d PREFIX_COMPLETED \u0026\u0026 inputPrefix !\u003d PREFIX_NOT_COMPLETED) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (!trimmedArgs.isEmpty() \u0026\u0026 (inputPrefix \u003d\u003d PREFIX_COMPLETED || inputPrefix \u003d\u003d PREFIX_NOT_COMPLETED)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        predicate \u003d predicateGenerator(inputPrefix, keywords);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new FindCommand(predicate, inputPrefix, keywords);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns a predicate based on the input prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Predicate based on input prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public Predicate\u003cBook\u003e predicateGenerator(Prefix inputPrefix, String[] keywords) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Predicate\u003cBook\u003e predicate \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (inputPrefix \u003d\u003d PREFIX_NAME) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_GENRE) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            predicate \u003d new GenreContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_COMPLETED) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            predicate \u003d new BookCompletedPredicate();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_NOT_COMPLETED) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            predicate \u003d new BookNotCompletedPredicate();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_TAG) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return predicate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "pennhanlee": 1,
      "TanLeYang": 2,
      "angrybunny123": 81
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/GoalCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_PAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalCommandParser implements Parser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public GoalCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PAGE, PREFIX_DEADLINE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // Check index"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PAGE, PREFIX_DEADLINE)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assert(arePrefixesPresent(argMultimap, PREFIX_PAGE, PREFIX_DEADLINE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal readerGoal \u003d ParserUtil.parseGoal(argMultimap.getValue(PREFIX_PAGE).get(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                                                argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new GoalCommand(index, readerGoal);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 51
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/GoalDelCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.GoalDelCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalDelCommandParser implements Parser\u003cGoalDelCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GoalDelCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * and returns a GoalDelCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public GoalDelCommand parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new GoalDelCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalDelCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 25
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parses a {@code String genre} into an {@code Genre}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static Genre parseGenre(String genre) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(genre);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String trimmedGenre \u003d genre.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!Genre.isValidGenre(trimmedGenre)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new ParseException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Genre(trimmedGenre);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Parses {@code String totalPages} into a {@code TotalPages}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static TotalPages parseTotalPages(String totalPages) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(totalPages);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String trimmedTotalPages \u003d totalPages.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!TotalPages.isValidTotalPages(trimmedTotalPages)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new ParseException(TotalPages.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        trimmedTotalPages \u003d StringUtil.trimLeadingZeroes(trimmedTotalPages);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new TotalPages(trimmedTotalPages);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Parses {@code Optional\u003cString\u003e bookmark} into a {@code Bookmark}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static Bookmark parseBookmark(Optional\u003cString\u003e bookmark) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (bookmark.isEmpty()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return new Bookmark();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            String trimmedBookmark \u003d bookmark.get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            trimmedBookmark \u003d trimmedBookmark.trim();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            if (!Bookmark.isValidBookmark(trimmedBookmark)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                throw new ParseException(Bookmark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            trimmedBookmark \u003d StringUtil.trimLeadingZeroes(trimmedBookmark);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return new Bookmark(trimmedBookmark);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Checks input, throws ParseException if any argument does not match the requirements"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Else, return a valid Goal object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param page page in goal"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param deadline deadline in goal"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return new Goal object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @throws ParseException with MESSAGE_USAGE message"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static Goal parseGoal(String page, String deadline) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(page, deadline);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String trimmedPage \u003d page.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (!Goal.isValidGoal(trimmedPage, trimmedDeadline)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Goal.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new Goal(trimmedPage, trimmedDeadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Parses {@code String title} and {@code String text} into a {@code Note}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static Note parseNote(String title, String text) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String trimmedText \u003d text.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!Note.isValidNote(trimmedTitle, trimmedText)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new Note(trimmedTitle, trimmedText);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 21,
      "pangpuncake": 16,
      "-": 78,
      "pennhanlee": 30,
      "TanLeYang": 16
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.model.book.comparators.ComparatorGenerator.comparatorGenerator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Prefix inputPrefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Comparator\u003cBook\u003e comparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int prefixCount \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                        PREFIX_NAME, PREFIX_GENRE, PREFIX_BOOKMARK, PREFIX_READING_PROGRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENRE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BOOKMARK).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (argMultimap.getValue(PREFIX_READING_PROGRESS).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            prefixCount +\u003d 1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            inputPrefix \u003d PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (prefixCount !\u003d 1) { //if more than/ less than 1 input prefix, we throw an error."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String trimmedArgs \u003d argMultimap.getValue(inputPrefix).get().trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (!trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        comparator \u003d comparatorGenerator(inputPrefix);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new SortCommand(comparator, inputPrefix);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 67
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/ViewCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class ViewCommandParser implements Parser\u003cViewCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * and returns a ViewCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public ViewCommand parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(input);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return new ViewCommand(index);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 24
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/Library.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.UniqueBookList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Wraps all data at the bookmark level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Duplicates are not allowed (by .isSameBook comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Library implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected final UniqueBookList books;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        books \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Library() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates an Library using the Books in the {@code toBeCopied}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Library(ReadOnlyLibrary toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replaces the contents of the book list with {@code books}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.books.setBooks(books);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Resets the existing data of this {@code Library} with {@code newData}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void resetData(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setBooks(newData.getBookList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Sorts the data of this {@code Library} according to the input {@code comparator}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void sortBooks(Comparator\u003cBook\u003e comparator) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        books.sortBookList(comparator);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    //// book-level operations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the library."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return books.contains(book);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the number of books stored in this {@code Library}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return books.getSize();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Adds a book to the library."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book must not already exist in the library."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        books.add(book);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replaces the given book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the library."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(editedBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        books.setBook(target, editedBook);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Removes {@code key} from this {@code Library}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code key} must exist in the library."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void removeBook(Book key) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        books.remove(key);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return books.asUnmodifiableObservableList().size() + \" books\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return books.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                || (other instanceof Library // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 books.equals(((Library) other).books));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return books.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "TanLeYang": 50,
      "angrybunny123": 8
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.State;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Predicate\u003cBook\u003e PREDICATE_SHOW_ALL_BOOKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    int MAX_BOOK_CAPACITY \u003d 100;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the user prefs\u0027 bookmark file path."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Path getBookmarkFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the user prefs\u0027 bookmark file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void setBookmarkFilePath(Path bookMarkFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Sets the user prefs\u0027 sorting preference."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void setSortingPreference(String newSortingPreference);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the user pref\u0027s sorting preference."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    String getSortingPreference();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replaces bookmark data with the data in {@code library}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void setLibrary(ReadOnlyLibrary library);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /** Returns the Library */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /** Returns the EditDistance */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    WordBank getWordBank();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if a book with the same identity as {@code book} exists in the Library."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    boolean hasBook(Book book);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if the {@code Model} is storing the maximum number of books already."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    boolean isFullCapacity();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Deletes the given book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book must exist in the library."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void deleteBook(Book target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Adds the given book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code book} must not already exist in the library."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void addBook(Book book);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replaces the given book {@code target} with {@code editedBook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the library."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void setBook(Book target, Book editedBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered book list */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    ObservableList\u003cBook\u003e getFilteredBookList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Undoes the most recent change that modified the books stored in the {@code Model}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void undo();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Redoes the most recently undone change that modified the books stored in the {@code Model}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void redo();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Save the current state of the {@code Model}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void save();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    State getCurrentState();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Updates the filter of the filtered book list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void updateFilteredBookList(Predicate\u003cBook\u003e predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Updates the comparator of the filtered book list to sort by the given {@code comparator}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void sortFilteredBookList(Comparator\u003cBook\u003e comparator);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    void sortByDefaultComparator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "pennhanlee": 3,
      "TanLeYang": 52,
      "angrybunny123": 19
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.sortingPrefixGenerator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.model.book.comparators.ComparatorGenerator.comparatorGenerator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.RedoException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.UndoException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.HistoryManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.State;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents the in-memory model of the bookmark data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Library library;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Comparator\u003cBook\u003e comparator;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final FilteredList\u003cBook\u003e filteredBooks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private final WordBank wordBank;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private HistoryManager historyManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Initializes a ModelManager with the given library and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ModelManager(ReadOnlyLibrary library, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireAllNonNull(library, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        logger.fine(\"Initializing with library: \" + library + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.library \u003d new Library(library);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.comparator \u003d comparatorGenerator(sortingPrefixGenerator(userPrefs.getSortingPreference()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.filteredBooks \u003d new FilteredList\u003c\u003e(this.library.getBookList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.wordBank \u003d new WordBank(library);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State initialState \u003d State.createState(library, userPrefs, filteredBooks.getPredicate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.historyManager \u003d new HistoryManager(initialState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this(new Library(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Path getBookmarkFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return userPrefs.getBookmarkFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBookmarkFilePath(Path bookMarkFilePath) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(bookMarkFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userPrefs.setBookmarkFilePath(bookMarkFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getSortingPreference() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return userPrefs.getSortingPreference();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void setSortingPreference(String newSortingPreference) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        requireNonNull(newSortingPreference);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        userPrefs.setSortingPreference(newSortingPreference);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setLibrary(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.library.resetData(library);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public WordBank getWordBank() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return wordBank;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return library.hasBook(book);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean isFullCapacity() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return library.getSize() \u003e\u003d Model.MAX_BOOK_CAPACITY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.removeBook(target);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.deleteFromWordBank(target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void addBook(Book book) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.addBook(book);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        sortByDefaultComparator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.addToWordBank(book);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.setBook(target, editedBook);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // to ensure the edited book doesn\u0027t leave the view"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Predicate\u003c? super Book\u003e prevPredicate \u003d filteredBooks.getPredicate() !\u003d null"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ? filteredBooks.getPredicate()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                : PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        updateFilteredBookList(b -\u003e prevPredicate.test(b) || b.equals(editedBook));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.updateWordBank(target, editedBook);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void sortByDefaultComparator() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (this.comparator !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            sortFilteredBookList(comparatorGenerator(sortingPrefixGenerator(userPrefs.getSortingPreference())));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Book List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Book} backed by the internal list of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code Library}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return filteredBooks;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        filteredBooks.setPredicate(predicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void sortFilteredBookList(Comparator\u003cBook\u003e comparator) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.library.sortBooks(comparator);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo Redo  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo() throws UndoException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyManager \u003d historyManager.undo();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newState \u003d historyManager.getCurrentState();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        resetModelData(newState);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void redo() throws RedoException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyManager \u003d historyManager.redo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newState \u003d historyManager.getCurrentState();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        resetModelData(newState);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyManager \u003d historyManager.addNewState"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                (State.createState(library, userPrefs, filteredBooks.getPredicate()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public State getCurrentState() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return historyManager.getCurrentState();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Reset the data stored in this {@code ModelManager} to that stored in the given {@code State}."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void resetModelData(State state) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.resetData(state.getLibrary());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userPrefs.resetData(state.getUserPrefs());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Predicate\u003c? super Book\u003e prevPredicate \u003d state.getPredicate() !\u003d null"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ? state.getPredicate()"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                : PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        filteredBooks.setPredicate(prevPredicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        wordBank.resetWordBank(library);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return library.equals(other.library)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 filteredBooks.equals(other.filteredBooks);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 103,
      "pennhanlee": 11,
      "TanLeYang": 110,
      "angrybunny123": 28
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/ReadOnlyLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Unmodifiable view of a Library"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public interface ReadOnlyLibrary {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns an unmodifiable view of the books list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * This list will not contain any duplicate books."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    ObservableList\u003cBook\u003e getBookList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 17
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Path getBookmarkFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    String getSortingPreference();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "TanLeYang": 3,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Path bookmarkFilePath \u003d Paths.get(\"data\" , \"library.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private String sortingPreference \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setBookmarkFilePath(newUserPrefs.getBookmarkFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        setSortingPreference(newUserPrefs.getSortingPreference());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Path getBookmarkFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return bookmarkFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBookmarkFilePath(Path bookmarkFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(bookmarkFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.bookmarkFilePath \u003d bookmarkFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getSortingPreference() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return sortingPreference;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void setSortingPreference(String newSortingPreference) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assert newSortingPreference !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.sortingPreference \u003d newSortingPreference;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u0026\u0026 bookmarkFilePath.equals(o.bookmarkFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u0026\u0026 sortingPreference.equals(o.sortingPreference);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return Objects.hash(guiSettings, bookmarkFilePath, sortingPreference);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + bookmarkFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        sb.append(\"\\nSorting Preference: \" + sortingPreference);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 1,
      "-": 77,
      "TanLeYang": 9,
      "angrybunny123": 13
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/WordBank.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.WordStore;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.exceptions.WordStoreNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordBank {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private ReadOnlyLibrary library;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private WordStore nameWordStore;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private WordStore genreWordStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private WordStore tagWordStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a WordBank object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param library library"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public WordBank(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        initWordBank(library);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Initialises a List that stores unique words"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * in preparation for Usage by the EditDistance algorithm."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void initWordBank(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.library \u003d library;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.nameWordStore \u003d new WordStore();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.genreWordStore \u003d new WordStore();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.tagWordStore \u003d new WordStore();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ObservableList\u003cBook\u003e librarylist \u003d library.getBookList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert librarylist !\u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Book book : librarylist) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            handleNewBook(book);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Deletes old words and adds new words into the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param oldBook Book Object that is deleted."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param newBook Book Object that is added."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void updateWordBank(Book oldBook, Book newBook) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        handleOldBook(oldBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        handleNewBook(newBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Adds unique words from a newly added book into"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param book book to be added"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void addToWordBank(Book book) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        handleNewBook(book);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Deletes old words of an oldbook from the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param book book to be deleted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void deleteFromWordBank(Book book) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        handleOldBook(book);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Adds words into the list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param book book to be processed"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void handleNewBook(Book book) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d book.getName().fullName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String genre \u003d book.getGenre().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d genre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d book.getTags();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        nameWordStore.addWords(nameWords);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        genreWordStore.addWords(genreWords);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        tagWordStore.addWords(tagWords);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Adds words into the list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param book book to be processed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void handleOldBook(Book book) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(book);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d book.getName().fullName;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String genre \u003d book.getGenre().value;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d genre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d book.getTags();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        nameWordStore.deleteWords(nameWords);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        genreWordStore.deleteWords(genreWords);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        tagWordStore.deleteWords(tagWords);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns a WordStore based on the type indicated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param type String"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return WordStore"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public WordStore getWordStore(String type) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assert type !\u003d null;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (type.equals(PREFIX_NAME.getPrefix())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return this.nameWordStore;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (type.equals(PREFIX_GENRE.getPrefix())) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return this.genreWordStore;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (type.equals(PREFIX_TAG.getPrefix())) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return this.tagWordStore;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new WordStoreNotFoundException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * resets WordBank object to accept a fresh library"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void resetWordBank(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.initWordBank(library);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 153
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/Book.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Book in the book list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Book {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_TAG_COUNT \u003d 10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_NOTE_COUNT \u003d 10;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Genre genre;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final TotalPages totalPages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Bookmark bookmark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private final Goal goal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final List\u003cNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Fields must be present, valid and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Book(Name name, Genre genre, Set\u003cTag\u003e tags, TotalPages totalPages, Bookmark bookmark) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireAllNonNull(name, genre, tags, totalPages, bookmark);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.totalPages \u003d totalPages;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.goal \u003d Goal.defaultGoal();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Overloaded method to create a {@code Book} with goal and notes."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Book(Name name, Genre genre, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                TotalPages totalPages, Bookmark bookmark, Goal goal, List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireAllNonNull(name, genre, tags, totalPages, bookmark, goal, notes);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.totalPages \u003d totalPages;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.notes.addAll(notes);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Static method to create {@code Book} with a non-default {@code Goal} object from an existing book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param b Existing book with default goal."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param g Goal to be set."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return a {@code Book} object with {@code Goal} g."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static Book setGoal(Book b, Goal g) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new Book(b.getName(), b.getGenre(), b.getTags(), b.getTotalPages(), b.getBookmark(), g, b.getNotes());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Checks if the given collection of tags contains a valid number of tags this {@code Book} can contain."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static boolean isValidNumTags(Collection\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return tags.size() \u003c\u003d MAX_TAG_COUNT;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Checks if the given collection of notes contains a valid number of notes this {@code Book} can contain."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static boolean isValidNumNotes(Collection\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return notes.size() \u003c\u003d MAX_NOTE_COUNT;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Genre getGenre() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return genre;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TotalPages getTotalPages() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return totalPages;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Bookmark getBookmark() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return bookmark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public List\u003cNote\u003e getNotes() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return Collections.unmodifiableList(notes);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Returns the current Goal of this book, according to its {@code Goal}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Goal getGoal() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return goal;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if both books of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * This defines a weaker notion of equality between two books."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean isSameBook(Book otherBook) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (otherBook \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return otherBook !\u003d null"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 otherBook.getGenre().equals(getGenre());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Checks if this {@code Book} has started being read based on its {@code Bookmark}\u0027s value."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean hasStartedReading() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return getPagesRead() \u003e 0;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the number of pages of this book read, according to its {@code Bookmark}\u0027s value."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public int getPagesRead() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Integer.parseInt(bookmark.value);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the total number of pages in this book, according to its {@code TotalPages}\u0027s value."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public int getTotalPagesNumber() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Integer.parseInt(totalPages.value);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns true if book is completed, i.e. if bookmarked page is equal to total pages."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return bookmark.value.equals(totalPages.value);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Returns true if user has set a goal for this book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean hasGoal() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        int pageGoal \u003d Integer.parseInt(goal.getPage());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return pageGoal \u003e 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Checks if a reader has already completed his/her {@code Goal}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return true if current ."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean goalCompleted() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return hasGoal() \u0026\u0026 goal.getPageInt() \u003c\u003d getPagesRead();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Checks if a {@code Book}\u0027s {@code Goal} object is overdue but not completed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return true if a goal is already overdue but not completed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean goalOverdue() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return goal.isOverdue() \u0026\u0026 !goalCompleted() \u0026\u0026 hasGoal();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Checks if a {@code Goal} object is in progress and not overdue."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return true if a goal is not overdue and not completed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean goalInProgress() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return !goal.isOverdue() \u0026\u0026 !goalCompleted() \u0026\u0026 hasGoal();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if this {@code Book} contains at least one {@code Note}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean hasNotes() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return notes.size() \u003e 0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Returns true if the exact same note is present in the note list of the book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public boolean containsNote(Note note) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        for (Note n : this.notes) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            if (n.equals(note)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if both books have the same identity and data fields."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * This defines a stronger notion of equality between two books."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!(other instanceof Book)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book otherBook \u003d (Book) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return otherBook.getName().equals(getName())"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 otherBook.getGenre().equals(getGenre())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 otherBook.getTags().equals(getTags())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 otherBook.getTotalPages().equals(getTotalPages())"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                \u0026\u0026 otherBook.getBookmark().equals(getBookmark())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                \u0026\u0026 otherBook.getNotes().equals(getNotes());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Objects.hash(name, genre, tags);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String bookmarkPage \u003d Optional.ofNullable(bookmark)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .map(Bookmark::toString)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .orElse(\"No bookmark for this book\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .append(\" Genre: \")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .append(getGenre())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .append(\" Total Pages: \")"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .append(getTotalPages())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .append(\" Bookmarked at: \")"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .append(bookmarkPage)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                .append(\"\\n\")"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\"Tags: \");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        builder.append(\" Goal: \")"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                .append(getGoal().toString())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                .append(\" Notes: \");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        getNotes().forEach(note -\u003e builder.append(\"[\" + note.title + \"]\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 67,
      "pangpuncake": 26,
      "-": 68,
      "pennhanlee": 2,
      "TanLeYang": 98,
      "angrybunny123": 7
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/Bookmark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Book\u0027s bookmark."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBookmark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Bookmark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \"bookmark should only contain numeric characters, it should not be blank, and its numerical value should \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    + \"be less than or equals to the total number of pages in the book it is in.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Only 1 to 9 number of digits from 0-9 allowed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"{1,\" + TotalPages.MAX_TOTAL_PAGES_LENGTH + \"}$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructs a default {@code Bookmark} at page 0."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Bookmark() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.value \u003d \"0\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructs an {@code Bookmark}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param bookmarkedPage A valid page string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Bookmark(String bookmarkedPage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireAllNonNull(bookmarkedPage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        checkArgument(isValidBookmark(bookmarkedPage), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.value \u003d bookmarkedPage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns if a given string forms a valid bookmark."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param bookmarkedPage String representing the bookmark page"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return true iff bookmarkPage String is valid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static boolean isValidBookmark(String bookmarkedPage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!bookmarkedPage.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int bookmarkInt \u003d Integer.parseInt(bookmarkedPage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return bookmarkInt \u003e\u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns if a given {@code Bookmark} is valid for a given {@code TotalPages}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param bookmark bookmarked page"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param totalPages the total number of pages in the Book which the bookmark will be placed in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @return true iff bookmarked page is less than equals to total pages"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static boolean isValidBookmark(Bookmark bookmark, TotalPages totalPages) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int bookmarkPage \u003d Integer.parseInt(bookmark.value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int totalPage \u003d Integer.parseInt(totalPages.value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return bookmarkPage \u003c\u003d totalPage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                || (other instanceof Bookmark // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 value.equals(((Bookmark) other).value)); // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 18,
      "TanLeYang": 64
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/Genre.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Book\u0027s genre."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGenre(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class Genre {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_GENRE_LENGTH \u003d 60;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \"Genre should only contain alphanumeric characters and spaces, and it should not be blank. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + String.format(\"Maximum of %d characters allowed, including spaces.\", MAX_GENRE_LENGTH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The first character of the genre must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input. Max of 60 characters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"{0,\" + (MAX_GENRE_LENGTH - 1) + \"}$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructs an {@code Genre}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param genre A valid genre string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Genre(String genre) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(genre);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        checkArgument(isValidGenre(genre), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        value \u003d genre;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns if a given string is a valid genre."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static boolean isValidGenre(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                || (other instanceof Genre // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 value.toLowerCase().equals(((Genre) other).value.toLowerCase())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 1,
      "TanLeYang": 61
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/Goal.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class Goal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            \"Page should only contain numeric characters,\\n \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    + \"Deadline format is DD-MM-YYYY\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                    + \"both page and deadline should not be empty\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String UI_COMPLETED \u003d \" (Completed!)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String UI_OVERDUE \u003d \" (Overdue!)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String UI_IN_PROGRESS \u003d \" (In Progress!)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal must be in the format: [page] [deadline]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Deadline must be specified as dd-mm-yyyy"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Both fields must not be empty."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String DEADLINE_REGEX \u003d \"\\\\d{2}-\\\\d{2}-\\\\d{4}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String DEFAULT_GOAL_STRING \u003d \"0 31-12-9999\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String PAGE_REGEX \u003d \"^\\\\d+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public final String page;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public final String deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Construct a {@code Goal}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Goal(String page, String deadline) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(page, deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.page \u003d page;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Overloaded constructor to construct {@code Goal} object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public Goal(String goal) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(goal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String[] parts \u003d goal.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.page \u003d parts[0];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.deadline \u003d parts[1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static Goal defaultGoal() { // constructor for default goal"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new Goal(\"0\", \"31-12-9999\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String getPage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return page;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public int getPageInt() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return Integer.parseInt(page);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Checks if a {@code Goal} object is overdue compared to today\u0027s date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return true if a goal is already overdue."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean isOverdue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return parseDeadline(deadline).isBefore(now);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Returns if a given string is a valid genre."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static boolean isValidGoal(String page, String deadline) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return page.matches(PAGE_REGEX) \u0026\u0026 isValidDeadline(deadline);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (other instanceof Goal) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String otherPage \u003d ((Goal) other).page;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String otherDeadline \u003d ((Goal) other).deadline;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return deadline.equals(otherDeadline) \u0026\u0026 page.equals(otherPage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * Returns true if deadline has the correct format and valid date and time"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @param deadline string deadline provided"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static boolean isValidDeadline(String deadline) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (!deadline.matches(DEADLINE_REGEX)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                parseDeadline(deadline);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static LocalDate parseDeadline(String deadline) throws DateTimeParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String[] parts \u003d deadline.split(\"-\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String day \u003d parts[0];"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String month \u003d parts[1];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String year \u003d parts[2];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String deadlineLocalDateFormat \u003d String.format(\"%s-%s-%s\", year, month, day);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return LocalDate.parse(deadlineLocalDateFormat);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static String getDateDescription(String deadline) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        DateTimeFormatter oldFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\", new Locale(\"en\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        LocalDate date \u003d parseDeadline(deadline);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return date.format(oldFormat);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (this.equals(Goal.defaultGoal())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return \"Currently no goal\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"Finish page %s before %s\", page, getDateDescription(deadline));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return String.format(\"%s %s\", page, deadline).hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 145
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Book\u0027s name in the library."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_NAME_LENGTH \u003d 120;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank. \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + String.format(\"Maximum of %d characters allowed, including spaces.\", MAX_NAME_LENGTH);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * MAX_NAME_LENGTH - 1 to accomodate the 0."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[^ ].{0,\" + (MAX_NAME_LENGTH - 1) + \"}$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 fullName.toLowerCase().equals(((Name) other).fullName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "pennhanlee": 3,
      "TanLeYang": 8
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/Note.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            \"Note title and text should not start with a whitespace.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            + \"Note title should have 1 to 120 characters. Note text should have 1 to 1000 characters.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * The first character of the note must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String TITLE_VALIDATION_REGEX \u003d \"^[^ ].{0,120}$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String TEXT_VALIDATION_REGEX \u003d \"^[^ ].{0,1000}$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public final String text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Constructs an {@code Note}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param title A valid title string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @param text A valid text string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Note(String title, String text) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assert (title !\u003d null \u0026\u0026 text !\u003d null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        requireNonNull(text);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        checkArgument(isValidNote(title, text), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Returns if a given title and text string is a valid note."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static boolean isValidNote(String title, String text) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return title.matches(TITLE_VALIDATION_REGEX) \u0026\u0026 text.matches(TEXT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return title + \":\" + text;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                       || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                   \u0026\u0026 text.equals(((Note) other).text)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                   \u0026\u0026 title.equals(((Note) other).title)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return (title + text).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 59
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/TotalPages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents the total number of pages in a Book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTotalPages(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TotalPages {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_TOTAL_PAGES_LENGTH \u003d 9;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \"Total pages should only contain numeric characters, it should not be blank \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    + \"and its numerical value should be greater than 0. \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    + String.format(\"Maximum of %d digits allowed.\", MAX_TOTAL_PAGES_LENGTH);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Only 1 to 9 number of digits from 0-9 allowed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^\\\\d\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + \"{1,\" + MAX_TOTAL_PAGES_LENGTH + \"}$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructs an {@code TotalPages}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param totalPages A valid total pages string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public TotalPages(String totalPages) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(totalPages);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        checkArgument(isValidTotalPages(totalPages), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        value \u003d totalPages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns if a given string is a valid total pages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static boolean isValidTotalPages(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 Integer.parseInt(test) \u003e 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                || (other instanceof TotalPages // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 value.equals(((TotalPages) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 61
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/UniqueBookList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A list of books that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A book is considered unique by comparing using {@code Book#isSameBook(Book)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * books uses Book#isSameBook(Book) for equality so as to ensure that the book being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * unique in terms of identity in the UniqueBookList. However, the removal of a book uses Book#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * as to ensure that the book with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * @see Book#isSameBook(Book)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class UniqueBookList implements Iterable\u003cBook\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ObservableList\u003cBook\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if the list contains an equivalent book as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean contains(Book toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Adds a book to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void add(Book toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replaces the book {@code target} in the list with {@code editedBook}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book identity of {@code editedBook} must not be the same as another existing book in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireAllNonNull(target, editedBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!target.isSameBook(editedBook) \u0026\u0026 contains(editedBook)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        internalList.set(index, editedBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Removes the equivalent book from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * The book must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void remove(Book toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new BookNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks(UniqueBookList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Replaces the contents of this list with {@code books}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code books} must not contain duplicate books."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireAllNonNull(books);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!booksAreUnique(books)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new DuplicateBookException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        internalList.setAll(books);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Sorts the book list according to the input {@code comparator}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void sortBookList(Comparator\u003cBook\u003e comparator) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FXCollections.sort(internalList, comparator);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ObservableList\u003cBook\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Iterator\u003cBook\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                || (other instanceof UniqueBookList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueBookList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns true if {@code books} contains only unique books."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean booksAreUnique(List\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c books.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c books.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                if (books.get(i).isSameBook(books.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 88,
      "TanLeYang": 53,
      "angrybunny123": 8
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/comparators/BookGenreComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Sorts {@code Book}s based on {@code Genre} in lexicographical order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class BookGenreComparator implements Comparator\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int compare(Book b1, Book b2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String b1genre \u003d b1.getGenre().toString().toLowerCase();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String b2genre \u003d b2.getGenre().toString().toLowerCase();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return b1genre.compareTo(b2genre);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof BookGenreComparator); // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"Genre\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/comparators/BookNameComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Sorts {@code Book}s based on {@code Name} in lexicographical order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class BookNameComparator implements Comparator\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int compare(Book b1, Book b2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String b1name \u003d b1.getName().toString().toLowerCase();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String b2name \u003d b2.getName().toString().toLowerCase();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return b1name.compareTo(b2name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof BookNameComparator); // instanceof handles nulls"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"Name\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/comparators/BookPagesReadComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Sorts {@code Book}s based on {@code PagesRead} in ascending order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class BookPagesReadComparator implements Comparator\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int compare(Book b1, Book b2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int b1PagesRead \u003d b1.getPagesRead();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        int b2PagesRead \u003d b2.getPagesRead();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return Integer.compare(b1PagesRead, b2PagesRead);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof BookPagesReadComparator); // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"Pages Read (Bookmark)\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 31
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/comparators/BookReadingProgressComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Sorts {@code Book}s based on {@code ReadingProgress} in ascending order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class BookReadingProgressComparator implements Comparator\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public int compare(Book b1, Book b2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        float b1PagesRead \u003d b1.getPagesRead();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        float b1TotalPages \u003d b1.getTotalPagesNumber();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        float b1ReadingProgress \u003d b1PagesRead / b1TotalPages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        float b2PagesRead \u003d b2.getPagesRead();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        float b2TotalPages \u003d b2.getTotalPagesNumber();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        float b2ReadingProgress \u003d b2PagesRead / b2TotalPages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return Float.compare(b1ReadingProgress, b2ReadingProgress);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof BookReadingProgressComparator); // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return \"Reading Progress\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 36
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/comparators/ComparatorGenerator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.parser.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class ComparatorGenerator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns a comparator based on the input prefix"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Comparator based on input prefix"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public static Comparator\u003cBook\u003e comparatorGenerator(Prefix inputPrefix) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Comparator\u003cBook\u003e comparator \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        if (inputPrefix \u003d\u003d PREFIX_NAME) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            comparator \u003d new BookNameComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_GENRE) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            comparator \u003d new BookGenreComparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_BOOKMARK) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            comparator \u003d new BookPagesReadComparator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        } else if (inputPrefix \u003d\u003d PREFIX_READING_PROGRESS) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            comparator \u003d new BookReadingProgressComparator();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return comparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 31
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/exceptions/BookNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/exceptions/DuplicateBookException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Signals that the operation will result in duplicate Books (Books are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DuplicateBookException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DuplicateBookException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(\"Operation would result in duplicate books\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 11
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/predicates/BookCompletedPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class BookCompletedPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return book.isCompleted();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof BookCompletedPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 22
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/predicates/BookNotCompletedPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class BookNotCompletedPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return !book.isCompleted();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof BookNotCompletedPredicate); // instanceof handles nulls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 22
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/predicates/GenreContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Genre} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class GenreContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public GenreContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getGenre().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof GenreContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u0026\u0026 keywords.equals(((GenreContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 32
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/predicates/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(book.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "angrybunny123": 2,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/book/predicates/TagContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.model.book.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Tests that a {@code Book}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cBook\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean test(Book book) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        Set\u003cTag\u003e bookTags \u003d book.getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String tagsString \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        for (Tag tag : bookTags) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            tagsString \u003d tagsString + tag.getTagName() + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String finalTagsString \u003d tagsString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(finalTagsString, keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 40
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/exceptions/RedoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Thrown when redo command is given but there is nothing to redo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class RedoException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/exceptions/UndoException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Thrown when undo command is given but there is nothing to undo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class UndoException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/history/HistoryManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayDeque;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.RedoException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.UndoException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents the history of a Library."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Guarantees: Immutable"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class HistoryManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_UNDO_COUNT \u003d 10;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final State currentState;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ArrayDeque\u003cState\u003e undoDeque;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ArrayDeque\u003cState\u003e redoDeque;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Initializes a new {@code HistoryManager} with the given {@code State} as the initial state."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public HistoryManager(State currentState) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.currentState \u003d currentState;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.undoDeque \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.redoDeque \u003d new ArrayDeque\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Private constructor to facilitate the immutable nature of {@code HistoryManager}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private HistoryManager(State currentState, ArrayDeque\u003cState\u003e undoDeque,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            ArrayDeque\u003cState\u003e redoDeque) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.currentState \u003d currentState;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.undoDeque \u003d undoDeque;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.redoDeque \u003d redoDeque;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public State getCurrentState() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.currentState;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets a {@code ReadOnlyLibrary} as the currentState, adding the previous currentState to the undoDeque and"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * clearing the redoDeque."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public HistoryManager addNewState(State state) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        addToUndo(currentState);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        redoDeque.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new HistoryManager(state, new ArrayDeque\u003c\u003e(undoDeque), new ArrayDeque\u003c\u003e(redoDeque));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Undoes the currentState, adding it to the redoDeque and sets the top of the undoDeque as the currentState."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public HistoryManager undo() throws UndoException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new UndoException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        redoDeque.push(currentState);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newCurrentState \u003d undoDeque.pop();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new HistoryManager(newCurrentState, new ArrayDeque\u003c\u003e(undoDeque), new ArrayDeque\u003c\u003e(redoDeque));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Redoes the state at the top of the redoDeque, adding the currentState back into the top of the undoDeque."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public HistoryManager redo() throws RedoException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new RedoException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newCurrentState \u003d redoDeque.pop();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        addToUndo(currentState);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new HistoryManager(newCurrentState, new ArrayDeque\u003c\u003e(undoDeque), new ArrayDeque\u003c\u003e(redoDeque));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean canUndo() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return undoDeque.size() \u003e 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean canRedo() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return redoDeque.size() \u003e 0;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Add a state to the undo deque, removes the oldest states to make space if necessary."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void addToUndo(State state) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        while (undoDeque.size() \u003e\u003d MAX_UNDO_COUNT) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            undoDeque.removeFirst();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        undoDeque.push(state);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assert(undoDeque.size() \u003c\u003d MAX_UNDO_COUNT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof HistoryManager) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            HistoryManager otherHistory \u003d (HistoryManager) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return currentState.equals(otherHistory.currentState)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u0026\u0026 compareHistory(otherHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Helper method to compare the undoDeque and redoDeque as {@code equals()} is not overridden in java\u0027s ArrayDeque."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean compareHistory(HistoryManager otherHistory) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        boolean undoEquals \u003d new ArrayList\u003c\u003e(undoDeque).equals(new ArrayList\u003c\u003e(otherHistory.undoDeque));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        boolean redoEquals \u003d new ArrayList\u003c\u003e(redoDeque).equals(new ArrayList\u003c\u003e(otherHistory.redoDeque));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return undoEquals \u0026\u0026 redoEquals;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 117
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/history/State.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents the state of the {@code Model}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class State {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ReadOnlyLibrary library;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ReadOnlyUserPrefs userPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /** {@code Predicate} to be applied to the {@code Book} stored in the {@code ReadOnlyLibrary} */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Predicate\u003c? super Book\u003e filterPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructs a {@code State} with the given {@code ReadOnlyLibrary}, {@code ReadOnlyUserPrefs} and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code Predicate}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected State(ReadOnlyLibrary library, ReadOnlyUserPrefs userPrefs, Predicate\u003c? super Book\u003e filterPredicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.library \u003d library;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.filterPredicate \u003d filterPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Static method to create a {@code State} with the given {@code ReadOnlyLibrary}, {@code ReadOnlyUserPrefs} and"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code Predicate}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Create and uses copies of the arguments provided."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static State createState(ReadOnlyLibrary library, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                                    Predicate\u003c? super Book\u003e filterPredicate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ReadOnlyLibrary copiedLibrary \u003d new Library(library);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ReadOnlyUserPrefs copiedUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new State(copiedLibrary, copiedUserPrefs, filterPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the {@code ReadOnlyLibrary} stored in this {@code State}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.library;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the {@code ReadOnlyUserPrefs} stored in this {@code State}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns the {@code Predicate} used stored in this {@code State}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Predicate\u003c? super Book\u003e getPredicate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this.filterPredicate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else if (other instanceof State) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            State otherState \u003d (State) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.library.equals(otherState.library)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u0026\u0026 this.userPrefs.equals(otherState.userPrefs)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u0026\u0026 this.filterPredicate.equals(otherState.filterPredicate)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u0026\u0026 this.comparePredicate(otherState.filterPredicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns whether a given predicate and the current predicate are considered equal when applied on the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * same list of books."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean comparePredicate(Predicate\u003c? super Book\u003e otherPredicate) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cBook\u003e books \u003d library.getBookList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (Book book : books) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (this.filterPredicate.test(book) !\u003d otherPredicate.test(book)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 93
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a Tag in the library."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final int MAX_TAG_LENGTH \u003d 25;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric. \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            + String.format(\"Maximum of %d characters allowed.\", MAX_TAG_LENGTH);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + \"{0,\" + (MAX_TAG_LENGTH - 1) + \"}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Returns the Tag Name in String"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * @return Tag Name"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "pennhanlee": 2,
      "TanLeYang": 6,
      "angrybunny123": 8
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Contains utility methods for populating {@code Library} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static Book[] getSampleBooks() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new Book[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Book(new Name(\"MIPS Book\"), new Genre(\"Educational\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                getTagSet(\"Good\"), new TotalPages(\"500\"), new Bookmark(\"50\")),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Book(new Name(\"Algorithms\"), new Genre(\"Educational\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                getTagSet(\"Bad\", \"Lengthy\"), new TotalPages(\"5050\"), new Bookmark()),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Book(new Name(\"Barney\"), new Genre(\"Children\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                getTagSet(\"Funny\"), new TotalPages(\"25\"), new Bookmark(\"5\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Book(new Name(\"The Book\"), new Genre(\"Fiction\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                getTagSet(\"Lame\"), new TotalPages(\"333\"), new Bookmark()),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Book(new Name(\"The Bible\"), new Genre(\"Religion\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                getTagSet(\"Holy\"), new TotalPages(\"10000\"), new Bookmark(\"25\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new Book(new Name(\"The Girl with the Dragon Tatoo\"), new Genre(\"Novel\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                getTagSet(\"Classic\"), new TotalPages(\"1500\"), new Bookmark(\"222\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static ReadOnlyLibrary getSampleLibrary() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library sampleLibrary \u003d new Library();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        for (Book sampleBook : getSampleBooks()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            sampleLibrary.addBook(sampleBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return sampleLibrary;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Returns a list containing notes with the same title and text provided by the list of strings given."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static List\u003cNote\u003e getNoteList(String... strings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                       .map(string -\u003e new Note(string, string))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                       .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 14,
      "-": 25,
      "TanLeYang": 26
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/wordstore/Word.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class Word {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final int STARTING_COUNT \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private String word;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private int count;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private int distance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a word object with default field"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Word(String word) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.count \u003d STARTING_COUNT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.distance \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Create a word object with a set Distance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Word(String word, int distance) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.word \u003d word;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.count \u003d STARTING_COUNT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.distance \u003d distance;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the word"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String getWord() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.word;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the count of the word"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return count"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public int getCount() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.count;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Increases the count by 1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void addCount() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.count++;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Decrease the count by 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void minusCount() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.count--;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the distance of a word"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return int"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public int getDistance() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.distance;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Sets the distance of a word"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param distance int"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void setDistance(int distance) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.distance \u003d distance;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns true if both words have the same {@code String word}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * This defines a weaker notion of equality between two words."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public boolean isSameWord(Word otherWord) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (otherWord \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return otherWord !\u003d null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 otherWord.getWord().equals(this.getWord());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!(other instanceof Word)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word otherWord \u003d (Word) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return otherWord.getWord().equals(this.getWord())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 otherWord.getCount() \u003d\u003d this.getCount()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u0026\u0026 otherWord.getDistance() \u003d\u003d this.getDistance();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return Objects.hash(this.word, this.count, this.distance);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return \"Word: \" + this.word + \", Count: \" + this.count + \", Distance: \" + this.distance;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 118
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/wordstore/WordComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordComparator implements Comparator\u003cWord\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public int compare(Word firstWord, Word secondWord) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int firstWordDistance \u003d firstWord.getDistance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int secondWordDistance \u003d secondWord.getDistance();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (firstWordDistance \u003c secondWordDistance) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else if (firstWordDistance \u003e secondWordDistance) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return firstWord.getWord().charAt(0) \u003c secondWord.getWord().charAt(0) ? -1 : 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 20
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/wordstore/WordStore.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.exceptions.WordNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordStore {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private HashMap\u003cString, Word\u003e wordStore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a WordStore object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public WordStore() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.wordStore \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns true if the list contains an String which matches a word in the wordStore"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public boolean contains(String toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return wordStore.containsKey(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Adds words from a given list into the Store"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param words list of words to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void addWords(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assert word !\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            wordAdder(word);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Deletes words from a given list out of the Store"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param words list of words to be deleted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void deleteWords(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String word : words) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            wordDeleter(word);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Processes the provided word into wordStore by either creating a new Word or incrementing the count based on"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * whether the word already exists"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param targetWord word to be added"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void wordAdder(String targetWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(targetWord);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        boolean added \u003d contains(targetWord);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (added) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWordObj \u003d wordStore.get(targetWord);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assert targetWordObj !\u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            targetWordObj.addCount();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word newWord \u003d new Word(targetWord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            this.addWord(newWord);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Processes the provided word out of wordStore by either removing the word or minusing the count based on"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * whether the word count \u003e 1"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * If there are no words found, the deletion is ignored"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param targetWord word to be deleted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void wordDeleter(String targetWord) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        requireNonNull(targetWord);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word targetWordObj \u003d wordStore.get(targetWord);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (targetWordObj \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new WordNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (targetWordObj.getCount() \u003d\u003d 1) { //only got 1 instance which is the deleted book"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            this.deleteWord(targetWordObj);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            targetWordObj.minusCount();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the wordStore"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return wordStore"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HashMap\u003cString, Word\u003e getWordStore() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.wordStore;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns the Word object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return Word"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Word getWord(String word) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return this.wordStore.get(word);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private void addWord(Word word) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.wordStore.put(word.getWord(), word);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private void deleteWord(Word word) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.wordStore.remove(word.getWord(), word);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 113
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/wordstore/exceptions/WordNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * Signals that the operation is unable to find the specified book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/model/wordstore/exceptions/WordStoreNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordStoreNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/JsonAdaptedBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Jackson-friendly version of {@link Book}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class JsonAdaptedBook {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Book\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String genre;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String totalPages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final String bookmark;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private final String goal;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final List\u003cJsonAdaptedNote\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Constructs a {@code JsonAdaptedBook} with the given book details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public JsonAdaptedBook(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                           @JsonProperty(\"genre\") String genre,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                           @JsonProperty(\"totalPages\") String totalPages,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                           @JsonProperty(\"bookmark\") String bookmark,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                           @JsonProperty(\"goal\") String goal,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                           @JsonProperty(\"notes\") List\u003cJsonAdaptedNote\u003e notes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.genre \u003d genre;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.totalPages \u003d totalPages;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.bookmark \u003d bookmark;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        this.goal \u003d goal !\u003d null ? goal"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                                 : Goal.DEFAULT_GOAL_STRING;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (notes !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            this.notes.addAll(notes);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Converts a given {@code Book} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public JsonAdaptedBook(Book source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        genre \u003d source.getGenre().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        totalPages \u003d source.getTotalPages().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookmark \u003d source.getBookmark().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        goal \u003d String.format(\"%s %s\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                source.getGoal().page, source.getGoal().deadline);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        notes.addAll(source.getNotes().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .map(note -\u003e new JsonAdaptedNote(note.title, note.text))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Converts this Jackson-friendly adapted book object into the model\u0027s {@code Book} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Book toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final List\u003cTag\u003e bookTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (genre \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Genre.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!Genre.isValidGenre(genre)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new IllegalValueException(Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final Genre modelGenre \u003d new Genre(genre);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(bookTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (totalPages \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    TotalPages.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!TotalPages.isValidTotalPages(totalPages)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new IllegalValueException(TotalPages.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final TotalPages modelTotalPages \u003d new TotalPages(totalPages);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (bookmark \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    Bookmark.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final Bookmark modelBookmark \u003d new Bookmark(bookmark);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        if (!Bookmark.isValidBookmark(modelBookmark, modelTotalPages)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            throw new IllegalValueException(Bookmark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        final Goal modelGoal \u003d new Goal(goal);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final List\u003cNote\u003e bookNotes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        for (JsonAdaptedNote note : notes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            bookNotes.add(note.toModelType());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final List\u003cNote\u003e modelNotes \u003d new ArrayList\u003c\u003e(bookNotes);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new Book(modelName, modelGenre, modelTags, modelTotalPages, modelBookmark, modelGoal, modelNotes);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 28,
      "pangpuncake": 17,
      "-": 46,
      "pennhanlee": 3,
      "TanLeYang": 45,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/JsonAdaptedNote.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Jackson-friendly version of {@link Note}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "class JsonAdaptedNote {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private final String text;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Constructs a {@code JsonAdaptedNote} with the given {@code title} and {@code text}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public JsonAdaptedNote(@JsonProperty(\"title\") String title, @JsonProperty(\"text\") String text) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Converts a given {@code Note} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public JsonAdaptedNote(Note source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        title \u003d source.title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        text \u003d source.text;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Converts this Jackson-friendly adapted note object into the model\u0027s {@code Note} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the note."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public Note toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        if (!Note.isValidNote(title, text)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return new Note(title, text);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 46
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/JsonLibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class JsonLibraryStorage implements LibraryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLibraryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public JsonLibraryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return readLibrary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Similar to {@link #readLibrary()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Optional\u003cJsonSerializableLibrary\u003e jsonLibrary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                filePath, JsonSerializableLibrary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!jsonLibrary.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return Optional.of(jsonLibrary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Similar to {@link #saveLibrary(ReadOnlyLibrary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLibrary(library), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 55,
      "TanLeYang": 25
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/JsonSerializableLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * An Immutable Library that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "@JsonRootName(value \u003d \"bookmark\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "class JsonSerializableLibrary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_BOOKS \u003d \"book list contains duplicate book(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final List\u003cJsonAdaptedBook\u003e books \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructs a {@code JsonSerializableLibrary} with the given books."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public JsonSerializableLibrary(@JsonProperty(\"books\") List\u003cJsonAdaptedBook\u003e books) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.books.addAll(books);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Converts a given {@code ReadOnlyLibrary} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLibrary}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public JsonSerializableLibrary(ReadOnlyLibrary source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        books.addAll(source.getBookList().stream().map(JsonAdaptedBook::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Converts this library into the model\u0027s {@code Library} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Library toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (JsonAdaptedBook jsonAdaptedBook : books) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Book book \u003d jsonAdaptedBook.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (library.hasBook(book)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_BOOKS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            library.addBook(book);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "TanLeYang": 26
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/LibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a storage for {@link Library}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public interface LibraryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns Library data as a {@link ReadOnlyLibrary}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @see #getLibraryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Saves the given {@link ReadOnlyLibrary} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @param library cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @see #saveLibrary(ReadOnlyLibrary)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "TanLeYang": 16
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public interface Storage extends LibraryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "TanLeYang": 9
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Manages storage of Library data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private LibraryStorage libraryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code libraryStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public StorageManager(LibraryStorage libraryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.libraryStorage \u003d libraryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return libraryStorage.getLibraryFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return readLibrary(libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return libraryStorage.readLibrary(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        saveLibrary(library, libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        libraryStorage.saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "TanLeYang": 22
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Represents a storage for {@link seedu.bookmark.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Saves the given {@link seedu.bookmark.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "TanLeYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/BookCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * An UI component that displays information of a {@code Book}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected static final String BOOKMARK_ICON_PATH \u003d \"/images/bookmark.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected static final String NO_BOOKMARK_ICON_PATH \u003d \"/images/no_bookmark.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String FXML \u003d \"BookCard.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String COMPLETED_STYLE \u003d \"-fx-text-fill: lime\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String DEFAULT_STYLE \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String IN_PROGRESS_STYLE \u003d \"-fx-text-fill: gold\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String OVERDUE_STYLE \u003d \"-fx-text-fill: red\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public final Book book;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected HBox cardPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label genre;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label totalPages;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label bookmark;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected FlowPane tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected ImageView bookmarkIcon;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label noteLabel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected FlowPane notes;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    protected Label goal;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code BookCard} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        initialize(book, displayedIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Work around for subclasses to specify their own fxml file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookCard(Book book, String fxml) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.book \u003d book;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected void initialize(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setCompulsoryFields(book);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setBookmark(book);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setTags(book);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        setNotes(book);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        goal.setText(determineGoalText(book));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        goal.setStyle(determineGoalStyle(book));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void setCompulsoryFields(Book book) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        name.setText(book.getName().fullName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        name.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        genre.setText(book.getGenre().value);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        totalPages.setText(book.getTotalPages().value + \" pages\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void setBookmark(Book book) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (book.hasStartedReading()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookmark.setText(\"Bookmarked @ page \" + book.getBookmark().value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Image image \u003d new Image(MainApp.class.getResourceAsStream(BOOKMARK_ICON_PATH));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookmarkIcon.setImage(image);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookmark.setText(\"No bookmark for this book yet\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            Image image \u003d new Image(MainApp.class.getResourceAsStream(NO_BOOKMARK_ICON_PATH));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookmarkIcon.setImage(image);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void setTags(Book book) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        book.getTags().stream()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void setNotes(Book book) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (book.hasNotes()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            noteLabel.setText(\"Notes:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            book.getNotes()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    .forEach(note -\u003e notes.getChildren().add(new Label(note.title)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            noteLabel.setText(\"Notes: No notes added\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    protected String determineGoalStyle(Book book) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (book.goalCompleted()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return COMPLETED_STYLE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (book.goalInProgress()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return IN_PROGRESS_STYLE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (book.goalOverdue()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return OVERDUE_STYLE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else { // No goal"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            return DEFAULT_STYLE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    protected String determineGoalText(Book book) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String goalText \u003d String.format(\"Goal: %s\", book.getGoal().toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        if (book.goalCompleted()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            goalText +\u003d Goal.UI_COMPLETED;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (book.goalOverdue()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            goalText +\u003d Goal.UI_OVERDUE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        } else if (book.goalInProgress()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            goalText +\u003d Goal.UI_IN_PROGRESS;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return goalText;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!(other instanceof BookCard)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        BookCard card \u003d (BookCard) other;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u0026\u0026 book.equals(card.book);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 32,
      "-": 50,
      "TanLeYang": 85
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/BookListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Panel containing the list of books."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String FXML \u003d \"BookListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected ListView\u003cBook\u003e bookListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BookListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code BookListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListView.setCellFactory(lv -\u003e new BookListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Constructor for subclasses to specify their own fxml file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookListPanel(String fxmlPath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(fxmlPath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code BookCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    class BookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                setGraphic(new BookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "TanLeYang": 27
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         * @see seedu.bookmark.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/DetailedBookCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * An UI component that displays more detailed information of a {@code Book}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DetailedBookCard extends BookCard {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String FXML \u003d \"DetailedBookCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label percentageCompletion;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Label goal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private VBox notesContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label noteHeading;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code DetailedBookCard} with the given {@code Book} and index to display."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DetailedBookCard(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(book, FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        initialize(book, displayedIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected void initialize(Book book, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super.initialize(book, displayedIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int percentageCompleted \u003d calculateCompletion(book);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String progressDisplay \u003d \"Progress: \" + String.valueOf(percentageCompleted) + \"%\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        percentageCompletion.setText(progressDisplay);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        showNotes(book.getNotes());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private int calculateCompletion(Book book) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        float pagesRead \u003d book.getPagesRead();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        float totalPages \u003d book.getTotalPagesNumber();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return (int) ((pagesRead / totalPages) * 100);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void showNotes(List\u003cNote\u003e notes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (notes.size() \u003e 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            noteHeading.setText(\"Notes:\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            noteHeading.setText(\"Notes: This book has no notes!\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        IntStream.rangeClosed(1, notes.size())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .mapToObj(i -\u003e new NoteCard(notes.get(i - 1), i))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .forEach(note -\u003e notesContainer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        .getChildren()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        .add(note.getRoot()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 4,
      "TanLeYang": 62
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/DetailedBookListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Panel that shows detailed information about the books."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class DetailedBookListPanel extends BookListPanel {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String FXML \u003d \"DetailedBookListPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private ListView\u003cNote\u003e bookNotesListView;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label notesHeading;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code DetailedBookListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public DetailedBookListPanel(ObservableList\u003cBook\u003e bookList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assert(bookList.size() \u003c\u003d 1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListView.setItems(bookList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListView.setCellFactory(lv -\u003e new DetailedBookListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Book} using a {@code DetailedBookCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    class DetailedBookListViewCell extends ListCell\u003cBook\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        protected void updateItem(Book book, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            super.updateItem(book, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (empty || book \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                setGraphic(new DetailedBookCard(book, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 51
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/HelpBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpBox extends VBox {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Label exampleIntro;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Label exampleMessage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Label exampleCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private HelpBox(String intro, String message, String example) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/HelpBox.fxml\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.setRoot(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        exampleIntro.setText(intro);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        exampleMessage.setText(message);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        exampleCommand.setText(example);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Creates a HelpBox object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param intro Text that is to be included in the Help Box"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param message A picture as an example"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @param example"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return a HelpBox object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static HelpBox getHelpBox(String intro, String message, String example) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new HelpBox(intro, message, example);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 49
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpDelete;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpEdit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpFind;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpGoalAdd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpGoalDelete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpNoteAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpNoteDelete;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpRedo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpSort;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpUndo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.ui.help.HelpView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-f13-2.github.io/tp/\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String HEADER_MESSAGE \u003d \"Welcome to bookmark!\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"Click on the Copy URL button for the link to our Website!\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Image bookmarkIcon \u003d new Image(this.getClass().getResourceAsStream(\"/images/bookmark_logo.png\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private ImageView icon;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private Label welcomeHelp;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private VBox helpContainer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        welcomeHelp.setText(HEADER_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        icon.setImage(bookmarkIcon);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        scrollPane.setVvalue(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpAdd helpAdd \u003d new HelpAdd();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpList helpList \u003d new HelpList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpView helpView \u003d new HelpView();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpEdit helpEdit \u003d new HelpEdit();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpDelete helpDelete \u003d new HelpDelete();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpSort helpSort \u003d new HelpSort();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpFind helpFind \u003d new HelpFind();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpGoalAdd helpGoalAdd \u003d new HelpGoalAdd();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpGoalDelete helpGoalDelete \u003d new HelpGoalDelete();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpNoteAdd helpNoteAdd \u003d new HelpNoteAdd();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpNoteDelete helpNoteDelete \u003d new HelpNoteDelete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpUndo helpUndo \u003d new HelpUndo();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        HelpRedo helpRedo \u003d new HelpRedo();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        helpContainer.getChildren().addAll("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpAdd.helpIntro(), helpAdd.helpMessage(), helpAdd.helpExample()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpList.helpIntro(), helpList.helpMessage(), helpList.helpExample()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpView.helpIntro(), helpView.helpMessage(), helpView.helpExample()),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpEdit.helpIntro(), helpEdit.helpMessage(), helpEdit.helpExample()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpDelete.helpIntro(), helpDelete.helpMessage(), helpDelete.helpExample()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpSort.helpIntro(), helpSort.helpMessage(), helpSort.helpExample()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpFind.helpIntro(), helpFind.helpMessage(), helpFind.helpExample()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpGoalAdd.helpIntro(), helpGoalAdd.helpMessage(), helpGoalAdd.helpExample()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpGoalDelete.helpIntro(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                            helpGoalDelete.helpMessage(), helpGoalDelete.helpExample()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpNoteAdd.helpIntro(), helpNoteAdd.helpMessage(), helpNoteAdd.helpExample()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpNoteDelete.helpIntro(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                            helpNoteDelete.helpMessage(), helpNoteDelete.helpExample()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpUndo.helpIntro(), helpUndo.helpMessage(), helpUndo.helpExample()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                HelpBox.getHelpBox(helpRedo.helpIntro(), helpRedo.helpMessage(), helpRedo.helpExample())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "pennhanlee": 66,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private BookListPanel bookListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private SidebarPanel sidebarPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private boolean isDefaultView \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private StackPane bookListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private StackPane sidebarPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        sidebarPanel \u003d new SidebarPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        sidebarPanelPlaceholder.getChildren().add(sidebarPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getLibraryFilePath());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Changes the view of books to the detailed view."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void changeToDetailedView() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        isDefaultView \u003d false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListPanel \u003d new DetailedBookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Changes the view of books back to the default view."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void resetView() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        if (!isDefaultView) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookListPanel \u003d new BookListPanel(logic.getFilteredBookList());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            bookListPanelPlaceholder.getChildren().add(bookListPanel.getRoot());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        isDefaultView \u003d true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookListPanel getBookListPanel() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return bookListPanel;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void decideViewType(ViewType viewType) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        switch (viewType) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case DEFAULT:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            resetView();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case DETAILED:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (logic.getFilteredBookList().size() \u003c\u003d 1) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                // can only use detailed view when there is \u003c\u003d 1 books to display"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                changeToDetailedView();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                resetView();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        case MOST_RECENTLY_USED:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            if (logic.getFilteredBookList().size() \u003e 1) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                // cannot keep using detailed view if there are \u003e 1 books to display"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                resetView();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * @see seedu.bookmark.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            decideViewType(commandResult.getViewType());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 186,
      "TanLeYang": 68
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/NoteCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.text.TextAlignment;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class NoteCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String FXML \u003d \"NoteCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public final Note note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected HBox cardPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label id;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    protected Label body;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code NoteCard} with the given {@code Note} and index to display."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public NoteCard(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        initialize(note, displayedIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Initializes the components of this {@code NoteCard} using the given {@code Note} and index to display."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void initialize(Note note, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        title.setText(note.title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        body.setText(note.text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        title.setWrapText(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        title.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        body.setWrapText(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        body.setTextAlignment(TextAlignment.JUSTIFY);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 46
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/SidebarPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A sidebar that displays metadata."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class SidebarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String FXML \u003d \"SidebarPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final ObservableList\u003cBook\u003e books;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private ImageView logo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label numBooks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label numBookmarks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Label numPagesRead;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Initializes a {@code SidebarPanel} with the given list of books."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public SidebarPanel(ObservableList\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.books \u003d books;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        update(books);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        books.addListener((ListChangeListener\u003cBook\u003e) c -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            update(books);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Update the sidebar\u0027s Label texts."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void update(ObservableList\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int length \u003d books.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int bookmarkCount \u003d (int) books.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .filter(Book::hasStartedReading)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int pagesReadCount \u003d books.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .map(Book::getPagesRead)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .reduce(0, Integer::sum);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String book \u003d length \u003d\u003d 1 ? \" book\" : \" books\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String bookmark \u003d bookmarkCount \u003d\u003d 1 ? \" bookmark placed\" : \" bookmarks placed\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String pagesRead \u003d pagesReadCount \u003d\u003d 1 ? \" page read\" : \" pages read\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        numBooks.setText(length + book);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        numBookmarks.setText(bookmarkCount + bookmark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        numPagesRead.setText(pagesReadCount + pagesRead);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 62
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/bookmark_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "TanLeYang": 6
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 86,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpAction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public interface HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 22
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpAdd implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String ADD_INTRO \u003d \"ADD A BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String ADD_MESSAGE \u003d \"Add books to the storage to keep track of your \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"reading progress using our Add Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String ADD_COMMAND \u003d \"COMMAND: add n/BOOK_TITLE g/GENRE [t/TAG]... tp/TOTAL_PAGES \""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"[b/PAGE_NUMBER]\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String ADD_EXAMPLE \u003d \"EXAMPLE: add n/Harry Potter g/Fiction t/Magic\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \" t/Wizard tp/550 b/20\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String ADD_RESPONSE \u003d \"RESPONSE: New book added: Harry Potter \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"Genre: Fiction Total Pages: 550 \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"Bookmarked at: 20 Tags: [Magic, Wizard]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String ADD_NOTES \u003d \"NOTE: adding Tags and Bookmarked Page are optional and you can add \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"multiple tags\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpAdd() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return ADD_INTRO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return ADD_MESSAGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return ADD_COMMAND + LB + ADD_EXAMPLE + LB + ADD_RESPONSE + LB + ADD_NOTES;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 35
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpDelete implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String DELETE_INTRO \u003d \"DELETE A BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String DELETE_MESSAGE \u003d \"Doing some spring cleaning? Feel free to delete your recorded books \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"from the application using our Delete Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String DELETE_COMMAND \u003d \"COMMAND: delete INDEX\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String DELETE_EXAMPLE \u003d \"EXAMPLE: delete 3\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String DELETE_RESPONSE \u003d \"RESPONSE: Deleted Book: Tokyo Ghoul Genre: Anime Total Pages: 1000 \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"Bookmarked at: 3 Tags: [Japanese]\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpDelete() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return DELETE_INTRO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return DELETE_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return DELETE_COMMAND + LB + DELETE_EXAMPLE + LB + DELETE_RESPONSE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 30
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpEdit.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpEdit implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String EDIT_INTRO \u003d \"EDIT A BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String EDIT_MESSAGE \u003d \"Oh man! Made a mistake when adding the book? Fret Not! Simply edit your\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"book with our Edit Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String EDIT_COMMAND \u003d \"COMMAND: edit INDEX b/BOOKMARKED_PAGE\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String EDIT_EXAMPLE \u003d \"EXAMPLE: edit 3 b/360\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String EDIT_RESPONSE \u003d \"RESPONSE: Edited Book: Haikyuu Genre: Manga Total Pages: 500\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + \" Bookmarked at: 360\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String EDIT_NOTES \u003d \"NOTE: You can also edit name, genre, total pages and tags!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpEdit() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return EDIT_INTRO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return EDIT_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return EDIT_COMMAND + LB + EDIT_EXAMPLE + LB + EDIT_RESPONSE + LB + EDIT_NOTES;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 31
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpFind.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpFind implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String FIND_INTRO \u003d \"FIND YOUR BOOKS!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String FIND_MESSAGE \u003d \"Looking for something? Find specific books using our Find Command!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String FIND_COMMAND \u003d \"COMMAND: find n/BOOK_TITLE\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String FIND_EXAMPLE \u003d \"EXAMPLE: find n/Harry Potter\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String FIND_RESPONSE \u003d \"RESPONSE: 1 books listed!\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String FIND_NOTES \u003d \"NOTE: You can also find book on g/GENRE, t/TAG, c/ (completed), \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"nc/ (not completed)\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpFind() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return FIND_INTRO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return FIND_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return FIND_COMMAND + LB + FIND_EXAMPLE + LB + FIND_RESPONSE + LB + FIND_NOTES;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 30
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpGoalAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpGoalAdd implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_ADD_INTRO \u003d \"ADD A READING GOAL TO YOUR BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_ADD_MESSAGE \u003d \"Up for a challenge? Add a reading goal to your book using our \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                    + \"Goal Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_ADD_COMMAND \u003d \"COMMAND: goal INDEX p/PAGE d/DD-MM-YYYY\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_ADD_EXAMPLE \u003d \"EXAMPLE: goal 1 p/69 d/22-05-2020\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_ADD_RESPONSE \u003d \"RESPONSE: New goal for Harry Potter: \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                    + \"Finish page 13 before 20-11-2024\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpGoalAdd() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return GOAL_ADD_INTRO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return GOAL_ADD_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return GOAL_ADD_COMMAND + LB + GOAL_ADD_EXAMPLE + LB + GOAL_ADD_RESPONSE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 30
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpGoalDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpGoalDelete implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_DELETE_INTRO \u003d \"DELETE A GOAL FROM YOUR BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_DELETE_MESSAGE \u003d \"Feeling overwhelmed? It\u0027s okay, delete your goal by \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"using our Goal Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_DELETE_COMMAND \u003d \"COMMAND: goaldel INDEX\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_DELETE_EXAMPLE \u003d \"EXAMPLE: goaldel 1\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String GOAL_DELETE_RESPONSE \u003d \"RESPONSE: Goal successfully removed for Harry Potter\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpGoalDelete() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return GOAL_DELETE_INTRO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return GOAL_DELETE_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return GOAL_DELETE_COMMAND + LB + GOAL_DELETE_EXAMPLE + LB + GOAL_DELETE_RESPONSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpList implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LIST_INTRO \u003d \"LIST ALL BOOKS\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LIST_MESSAGE \u003d \"Want to take a peek of your bookshelf? See all of your \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"stored books using our List Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LIST_COMMAND \u003d \"COMMAND: list\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LIST_EXAMPLE \u003d \"EXAMPLE: list\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LIST_RESPONSE \u003d \"RESPONSE: Listing all books\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpList() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return LIST_INTRO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return LIST_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return LIST_COMMAND + LB + LIST_EXAMPLE + LB + LIST_RESPONSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpNoteAdd.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpNoteAdd implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_ADD_INTRO \u003d \"ADD A NOTE TO YOUR BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_ADD_EXPLANATION \u003d \"Have some post-reading reflections? Add them into your stored \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                        + \"book by using our Note Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_ADD_COMMAND \u003d \"COMMAND: note 1 n/NOTE TITLE txt/TEXT\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_ADD_EXAMPLE \u003d \"EXAMPLE: note 1 n/Chapter 1 txt/This is a good chapter\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_ADD_RESPONSE \u003d \"RESPONSE: New Note added to Harry Potter\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpNoteAdd() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return NOTE_ADD_INTRO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return NOTE_ADD_EXPLANATION;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return NOTE_ADD_COMMAND + LB + NOTE_ADD_EXAMPLE + LB + NOTE_ADD_RESPONSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpNoteDelete.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpNoteDelete implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_DELETE_INTRO \u003d \"DELETE A NOTE FROM YOUR BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_DELETE_MESSAGE \u003d \"Having second thoughts? Delete past Notes \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                    + \"by using our Note Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_DELETE_COMMAND \u003d \"COMMAND: note INDEX NOTE_INDEX\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_DELETE_EXAMPLE \u003d \"EXAMPLE: notedel 1 3\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String NOTE_DELETE_RESPONSE \u003d \"RESPONSE: Deleted Note: Thoughts, from Book: 1984\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpNoteDelete() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return NOTE_DELETE_INTRO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return NOTE_DELETE_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return NOTE_DELETE_COMMAND + LB + NOTE_DELETE_EXAMPLE + LB + NOTE_DELETE_RESPONSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 29
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpRedo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpRedo implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String REDO_INTRO \u003d \"REDO YOUR COMMANDS!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String REDO_MESSAGE \u003d \"Decided to stick with it? Redo past commands using our Redo Command!\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String REDO_COMMAND \u003d \"COMMAND: redo\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String REDO_EXAMPLE \u003d \"EXAMPLE: redo\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String REDO_RESPONSE \u003d \"RESPONSE: Previous undone command successfully redone\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpRedo() {}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return REDO_INTRO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return REDO_MESSAGE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return REDO_COMMAND + LB + REDO_EXAMPLE + LB + REDO_RESPONSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 28
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpSort.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpSort implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String SORT_INTRO \u003d \"SORT YOUR BOOKS AS YOU LIKE!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String SORT_MESSAGE \u003d \"Too messy? Sort your books by Name, Genre or Reading Progress using \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"our Sort Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String SORT_COMMAND \u003d \"COMMAND: sort n/\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String SORT_EXAMPLE \u003d \"EXAMPLE: sort n/\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String SORT_RESPONSE \u003d \"RESPONSE: Sorted by Name\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String SORT_NOTES \u003d \"NOTE: You can also sort on g/ (genre), b/ (bookmark) or \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"rp/ (reading progress)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \"\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpSort() {}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return SORT_INTRO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return SORT_MESSAGE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return SORT_COMMAND + LB + SORT_EXAMPLE + LB + SORT_RESPONSE + LB + SORT_NOTES;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 31
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpUndo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpUndo implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String UNDO_INTRO \u003d \"UNDO YOUR COMMANDS!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String UNDO_MESSAGE \u003d \"Made a mistake? No worries! Undo your \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"commands by using our Undo Command!\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String UNDO_COMMAND \u003d \"COMMAND: undo\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String UNDO_EXAMPLE \u003d \"EXAMPLE: undo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String UNDO_RESPONSE \u003d \"RESPONSE: Previous command successfully undone\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \" \\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpUndo() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return UNDO_INTRO;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return UNDO_MESSAGE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return UNDO_COMMAND + LB + UNDO_EXAMPLE + LB + UNDO_RESPONSE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 30
    }
  },
  {
    "path": "src/main/java/seedu/bookmark/ui/help/HelpView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.ui.help;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class HelpView implements HelpAction {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String VIEW_INTRO \u003d \"VIEW A CHOSEN BOOK!\";"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String VIEW_MESSAGE \u003d \"Want a closer look? Find the stored Notes and Goals of your chosen \""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                + \"book using the View Command! \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String VIEW_COMMAND \u003d \"COMMAND: view INDEX\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String VIEW_EXAMPLE \u003d \"EXAMPLE: view 3\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String VIEW_RESPONSE \u003d \"RESPONSE: Viewing 3\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String LB \u003d \"\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public HelpView() {}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpIntro() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return VIEW_INTRO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return VIEW_MESSAGE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public String helpExample() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return VIEW_COMMAND + LB + VIEW_EXAMPLE + LB + VIEW_RESPONSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 29
    }
  },
  {
    "path": "src/main/resources/view/BookCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cVBox minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \u003cLabel fx:id\u003d\"genre\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$genre\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \u003cLabel fx:id\u003d\"totalPages\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalPages\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \u003cLabel fx:id\u003d\"bookmark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bookmark\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cgraphic\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "          \u003cImageView fx:id\u003d\"bookmarkIcon\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "          \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/graphic\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "      \u003cLabel fx:id\u003d\"goal\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$goal\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \u003cLabel fx:id\u003d\"noteLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$noteLabel\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"notes\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 1,
      "-": 32,
      "TanLeYang": 13
    }
  },
  {
    "path": "src/main/resources/view/BookListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"book-list\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-padding: 10 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ".list-cell:filled {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ".book-list {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-image: url(\"../images/bookshelf.png\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-radius: 5px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-border-radius: 5px;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color:  rgb(81, 86, 88, 0.95);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-padding: 0, 10px;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#filterField, #bookListPanel, #personWebpage {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#notes {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "#notes .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color: #87919E;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ".heading {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color:  rgb(81, 86, 88);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ".sidebar {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-background-color:  rgb(81, 86, 88);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ".sidebar .label {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 327,
      "TanLeYang": 50
    }
  },
  {
    "path": "src/main/resources/view/DetailedBookCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\" vgap\u003d\"1.5\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cVBox fx:id\u003d\"detailedBookContainer\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel text\u003d\"You are viewing:\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"genre\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$genre\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalPages\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalPages\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"bookmark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$bookmark\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u003cImageView fx:id\u003d\"bookmarkIcon\" fitHeight\u003d\"15.0\" fitWidth\u003d\"15.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"percentageCompletion\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ %completed\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            \u003cLabel fx:id\u003d\"goal\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$ goal\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"noteLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$noteLabel\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"notes\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cVBox fx:id\u003d\"notesContainer\" GridPane.rowIndex\u003d\"10\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"18\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cInsets top\u003d\"25\" right\u003d\"5\" bottom\u003d\"25\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"noteHeading\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$Notes\\\" style\u003d\"-fx-font-size: 20;\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 1,
      "TanLeYang": 52
    }
  },
  {
    "path": "src/main/resources/view/DetailedBookListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"book-list\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cListView fx:id\u003d\"bookListView\" VBox.vgrow\u003d\"ALWAYS\" minHeight\u003d\"230\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cInsets top\u003d\"7\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 12
    }
  },
  {
    "path": "src/main/resources/view/HelpBox.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ".commandtitle {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ".message {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-family: \"Segoe UI \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 11
    }
  },
  {
    "path": "src/main/resources/view/HelpBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"700\" styleClass\u003d\"background\" stylesheets\u003d\"@HelpBox.css\" type\u003d\"javafx.scene.layout.VBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\" styleClass\u003d\"commandtitle\" stylesheets\u003d\"@HelpBox.css\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "              \u003cLabel fx:id\u003d\"exampleIntro\" alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                      \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "              \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cInsets /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cLabel fx:id\u003d\"exampleMessage\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cLabel fx:id\u003d\"exampleCommand\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"12.5\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 49
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ".headerbar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-size: 9pt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ".bodymessage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ".body {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-background-image: url(\"../images/helpwindowbg.png\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-background-repeat: no-repeat;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    -fx-background-size: cover, auto;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 23
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import java.lang.String?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003cVBox prefHeight\u003d\"535.0\" prefWidth\u003d\"520.0\" stylesheets\u003d\"@HelpWindow.css\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003cHBox styleClass\u003d\"headerbar\" stylesheets\u003d\"@HelpWindow.css\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                   \u003cImageView fx:id\u003d\"icon\" fitHeight\u003d\"50.0\" fitWidth\u003d\"50.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    \u003cLabel fx:id\u003d\"welcomeHelp\" alignment\u003d\"CENTER\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"57.0\" prefWidth\u003d\"389.0\" styleClass\u003d\"headerbar\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                        \u003cInsets top\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "          \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" stylesheets\u003d\"@HelpWindow.css\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003ccontent\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003cVBox fx:id\u003d\"helpContainer\" alignment\u003d\"CENTER\" styleClass\u003d\"body\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003c/content\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003cstyleClass\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003cString fx:value\u003d\"body\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                  \u003cString fx:value\u003d\"edge-to-edge\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "               \u003c/styleClass\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "pennhanlee": 30
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         title\u003d\"bookmark\" minWidth\u003d\"960\" minHeight\u003d\"650\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cImage url\u003d\"@/images/bookmark_icon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cHBox HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "          \u003cVBox fx:id\u003d\"library\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cStackPane fx:id\u003d\"bookListPanelPlaceholder\" style\u003d\"fx-background-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cStackPane fx:id\u003d\"sidebarPanelPlaceholder\" minWidth\u003d\"110\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "TanLeYang": 17
    }
  },
  {
    "path": "src/main/resources/view/NoteCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cVBox GridPane.columnIndex\u003d\"0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            \u003cLabel fx:id\u003d\"body\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$genre\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 29
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/main/resources/view/SidebarPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      styleClass\u003d\"sidebar\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      spacing\u003d\"10\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      alignment\u003d\"TOP_CENTER\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "      minWidth\u003d\"150\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cInsets top\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cImageView fx:id\u003d\"logo\" fitHeight\u003d\"150\" fitWidth\u003d\"100\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        \u003cImage url\u003d\"@/images/bookmark_logo.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cLabel fx:id\u003d\"numBooks\" text\u003d\"/number of books\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cLabel fx:id\u003d\"numBookmarks\" text\u003d\"number of bookmarks placed\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \u003cLabel fx:id\u003d\"numPagesRead\" text\u003d\"/number of pages\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 21
    }
  },
  {
    "path": "src/test/data/JsonLibraryStorageTest/invalidAndValidBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\": \"Harry Potter\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"Fiction\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\": \"500\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\": \"20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12/2024\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\": \" \","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"F@ction\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\": \"120\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\": \"20\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10b 20-12-2024\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 4,
      "-": 4,
      "TanLeYang": 7
    }
  },
  {
    "path": "src/test/data/JsonLibraryStorageTest/invalidBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\": \"Book with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"Invalid genre: @\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\": \"InValid Total pages\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"bookmark\": \"20\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/duplicateBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"fiction\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\": \"100\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"bookmark\": \"20\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"tagged\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Alice Pauline\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"fiction\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"bookmark\": \"20\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"totalPages\": \"100\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 4,
      "-": 6,
      "TanLeYang": 6
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/invalidBookLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"books\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Hans Muster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\": \"invalid@genre\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\": \"abc\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"bookmark\": \"20\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableLibraryTest/typicalBooksLibrary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"_comment\": \"bookmark save file which contains the same Book values as in TypicalBooks#getTypicalLibrary()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"books\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"Harry Potter\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Fiction\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ \"Good\" ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"1000\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\" : \"500\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"To Kill a Mockingbird\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Fiction\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ \"Good\", \"Lengthy\" ],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"1500\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\" : \"269\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    \"notes\" : ["
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "      {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        \"title\" : \"Chapter 1\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        \"text\" : \"Chapter 1\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "      },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "      {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        \"title\" : \"Chapter 2\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        \"text\" : \"Chapter 2\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "      },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "      {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        \"title\" : \"Chapter 3\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        \"text\" : \"Chapter 3\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "      }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"The Hunger Games\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Fiction\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"500\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\": \"20\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"Crime and Punishment\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Crime\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ \"Bad\" ],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"1000\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\": \"1000\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"Lord of the Flies\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Mystery\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"369\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\" : \"123\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"Enders Game\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Thriller\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"123\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\" : \"23\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"name\" : \"On the Road\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"genre\" : \"Travel\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    \"totalPages\" : \"239\","
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"bookmark\" : \"111\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    \"goal\" : \"10 20-12-2024\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 14,
      "pangpuncake": 14,
      "TanLeYang": 39
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"bookmarkFilePath\" : \"library.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "  \"bookmarkFilePath\" : \"library.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        final Index fifthBookIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(fifthBookIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(fifthBookIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(fifthBookIndex.equals(fifthBookIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(fifthBookIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(fifthBookIndex.equals(5.0f));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(fifthBookIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "TanLeYang": 2,
      "angrybunny123": 8
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/bookmark_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 141,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.GENRE_DESC_1984;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NAME_DESC_1984;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TOTAL_PAGES_DESC_1984;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.COMPULSORY_NINETEEN_EIGHTY_FOUR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonLibraryStorage libraryStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new JsonLibraryStorage(temporaryFolder.resolve(\"library.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StorageManager storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // Setup LogicManager with JsonLibraryBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        JsonLibraryStorage libraryBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new JsonLibraryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionLibrary.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        StorageManager storage \u003d new StorageManager(libraryBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_1984 + GENRE_DESC_1984 + TOTAL_PAGES_DESC_1984;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(COMPULSORY_NINETEEN_EIGHTY_FOUR).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.addBook(expectedBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static class JsonLibraryIoExceptionThrowingStub extends JsonLibraryStorage {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        private JsonLibraryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "pennhanlee": 6,
      "TanLeYang": 28,
      "angrybunny123": 5
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/ViewTypeManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.State;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class ViewTypeManagerTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private ViewTypeManager viewTypeManager \u003d new ViewTypeManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private StateStub testState \u003d new StateStub();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setView_mostRecentlyUsed_noChange() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ViewType initialView \u003d viewTypeManager.getCurrentViewType();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        viewTypeManager.setCurrentView(ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(initialView, viewTypeManager.getCurrentViewType());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setView_notMostRecentlyUsed_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        viewTypeManager.setCurrentView(ViewType.DEFAULT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(viewTypeManager.getCurrentViewType(), ViewType.DEFAULT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        viewTypeManager.setCurrentView(ViewType.DETAILED);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(ViewType.DETAILED, viewTypeManager.getCurrentViewType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setViewTypePairing_mostRecentlyUsed_usedCurrentView() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ViewType currentView \u003d viewTypeManager.getCurrentViewType();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        viewTypeManager.addViewTypePairing(testState, ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(currentView, viewTypeManager.getViewType(testState));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setViewTypePairing_notMostRecentlyUsed_usedProvidedView() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        viewTypeManager.addViewTypePairing(testState, ViewType.DEFAULT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(ViewType.DEFAULT, viewTypeManager.getViewType(testState));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        viewTypeManager.addViewTypePairing(testState, ViewType.DETAILED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(ViewType.DETAILED, viewTypeManager.getViewType(testState));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void getViewType_notPresent_defaultView() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StateStub newState \u003d new StateStub();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(ViewType.DEFAULT, viewTypeManager.getViewType(newState));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    static class StateStub extends State {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public StateStub() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            super(null, null, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this \u003d\u003d other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 65
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/algorithm/SuggestionAlgorithmTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.logic.algorithm;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.HARRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.MISSPELT_HARRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.WordBank;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.Word;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.exceptions.WordStoreNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.testutil.TypicalWords;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class SuggestionAlgorithmTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private WordBank wordBank \u003d TypicalWords.getEmptyWordBank();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private SuggestionAlgorithm suggestionAlgorithm \u003d new SuggestionAlgorithm(wordBank);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //------------------------- instantiate Object ---------------------//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void create_suggestionAlgo_nullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SuggestionAlgorithm(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void create_suggestionAlgo_correctValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordBank wordBank \u003d TypicalWords.getTypicalWordBank();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        SuggestionAlgorithm suggestionAlgorithm \u003d new SuggestionAlgorithm(wordBank);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(wordBank, suggestionAlgorithm.getWordBank());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //------------------------- findSuggestion() ----------------------//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void findSuggestion_sourceWordNull() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e suggestionAlgorithm"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                            .findSuggestion(null, PREFIX_NAME));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void findSuggestion_prefixNull() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e suggestionAlgorithm"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                            .findSuggestion(HARRY, null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void findSuggestion_prefixInvalid() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(WordStoreNotFoundException.class, () -\u003e suggestionAlgorithm"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                                .findSuggestion(MISSPELT_HARRY, PREFIX_BOOKMARK));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void findSuggestion_correctParameters() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String validWord \u003d \"Harry\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book testBook \u003d new BookBuilder().withName(validWord).withGenre(\"Fiction\").withTotalPages(\"100\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.addToWordBank(testBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ArrayList\u003cWord\u003e suggestions \u003d suggestionAlgorithm.findSuggestion(\"Haary\", PREFIX_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int distance \u003d suggestionAlgorithm.calculateDistance(\"Haary\", \"Harry\"); //distance \u003d 1"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word harry \u003d new Word(\"Harry\", distance);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(suggestions.contains(harry));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void findSuggestion_distanceLimit() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int distanceTolerance \u003d SuggestionAlgorithm.DISTANCE_TOLERANCE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String validWord \u003d \"Harry\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book testBook \u003d new BookBuilder().withName(validWord).withGenre(\"Fiction\").withTotalPages(\"100\").build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.addToWordBank(testBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        //word found when within distance limit"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int wordDistanceWithinLimit \u003d suggestionAlgorithm.calculateDistance(validWord, validWord);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word wordObjectWithinLimit \u003d new Word(validWord, wordDistanceWithinLimit);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word validWordObject \u003d new Word(validWord, wordDistanceWithinLimit);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ArrayList\u003cWord\u003e suggestions \u003d suggestionAlgorithm.findSuggestion(wordObjectWithinLimit.getWord(), PREFIX_NAME);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        System.out.println(suggestions.size());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(suggestions.contains(validWordObject));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        //word found when at distance limit"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String wordAtDistanceLimit \u003d \"Ha\" + \"a\".repeat(distanceTolerance) + \"rry\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int wordDistanceAtLimit \u003d suggestionAlgorithm.calculateDistance(wordAtDistanceLimit, validWord);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word wordObjectAtLimit \u003d new Word(wordAtDistanceLimit, wordDistanceAtLimit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        validWordObject \u003d new Word(validWord, wordDistanceAtLimit);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        suggestions \u003d suggestionAlgorithm.findSuggestion(wordObjectAtLimit.getWord(), PREFIX_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(suggestions.contains(validWordObject));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        //word not found when out of distance limit"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String wordOutOfDistanceLimit \u003d \"Ha\" + \"a\".repeat(distanceTolerance + 1) + \"rry\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int wordDistanceOutOfLimit \u003d suggestionAlgorithm.calculateDistance(wordOutOfDistanceLimit, validWord);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word wordObjectOutOfLimit \u003d new Word(wordOutOfDistanceLimit, wordDistanceOutOfLimit);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        validWordObject \u003d new Word(validWord, wordDistanceOutOfLimit);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        suggestions \u003d suggestionAlgorithm.findSuggestion(wordObjectOutOfLimit.getWord(), PREFIX_NAME);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(suggestions.contains(validWordObject));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //------------------------ calculateDistance ---------------------//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void calculateDistance_sourceWordNull() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e suggestionAlgorithm"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                            .calculateDistance(HARRY, null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void calculateDistance_targetWordNull() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e suggestionAlgorithm"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                                            .calculateDistance(null, HARRY));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void calculateDistance_correctInput() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int substitutionDistance \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                    .calculateDistance(\"Hbrry\", \"Harry\"); //substitution (cost 1)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, substitutionDistance);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int positionSwapDistance \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                    .calculateDistance(\"Hrary\", \"Harry\"); //adjacent swapping (cost 1)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, positionSwapDistance);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int missingLetterDistance \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                    .calculateDistance(\"Hrry\", \"Harry\"); //insertion (cost 1)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, missingLetterDistance);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int extraLetterDistance \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                    .calculateDistance(\"Haarry\", \"Harry\"); //deletion (cost 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, extraLetterDistance);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int substitutionDistanceBig \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                                        .calculateDistance(\"Hbbby\", \"Harry\"); // (cost 3)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(3, substitutionDistanceBig);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int positionSwapDistanceBig \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                .calculateDistance(\"Hyrra\", \"Harry\"); //adjacent swapping (cost 2) (becomes insert\u0026delete)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(2, positionSwapDistanceBig);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int missingLetterDistanceBig \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                .calculateDistance(\"Hy\", \"Harry\"); //insertion (cost 3)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(3, missingLetterDistanceBig);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int extraLetterDistanceBig \u003d suggestionAlgorithm"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                .calculateDistance(\"Haaaarry\", \"Harry\"); //deletion (cost 3)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(3, extraLetterDistanceBig);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 160
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_newBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book validBook \u003d new BookBuilder().withName(\"TESTER BOOK\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.addBook(validBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(new AddCommand(validBook), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validBook), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book bookInList \u003d model.getLibrary().getBookList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertCommandFailure(new AddCommand(bookInList), model, AddCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "pennhanlee": 3,
      "TanLeYang": 16
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.WordBank;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.history.State;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void constructor_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_bookAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ModelStubAcceptingBookAdded modelStub \u003d new ModelStubAcceptingBookAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validBook).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validBook), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(Arrays.asList(validBook), modelStub.booksAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_duplicateBook_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithBook(validBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_BOOK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute_fullModel_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book validBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubFullModel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(CommandException.class, String.format(Messages.MESSAGE_TOO_MANY_BOOKS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                Model.MAX_BOOK_CAPACITY), () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book alice \u003d new BookBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book bob \u003d new BookBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public Path getBookmarkFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void setBookmarkFilePath(Path bookMarkFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        public void setSortingPreference(String newSortingPreference) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        public String getSortingPreference() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        public WordBank getWordBank() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public boolean isFullCapacity() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void deleteBook(Book target) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void setBook(Book target, Book editedBook) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void undo(){}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void redo(){}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void save(){}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public State getCurrentState() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public ObservableList\u003cBook\u003e getFilteredBookList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void updateFilteredBookList(Predicate\u003cBook\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        public void sortFilteredBookList(Comparator\u003cBook\u003e comparator) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        public void sortByDefaultComparator() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            //will be called, but we do nothing here"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * A Model stub that contains a single book."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private class ModelStubWithBook extends ModelStub {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        private final Book book;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        ModelStubWithBook(Book book) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            this.book \u003d book;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return this.book.isSameBook(book);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * A Model stub that always accept the book being added."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private class ModelStubAcceptingBookAdded extends ModelStub {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final ArrayList\u003cBook\u003e booksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public boolean hasBook(Book book) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            return booksAdded.stream().anyMatch(book::isSameBook);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public void addBook(Book book) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            requireNonNull(book);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            booksAdded.add(book);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return new Library();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * A Model stub that is always full."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private class ModelStubFullModel extends ModelStub {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public boolean isFullCapacity() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 139,
      "pennhanlee": 22,
      "TanLeYang": 81,
      "angrybunny123": 21
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/AddNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NOTE_TEXT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NOTE_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Contains unit tests for AddNoteCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class AddNoteCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_addValidNoteUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note noteToAdd \u003d new Note(VALID_NOTE_TITLE, VALID_NOTE_TITLE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book toAddNote \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d new BookBuilder(toAddNote).withNotes(VALID_NOTE_TITLE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new AddNoteCommand(INDEX_FIRST_BOOK, noteToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(AddNoteCommand.MESSAGE_ADD_NOTE_SUCCESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                noteToAdd.title, editedBook.getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(addNoteCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_duplicateNoteUnfilteredList_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookWithNote \u003d new BookBuilder(firstBook).withNotes(\"Chapter 1\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Model modifiedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        modifiedModel.setBook(firstBook, bookWithNote);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(INDEX_FIRST_BOOK, new Note(\"Chapter 1\", \"Chapter 1\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(addNoteCommand, modifiedModel, AddNoteCommand.MESSAGE_DUPLICATE_NOTE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void execute_tooManyNotesUnfilteredList_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        BookBuilder builder \u003d new BookBuilder(firstBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cString\u003e notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d Book.MAX_NOTE_COUNT; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            notes.add(String.valueOf(i));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // booktoAddNotes has the valid max number of notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book bookToAddNotes \u003d builder.withNotes(notes.toArray(new String[]{})).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model modifiedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modifiedModel.setBook(firstBook, bookToAddNotes);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(INDEX_FIRST_BOOK, new Note(\"TEST\", \"TEST\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(addNoteCommand, modifiedModel, String.format(Messages.MESSAGE_TOO_MANY_NOTES,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                Book.MAX_NOTE_COUNT));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new AddNoteCommand(outOfBoundIndex, new Note(VALID_NOTE_TITLE, VALID_NOTE_TEXT));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(addNoteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * but smaller than size of library"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the library book list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand addNoteCommand \u003d new AddNoteCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new Note(VALID_NOTE_TITLE, VALID_NOTE_TEXT));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(addNoteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note validNote \u003d new Note(VALID_NOTE_TITLE, VALID_NOTE_TEXT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final AddNoteCommand standardCommand \u003d new AddNoteCommand(INDEX_FIRST_BOOK, validNote);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand commandWithSameValues \u003d new AddNoteCommand(INDEX_FIRST_BOOK, validNote);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new AddNoteCommand(INDEX_SECOND_BOOK, validNote)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new AddNoteCommand(INDEX_FIRST_BOOK, new Note(\"Hello\", \"World\"))));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 112,
      "TanLeYang": 25
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.setLibrary(new Library());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "TanLeYang": 10
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, ViewType.DEFAULT)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, ViewType.DEFAULT)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, ViewType.DEFAULT)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different view type -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, ViewType.DETAILED)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.DEFAULT).hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.DEFAULT).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different view type value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED).hashCode());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "TanLeYang": 17
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOTE_TEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOTE_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TOTAL_PAGES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_NAME_1984 \u003d \"1984\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_NAME_JANE_EYRE \u003d \"Jane Eyre\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_GENRE_1984 \u003d \"Science Fiction\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_GENRE_JANE_EYRE \u003d \"Novel\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_TAG_GOOD \u003d \"Good\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_TAG_BAD \u003d \"Bad\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_TOTAL_PAGES_1984 \u003d \"684\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_TOTAL_PAGES_JANE_EYRE \u003d \"532\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String VALID_TOTAL_PAGES \u003d \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_BOOKMARK_1984 \u003d \"239\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String VALID_BOOKMARK_JANE_EYRE \u003d \"123\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String VALID_NOTE_TITLE \u003d \"- Chapter 1 -\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String VALID_NOTE_TEXT \u003d \"Awesome read!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String NAME_DESC_1984 \u003d \" \" + PREFIX_NAME + VALID_NAME_1984;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String NAME_DESC_JANE_EYRE \u003d \" \" + PREFIX_NAME + VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String GENRE_DESC_1984 \u003d \" \" + PREFIX_GENRE + VALID_GENRE_1984;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String GENRE_DESC_JANE_EYRE \u003d \" \" + PREFIX_GENRE + VALID_GENRE_JANE_EYRE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String TAG_DESC_GOOD \u003d \" \" + PREFIX_TAG + VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String TAG_DESC_BAD \u003d \" \" + PREFIX_TAG + VALID_TAG_BAD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String TOTAL_PAGES_DESC_1984 \u003d \" \" + PREFIX_TOTAL_PAGES + VALID_TOTAL_PAGES_1984;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String TOTAL_PAGES_DESC_JANE_EYRE \u003d \" \" + PREFIX_TOTAL_PAGES + VALID_TOTAL_PAGES_JANE_EYRE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String BOOKMARK_DESC_1984 \u003d \" \" + PREFIX_BOOKMARK + VALID_BOOKMARK_1984;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String BOOKMARK_DESC_JANE_EYRE \u003d \" \" + PREFIX_BOOKMARK + VALID_BOOKMARK_JANE_EYRE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String NOTE_TITLE \u003d \" \" + PREFIX_NOTE_TITLE + \"My thoughts...\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String NOTE_TEXT \u003d \" \" + PREFIX_NOTE_TEXT + \"Awesome read!\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            + \"a\".repeat(Name.MAX_NAME_LENGTH + 1); //char limit120"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String INVALID_GENRE_DESC \u003d \" \" + PREFIX_GENRE + \"@@@@\"; // \u0027@\u0027 not allowed in genres"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String INVALID_TOTAL_PAGES_DESC \u003d \" \" + PREFIX_TOTAL_PAGES + \"cnw\"; // \"alphabets not allowed\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String INVALID_BOOKMARK_DESC \u003d \" \" + PREFIX_BOOKMARK + \"-12\"; // \"negative numbers not allowed\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String INVALID_NOTE_TITLE \u003d \" \" + PREFIX_NOTE_TITLE + \" \"; // \u0027 \u0027 not allowed at start of text"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final String INVALID_NOTE_TEXT \u003d \" \" + PREFIX_NOTE_TEXT + \" \"; // \u0027 \u0027 not allowed at start of text"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_1984;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final EditCommand.EditBookDescriptor DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        DESC_1984 \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_1984)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(VALID_GENRE_1984)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .withTags(VALID_TAG_BAD)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .withTotalPages(VALID_TOTAL_PAGES_1984)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .withBookmark(VALID_BOOKMARK_1984).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        DESC_JANE_EYRE \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(VALID_GENRE_JANE_EYRE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .withTags(VALID_TAG_GOOD, VALID_TAG_BAD)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                .withBookmark(VALID_BOOKMARK_JANE_EYRE).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * - the library, filtered book list and selected book in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library expectedLibrary \u003d new Library(actualModel.getLibrary());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cBook\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedLibrary, actualModel.getLibrary());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredBookList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the book at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * {@code model}\u0027s library."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static void showBookAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book book \u003d model.getFilteredBookList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String[] splitName \u003d book.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(1, model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 15,
      "-": 69,
      "pennhanlee": 14,
      "TanLeYang": 44,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookToDelete \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_BOOK_SUCCESS, bookToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.deleteBook(bookToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        showNoBook(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private void showNoBook(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.updateFilteredBookList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(model.getFilteredBookList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 12,
      "-": 70,
      "TanLeYang": 22,
      "angrybunny123": 5
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/DeleteNoteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NOTE_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * Contains unit tests for DeleteNoteCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class DeleteNoteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_deleteValidNoteUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book baseBook \u003d model.getFilteredBookList().get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book deleteNoteFromBook \u003d new BookBuilder(baseBook).withNotes(VALID_NOTE_TITLE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d new BookBuilder(baseBook).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new DeleteNoteCommand(INDEX_FIRST_BOOK, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteNoteCommand.MESSAGE_DELETE_NOTE_SUCCESS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                VALID_NOTE_TITLE, editedBook.getName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Model beforeDeletionModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        beforeDeletionModel.setBook(model.getFilteredBookList().get(0), deleteNoteFromBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandSuccess(deleteNoteCommand, beforeDeletionModel, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidBookIndexInvalidNoteIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new DeleteNoteCommand(outOfBoundIndex, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test void execute_validBookIndexInvalidNoteIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundNoteIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_BOOK, outOfBoundNoteIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * but smaller than size of library"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the library book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "               Index.fromOneBased(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_validBookIndexInvalidNoteIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundNoteIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand deleteNoteCommand \u003d new DeleteNoteCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                Index.fromOneBased(1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(deleteNoteCommand, model, Messages.MESSAGE_INVALID_NOTE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final DeleteNoteCommand standardCommand \u003d new DeleteNoteCommand(INDEX_FIRST_BOOK, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand commandWithSameValues \u003d new DeleteNoteCommand(INDEX_FIRST_BOOK, Index.fromOneBased(1));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteNoteCommand(INDEX_SECOND_BOOK, Index.fromOneBased(1))));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different note index -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteNoteCommand(INDEX_FIRST_BOOK, Index.fromOneBased(2))));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 121,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/EditBookDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.DESC_1984;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_BOOKMARK_JANE_EYRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TOTAL_PAGES_JANE_EYRE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class EditBookDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // The book 1984 is a different book from JANE_EYRE, and hence the values for each property are different."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor descriptorWithSameValues \u003d new EditBookDescriptor(DESC_1984);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(DESC_1984.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(DESC_1984.equals(DESC_1984));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(DESC_1984.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(DESC_1984.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(DESC_1984.equals(DESC_JANE_EYRE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditCommand.EditBookDescriptor editedAmy \u003d new EditBookDescriptorBuilder(DESC_1984)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withName(VALID_NAME_JANE_EYRE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(DESC_1984.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_1984).withTags(VALID_TAG_GOOD).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(DESC_1984.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different totalPages -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_1984).withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(DESC_1984.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        editedAmy \u003d new EditBookDescriptorBuilder(DESC_1984).withBookmark(VALID_BOOKMARK_JANE_EYRE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(DESC_1984.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 11,
      "-": 25,
      "TanLeYang": 19
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.DESC_1984;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_BOOKMARK_JANE_EYRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_JANE_EYRE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TOTAL_PAGES_JANE_EYRE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(editedBook).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false , false,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index indexLastBook \u003d Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book lastBook \u003d model.getFilteredBookList().get(indexLastBook.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        BookBuilder bookInList \u003d new BookBuilder(lastBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d bookInList.withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withTags(VALID_TAG_GOOD).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withTags(VALID_TAG_GOOD).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastBook, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.setBook(lastBook, editedBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false , false,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, new EditBookDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false , false,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookInFilteredList \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedBook \u003d new BookBuilder(bookInFilteredList).withName(VALID_NAME_JANE_EYRE).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_JANE_EYRE).build());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.updateFilteredBookList(b -\u003e true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.updateFilteredBookList(b -\u003e true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false , false,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_duplicateBookUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        seedu.bookmark.model.book.Book firstBook \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        seedu.bookmark.logic.commands.EditCommand.EditBookDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new seedu.bookmark.testutil.EditBookDescriptorBuilder(firstBook).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_BOOK, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_duplicateBookFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // edit book in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book bookInList \u003d model.getLibrary().getBookList().get(INDEX_SECOND_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new EditBookDescriptorBuilder(bookInList).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_BOOK);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidBookIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_JANE_EYRE).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * but smaller than size of library"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidBookIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the library book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getBookList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new EditBookDescriptorBuilder().withName(VALID_NAME_JANE_EYRE).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_validBookmark_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book editedBook \u003d new BookBuilder()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withGenre(VALID_GENRE_JANE_EYRE)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withBookmark(VALID_TOTAL_PAGES_JANE_EYRE).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book oldBook \u003d new BookBuilder()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withGenre(VALID_GENRE_JANE_EYRE)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                  .withBookmark(VALID_BOOKMARK_JANE_EYRE).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(oldBook)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                            .withBookmark(VALID_TOTAL_PAGES_JANE_EYRE).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_BOOK_SUCCESS, editedBook);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        expectedModel.setBook(model.getFilteredBookList().get(0), editedBook);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false , false,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void execute_invalidOutOfRangeBookmark_failure() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Book oldBook \u003d new BookBuilder()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                               .withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                               .withGenre(VALID_GENRE_JANE_EYRE)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                               .withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                               .withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                               .withBookmark(VALID_BOOKMARK_JANE_EYRE).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(oldBook)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                            .withBookmark(VALID_TOTAL_PAGES_JANE_EYRE + \"0\").build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_BOOK, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertCommandFailure(editCommand, model, Bookmark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_BOOK, DESC_1984);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor copyDescriptor \u003d new EditBookDescriptor(DESC_1984);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_BOOK, copyDescriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_BOOK, DESC_1984)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_BOOK, DESC_JANE_EYRE)));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 88,
      "-": 86,
      "TanLeYang": 63
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.DEFAULT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "TanLeYang": 8
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_BOOKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_WORD_NOT_UNDERSTOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_WORD_SUGGESTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.CRIME_AND_PUNISHMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.ENDERS_GAME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.LORD_OF_THE_FLIES;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.ON_THE_ROAD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.THE_HUNGER_GAMES;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.TO_KILL_A_MOCKINGBIRD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.logic.parser.Prefix;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.BookCompletedPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.BookNotCompletedPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.GenreContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.exceptions.WordStoreNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void namePredicateEquals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix namePrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] firstKeyword \u003d {\"first\"};"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] secondKeyword \u003d {\"second\"};"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate, namePrefix, firstKeyword);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate, namePrefix, secondKeyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate, namePrefix, firstKeyword);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void genrePredicateEquals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        GenreContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new GenreContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        GenreContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new GenreContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix genrePrefix \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] firstKeyword \u003d {\"first\"};"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] secondKeyword \u003d {\"second\"};"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate, genrePrefix, firstKeyword);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate, genrePrefix, secondKeyword);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate, genrePrefix, firstKeyword);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void tagPredicateEquals() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new TagContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix tagPrefix \u003d PREFIX_TAG;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] firstKeyword \u003d {\"first\"};"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] secondKeyword \u003d {\"second\"};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate, tagPrefix, firstKeyword);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate, tagPrefix, secondKeyword);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate, tagPrefix, firstKeyword);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_nameZeroKeywords_noBookFound() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix namePrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\" \");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORD_NOT_UNDERSTOOD, \"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, namePrefix, keywords);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_nameMultipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"hunger flies enders\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix namePrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"hunger flies enders\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, namePrefix, keywords);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(Arrays.asList(THE_HUNGER_GAMES, LORD_OF_THE_FLIES, ENDERS_GAME), model.getFilteredBookList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_genreZeroKeywords_noBookFound() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        GenreContainsKeywordsPredicate predicate \u003d prepareGenrePredicate(\" \");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix genrePrefix \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\" \");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORD_NOT_UNDERSTOOD, \"\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, genrePrefix, keywords);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_genreMultipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        GenreContainsKeywordsPredicate predicate \u003d prepareGenrePredicate(\"thriller mystery\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix genrePrefix \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"thriller mystery\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, genrePrefix, keywords);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(LORD_OF_THE_FLIES, ENDERS_GAME), model.getFilteredBookList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_tagZeroKeywords_noBookFound() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d prepareTagPredicate(\" \");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix tagPrefix \u003d PREFIX_TAG;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\" \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORD_NOT_UNDERSTOOD, \"\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, tagPrefix, keywords);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_tagMultipleKeywords_multipleBooksFound() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d prepareTagPredicate(\"good bad\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix tagPrefix \u003d PREFIX_TAG;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"good bad\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, tagPrefix, keywords);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(HARRY_POTTER, TO_KILL_A_MOCKINGBIRD, CRIME_AND_PUNISHMENT),"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                model.getFilteredBookList());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_findCompletedBooks() { //findSuggestion will not be activated for finding CompletedBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookCompletedPredicate predicate \u003d prepareCompletedBooksPredicate();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix completedPrefix \u003d PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, completedPrefix, keywords);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(CRIME_AND_PUNISHMENT), model.getFilteredBookList());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_findNotCompletedBooks() { //findSuggestion will not be activated for finding NotCompletedBook"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_LISTED_OVERVIEW, 6);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookNotCompletedPredicate predicate \u003d prepareNotCompletedBooksPredicate();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix notCompletedPrefix \u003d PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, notCompletedPrefix, keywords);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(HARRY_POTTER, TO_KILL_A_MOCKINGBIRD, THE_HUNGER_GAMES, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ENDERS_GAME, ON_THE_ROAD), model.getFilteredBookList());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_findSuggestionCorrectPrefix() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Hbrry\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix namePrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"Hbrry\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORD_SUGGESTION, \"Hbrry\", \"Harry\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, namePrefix, keywords);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        expectedModel.updateFilteredBookList(predicate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredBookList());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void execute_findSuggestionInvalidPrefix() { //default on Stored NameWords"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Hbrry\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix invalidPrefix \u003d PREFIX_BOOKMARK; //invalid prefix for findSuggestion"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d prepareKeywords(\"Hbrry\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_WORD_SUGGESTION, \"Hbrry\", \"Harry\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate, invalidPrefix, keywords);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(WordStoreNotFoundException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code GenreContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private GenreContainsKeywordsPredicate prepareGenrePredicate(String userInput) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new GenreContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code GenreContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private TagContainsKeywordsPredicate prepareTagPredicate(String userInput) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new TagContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code BookCompletedPredicate}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private BookCompletedPredicate prepareCompletedBooksPredicate() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new BookCompletedPredicate();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code BookNotCompletedPredicate}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private BookNotCompletedPredicate prepareNotCompletedBooksPredicate() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new BookNotCompletedPredicate();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Parses {@code userInput} into a {@code String[]}."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private String[] prepareKeywords(String userInput) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] arr \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return arr;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "pennhanlee": 89,
      "TanLeYang": 16,
      "angrybunny123": 145
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/GoalCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Goal validGoal \u003d new Goal(\"501\", \"15-10-2024\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Goal overdueGoal \u003d new Goal(\"10 15-10-1999\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Goal lowPageGoal \u003d new Goal(\"51\", \"15-10-2024\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand command \u003d new GoalCommand(INDEX_FIRST_BOOK, validGoal);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookToSetGoal \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookWithGoal \u003d Book.setGoal(bookToSetGoal, validGoal);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String expectedMessage \u003d String.format(GoalCommand.MESSAGE_ADD_GOAL_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                bookToSetGoal.getName(), validGoal.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        expectedModel.setBook(bookToSetGoal, bookWithGoal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false, false,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void constructBook_defaultGoal_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal defGoal \u003d Goal.defaultGoal();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book newBook \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(defGoal.equals(newBook.getGoal()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_overdueDeadline_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand goalCommand \u003d new GoalCommand(INDEX_FIRST_BOOK, overdueGoal);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandFailure(goalCommand, model,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                String.format(GoalCommand.MESSAGE_DEADLINE_OVERDUE, overdueGoal.deadline));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand goalCommand \u003d new GoalCommand(outOfBoundIndex, validGoal);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandFailure(goalCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_invalidLowPage_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand goalCommand \u003d new GoalCommand(INDEX_FIRST_BOOK, lowPageGoal);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookToSetGoal \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandFailure(goalCommand, model, String.format(GoalCommand.MESSAGE_ALREADY_COMPLETED,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                bookToSetGoal.getPagesRead()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand goalFirstCommand \u003d new GoalCommand(INDEX_FIRST_BOOK, validGoal);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand goalSecondCommand \u003d new GoalCommand(INDEX_SECOND_BOOK, validGoal);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(goalFirstCommand.equals(goalFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand goalFirstCommandCopy \u003d new GoalCommand(INDEX_FIRST_BOOK, validGoal);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(goalFirstCommand.equals(goalFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(goalFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(goalFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(goalFirstCommand.equals(goalSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 96,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/GoalDelCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalDelCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Goal validGoal \u003d new Goal(\"10\", \"15-10-2024\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalDelCommand cmd \u003d new GoalDelCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // Establish: Expected model, expected CommandResult"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookToChange \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookChanged \u003d Book.setGoal(bookToChange, validGoal); // Make sure goal exists first"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        model.setBook(bookToChange, bookChanged); // Just to make sure lmao"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // Expected model stays default"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String expectedMsg \u003d String.format(GoalDelCommand.MESSAGE_SUCCESS, bookToChange.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMsg, false, false,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandSuccess(cmd, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_bookNoGoal_exception() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalDelCommand cmd \u003d new GoalDelCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookToChange \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandFailure(cmd, model, String.format(GoalDelCommand.MESSAGE_NO_GOAL, bookToChange.getName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_invalidIndex_exception() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalDelCommand goalDelCommand \u003d new GoalDelCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandFailure(goalDelCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalDelCommand cmd1 \u003d new GoalDelCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalDelCommand cmd2 \u003d new GoalDelCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalDelCommand cmd1Clone \u003d new GoalDelCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // True when same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(cmd1.equals(cmd1)); // short circuit"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // False with diff index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(cmd2.equals(cmd1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // True with same index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(cmd1.equals(cmd1Clone));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // False if diff type"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(cmd1.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // False if null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(cmd1.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 80,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.MOST_RECENTLY_USED);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "TanLeYang": 8
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.showBookAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        showBookAtIndex(model, INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 2,
      "-": 28,
      "TanLeYang": 9
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/RedoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo_nothingToRedo_throwsCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, RedoCommand.MESSAGE_NO_UNDONE_CHANGES);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void redo_validRedo_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedModel.addBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.addBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.undo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(RedoCommand.MESSAGE_SUCCESS, false , false,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.DEFAULT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 34
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_BOOKS_SORTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.CRIME_AND_PUNISHMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.ENDERS_GAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HAMLET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.LORD_OF_THE_FLIES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.ON_THE_ROAD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.THE_HUNGER_GAMES;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.TO_KILL_A_MOCKINGBIRD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookGenreComparator;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookNameComparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookPagesReadComparator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookReadingProgressComparator;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByName_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookNameComparator comparator \u003d prepareBookNameComparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_NAME.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(CRIME_AND_PUNISHMENT, ENDERS_GAME, HARRY_POTTER, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ON_THE_ROAD, THE_HUNGER_GAMES, TO_KILL_A_MOCKINGBIRD), model.getFilteredBookList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByGenre_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookGenreComparator comparator \u003d prepareBookGenreComparator();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_GENRE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_GENRE.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(CRIME_AND_PUNISHMENT, HARRY_POTTER, TO_KILL_A_MOCKINGBIRD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                THE_HUNGER_GAMES, LORD_OF_THE_FLIES, ENDERS_GAME, ON_THE_ROAD), model.getFilteredBookList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByPagesRead_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookPagesReadComparator comparator \u003d prepareBookPagesReadComparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_BOOKMARK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_BOOKMARK.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(THE_HUNGER_GAMES, ENDERS_GAME, ON_THE_ROAD, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                TO_KILL_A_MOCKINGBIRD, HARRY_POTTER, CRIME_AND_PUNISHMENT), model.getFilteredBookList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByReadingProgress_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookReadingProgressComparator comparator \u003d prepareBookReadingProgressComparator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_READING_PROGRESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_READING_PROGRESS.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(THE_HUNGER_GAMES, TO_KILL_A_MOCKINGBIRD, ENDERS_GAME, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ON_THE_ROAD, HARRY_POTTER, CRIME_AND_PUNISHMENT), model.getFilteredBookList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByNameThenAddBook_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookNameComparator comparator \u003d prepareBookNameComparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_NAME);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_NAME.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.addBook(HAMLET);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(CRIME_AND_PUNISHMENT, ENDERS_GAME, HAMLET, HARRY_POTTER, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ON_THE_ROAD, THE_HUNGER_GAMES, TO_KILL_A_MOCKINGBIRD), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByGenreThenAddBook_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookGenreComparator comparator \u003d prepareBookGenreComparator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_GENRE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_GENRE.toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.addBook(HAMLET);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(HAMLET, CRIME_AND_PUNISHMENT, HARRY_POTTER, TO_KILL_A_MOCKINGBIRD,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                THE_HUNGER_GAMES, LORD_OF_THE_FLIES, ENDERS_GAME, ON_THE_ROAD), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByPagesReadThenAddBook_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookPagesReadComparator comparator \u003d prepareBookPagesReadComparator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_BOOKMARK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_BOOKMARK.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.addBook(HAMLET);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(HAMLET, THE_HUNGER_GAMES, ENDERS_GAME, ON_THE_ROAD, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                TO_KILL_A_MOCKINGBIRD, HARRY_POTTER, CRIME_AND_PUNISHMENT), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void execute_sortByReadingProgressThenAddBook_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        BookReadingProgressComparator comparator \u003d prepareBookReadingProgressComparator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_BOOKS_SORTED + comparator.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d new SortCommand(comparator, PREFIX_READING_PROGRESS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.sortFilteredBookList(comparator);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.setSortingPreference(PREFIX_READING_PROGRESS.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        expectedModel.addBook(HAMLET);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(Arrays.asList(HAMLET, THE_HUNGER_GAMES, TO_KILL_A_MOCKINGBIRD, ENDERS_GAME, LORD_OF_THE_FLIES,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                ON_THE_ROAD, HARRY_POTTER, CRIME_AND_PUNISHMENT), expectedModel.getFilteredBookList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code BookNameComparator}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private BookNameComparator prepareBookNameComparator() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new BookNameComparator();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code BookGenreComparator}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private BookGenreComparator prepareBookGenreComparator() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new BookGenreComparator();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code BookPagesReadComparator}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private BookPagesReadComparator prepareBookPagesReadComparator() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new BookPagesReadComparator();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     * Parses {@code userInput} into a {@code BookReadingProgressComparator}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private BookReadingProgressComparator prepareBookReadingProgressComparator() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        return new BookReadingProgressComparator();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 166
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/UndoCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo_nothingToUndo_throwsCommandException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, UndoCommand.MESSAGE_MOST_RECENT_CHANGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo_validUndo_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.addBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(UndoCommand.MESSAGE_SUCCESS, false , false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.DEFAULT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 32
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/commands/ViewCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.ViewType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class ViewCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ViewCommand command \u003d new ViewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String expectedMessage \u003d String.format(ViewCommand.MESSAGE_SUCCESS, INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book bookToView \u003d model.getFilteredBookList().get(INDEX_FIRST_BOOK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        expectedModel.updateFilteredBookList(b -\u003e b.equals(bookToView));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        CommandResult expectedResult \u003d new CommandResult(expectedMessage, false , false,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                ViewType.DETAILED);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertCommandSuccess(command, model, expectedResult, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredBookList().size() + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ViewCommand viewCommand \u003d new ViewCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertCommandFailure(viewCommand, model, Messages.MESSAGE_INVALID_BOOK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ViewCommand viewFirstCommand \u003d new ViewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ViewCommand viewSecondCommand \u003d new ViewCommand(INDEX_SECOND_BOOK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        ViewCommand viewFirstCommandCopy \u003d new ViewCommand(INDEX_FIRST_BOOK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(viewFirstCommand.equals(viewFirstCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(viewFirstCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(viewFirstCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(viewFirstCommand.equals(viewSecondCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 65,
      "TanLeYang": 4
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_TOO_MANY_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.BOOKMARK_DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.GENRE_DESC_1984;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.GENRE_DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_BOOKMARK_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_GENRE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_TOTAL_PAGES_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NAME_DESC_1984;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NAME_DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TAG_DESC_BAD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TAG_DESC_GOOD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TOTAL_PAGES_DESC_1984;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TOTAL_PAGES_DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_JANE_EYRE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_BAD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TOTAL_PAGES_JANE_EYRE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.COMPULSORY_NINETEEN_EIGHTY_FOUR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(FULL_JANE_EYRE).withTags(VALID_TAG_GOOD).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                 + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE + BOOKMARK_DESC_JANE_EYRE, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // multiple names"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_1984 + NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                 + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE + BOOKMARK_DESC_JANE_EYRE, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // multiple genres"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JANE_EYRE + GENRE_DESC_1984 + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                 + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE + BOOKMARK_DESC_JANE_EYRE, new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book expectedBookMultipleTags \u003d new BookBuilder(FULL_JANE_EYRE).withTags(VALID_TAG_BAD, VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + TAG_DESC_BAD + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + BOOKMARK_DESC_JANE_EYRE, new AddCommand(expectedBookMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book expectedBook \u003d new BookBuilder(COMPULSORY_NINETEEN_EIGHTY_FOUR).withTags().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_1984 + GENRE_DESC_1984 + TOTAL_PAGES_DESC_1984,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                new AddCommand(expectedBook));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_JANE_EYRE + GENRE_DESC_JANE_EYRE + TOTAL_PAGES_DESC_JANE_EYRE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // missing genre prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JANE_EYRE + VALID_GENRE_JANE_EYRE + TOTAL_PAGES_DESC_JANE_EYRE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // missing total prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE + VALID_TOTAL_PAGES_JANE_EYRE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_JANE_EYRE + VALID_GENRE_JANE_EYRE + VALID_TOTAL_PAGES_JANE_EYRE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + TAG_DESC_BAD + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // invalid genre"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JANE_EYRE + INVALID_GENRE_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + TAG_DESC_BAD + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE, Genre.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_BAD + TOTAL_PAGES_DESC_JANE_EYRE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // too many tags"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int tagLimit \u003d Book.MAX_TAG_COUNT;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder userInput \u003d new StringBuilder(NAME_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                + GENRE_DESC_JANE_EYRE + TOTAL_PAGES_DESC_JANE_EYRE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d tagLimit + 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            userInput.append(String.format(\" %s %d \", PREFIX_TAG, i));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, userInput.toString(), String.format(MESSAGE_TOO_MANY_TAGS, tagLimit));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // invalid total pages"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + INVALID_TOTAL_PAGES_DESC, TotalPages.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // invalid bookmark"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                + TOTAL_PAGES_DESC_JANE_EYRE + INVALID_BOOKMARK_DESC, Bookmark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENRE_DESC_JANE_EYRE + TOTAL_PAGES_DESC_JANE_EYRE,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_JANE_EYRE + GENRE_DESC_JANE_EYRE"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                        + TAG_DESC_BAD + TAG_DESC_GOOD + TOTAL_PAGES_DESC_JANE_EYRE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "pennhanlee": 61,
      "TanLeYang": 29
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/AddNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_NOTE_TEXT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_NOTE_TITLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NAME_DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NOTE_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NOTE_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NOTE_TEXT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.AddNoteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class AddNoteCommandParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private AddNoteCommandParser parser \u003d new AddNoteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NAME_JANE_EYRE, VALID_NOTE_TEXT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_JANE_EYRE + NOTE_TEXT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        AddNoteCommand expectedNoteCommand \u003d new AddNoteCommand(targetIndex, expectedNote);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedNoteCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_NAME_JANE_EYRE + NOTE_TEXT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // missing text prefix"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_JANE_EYRE + VALID_NOTE_TEXT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // missing text field"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_JANE_EYRE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // missing title field"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\" + NOTE_TEXT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // invalid title which consists of a whitespace"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NOTE_TITLE + NOTE_TEXT, Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // invalid text which consists of a whitespace"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\" + NOTE_TITLE + INVALID_NOTE_TEXT, Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, NOTE_TITLE + NOTE_TEXT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddNoteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 66
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/CommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookNameComparator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class CommandParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final CommandParser parser \u003d new CommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(BookUtil.getAddCommand(book));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(new AddCommand(book), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_BOOK.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_BOOK), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder(book).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                + INDEX_FIRST_BOOK.getOneBased() + \" \" + BookUtil.getEditBookDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_BOOK, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d {\"foo\", \"bar\", \"baz\"};"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                FindCommand.COMMAND_WORD + \" n/ \" + keywordList.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywordList), PREFIX_NAME, keywords), command);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand command \u003d (SortCommand) parser.parseCommand(SortCommand.COMMAND_WORD + \" n/ \");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertEquals(new SortCommand(new BookNameComparator(), PREFIX_NAME), command);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 5,
      "-": 67,
      "pennhanlee": 4,
      "TanLeYang": 24,
      "angrybunny123": 10
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 2,
      "-": 25,
      "TanLeYang": 5
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/DeleteNoteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.logic.commands.DeleteNoteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class DeleteNoteCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private DeleteNoteCommandParser parser \u003d new DeleteNoteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetNoteIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + targetNoteIndex.getOneBased();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        DeleteNoteCommand expectedNoteCommand \u003d new DeleteNoteCommand(targetIndex, targetNoteIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedNoteCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // missing note index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // missing input"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteNoteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // non numerical index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"hi 1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // non numerical note index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertParseFailure(parser, \"1 hi\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 47
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_TOO_MANY_TAGS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.GENRE_DESC_1984;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.GENRE_DESC_JANE_EYRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_GENRE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.NAME_DESC_1984;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TAG_DESC_BAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.TAG_DESC_GOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_1984;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_JANE_EYRE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_1984;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_BAD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.EditBookDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"n/\" + VALID_NAME_1984, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_1984, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_1984, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENRE_DESC, Genre.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // too many tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        int tagLimit \u003d Book.MAX_TAG_COUNT;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder userInput \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d tagLimit + 1; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            userInput.append(String.format(\" %s %d \", PREFIX_TAG, i));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"1\" + userInput.toString(), String.format(MESSAGE_TOO_MANY_TAGS, tagLimit));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Book} being edited,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GOOD + TAG_DESC_BAD + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_GOOD + TAG_EMPTY + TAG_DESC_BAD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_GOOD + TAG_DESC_BAD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_GENRE_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_BAD"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                + GENRE_DESC_1984 + NAME_DESC_1984 + TAG_DESC_GOOD;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_1984)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(VALID_GENRE_1984)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withTags(VALID_TAG_GOOD, VALID_TAG_BAD).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENRE_DESC_1984;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditCommand.EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(VALID_GENRE_1984).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_1984;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withName(VALID_NAME_1984).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENRE_DESC_1984;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withGenre(VALID_GENRE_1984).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_BAD;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor \u003d new EditBookDescriptorBuilder().withTags(VALID_TAG_BAD).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENRE_DESC_1984"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                + TAG_DESC_GOOD + GENRE_DESC_1984 + TAG_DESC_GOOD"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                 + GENRE_DESC_JANE_EYRE + TAG_DESC_BAD;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(VALID_GENRE_JANE_EYRE).withTags(VALID_TAG_BAD, VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_BOOK;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        EditBookDescriptor descriptor \u003d new EditBookDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 8,
      "-": 101,
      "TanLeYang": 66,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.BookCompletedPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.BookNotCompletedPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.GenreContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validNameArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d {\"Alice\", \"Bob\"};"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix namePrefix \u003d PREFIX_NAME;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(keywordList), namePrefix, keywords);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" \" + \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"           \" + \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validGenreArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d {\"Fantasy\", \"Horror\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix genrePrefix \u003d PREFIX_GENRE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                new FindCommand(new GenreContainsKeywordsPredicate(keywordList), genrePrefix, keywords);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_GENRE + \" \" + \"Fantasy Horror\", expectedFindCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_GENRE + \"      \" + \" \\n Fantasy \\n \\t Horror  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validTagArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d {\"Happy\", \"Sad\"};"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix tagPrefix \u003d PREFIX_TAG;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                new FindCommand(new TagContainsKeywordsPredicate(keywordList), tagPrefix, keywords);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \" \" + \"Happy Sad\", expectedFindCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \"             \" + \" \\n Happy \\n \\t Sad  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validBookCompletedArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d {\"\"};"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix completedPrefix \u003d PREFIX_COMPLETED;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                new FindCommand(new BookCompletedPredicate(), completedPrefix, keywords);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COMPLETED, expectedFindCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validBookNotCompletedArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] keywords \u003d {\"\"};"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e keywordList \u003d Arrays.asList(keywords);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Prefix notCompletedPrefix \u003d PREFIX_NOT_COMPLETED;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                new FindCommand(new BookNotCompletedPredicate(), notCompletedPrefix, keywords);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NOT_COMPLETED, expectedFindCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "pennhanlee": 21,
      "TanLeYang": 5,
      "angrybunny123": 47
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/GoalCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String VALID_PAGE \u003d \" p/10\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String VALID_DEADLINE \u003d \" d/20-12-2040\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String INVALID_PAGE \u003d \" p/10b\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String INVALID_DEADLINE_FORMAT \u003d \" d/20-12-20240\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String VALID_GOAL_COMMAND \u003d \" p/10 d/20-12-2040\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private GoalCommandParser parser \u003d new GoalCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, VALID_PAGE + VALID_DEADLINE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // no deadline specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_PAGE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_DEADLINE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"-5\" + VALID_GOAL_COMMAND, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"0\" + VALID_GOAL_COMMAND, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_invalidPageDeadline_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1\" + VALID_PAGE + INVALID_DEADLINE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, Goal.MESSAGE_CONSTRAINTS)); // invalid deadline"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PAGE + VALID_DEADLINE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, Goal.MESSAGE_CONSTRAINTS)); // invalid page"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PAGE + INVALID_DEADLINE_FORMAT, // invalid page n deadline"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, Goal.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_validGoalCommand_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_BOOK;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + VALID_GOAL_COMMAND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        GoalCommand expectedCommand \u003d new GoalCommand(targetIndex, new Goal(\"10 20-12-2040\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 76
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/GoalDelCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.GoalDelCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalDelCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private GoalDelCommandParser parser \u003d new GoalDelCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_validArgs_returnsGoalDelCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseSuccess(parser, \"1\", new GoalDelCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalDelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 24
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String INVALID_NAME \u003d \"a\".repeat(Name.MAX_NAME_LENGTH + 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String INVALID_GENRE \u003d \"F@ACTS0nLY\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String INVALID_TOTAL_PAGES \u003d \"-500\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String INVALID_BOOKMARK \u003d \"-100\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String INVALID_NOTE_TITLE \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String INVALID_NOTE_TEXT \u003d \" \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String VALID_GENRE \u003d \"Fiction\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String VALID_TOTAL_PAGES \u003d \"500\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String VALID_BOOKMARK \u003d \"1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String VALID_NOTE_TITLE \u003d \"Hello!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final String VALID_NOTE_TEXT \u003d \"World!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(INDEX_FIRST_BOOK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseGenre_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGenre((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseGenre_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGenre(INVALID_GENRE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseGenre_validValueWithoutWhitespace_returnsGenre() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Genre expectedGenre \u003d new Genre(VALID_GENRE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedGenre, ParserUtil.parseGenre(VALID_GENRE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void parseGenre_validValueWithWhitespace_returnsTrimmedGenre() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_GENRE + WHITESPACE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Genre expectedGenre \u003d new Genre(VALID_GENRE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedGenre, ParserUtil.parseGenre(emailWithWhitespace));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseTotalPages_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTotalPages((String) null));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseTotalPages_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTotalPages(INVALID_TOTAL_PAGES));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseTotalPages_validValueWithoutWhitespace_returnsTotalPages() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TotalPages expectedTotalPages \u003d new TotalPages(VALID_TOTAL_PAGES);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(expectedTotalPages, ParserUtil.parseTotalPages(VALID_TOTAL_PAGES));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseTotalPages_validValueWithWhitespace_returnsTrimmedTotalPages() throws Exception {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String totalPagesWithWhitespace \u003d WHITESPACE + VALID_TOTAL_PAGES + WHITESPACE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        TotalPages expectedTotalPages \u003d new TotalPages(VALID_TOTAL_PAGES);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(expectedTotalPages, ParserUtil.parseTotalPages(totalPagesWithWhitespace));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseBookmark_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBookmark((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseBookmark_invalidValueNegativeValue_throwsParseException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBookmark(Optional.of(INVALID_BOOKMARK)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseBookmark_validValueWithoutWhitespace_returnsBookmark() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Bookmark expectedBookmark \u003d new Bookmark(VALID_BOOKMARK);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(expectedBookmark, ParserUtil.parseBookmark(Optional.of(VALID_BOOKMARK)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseBookmark_validValueWithWhitespace_returnsTrimmedBookmark() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String bookmarkWithWhitespace \u003d WHITESPACE + VALID_BOOKMARK + WHITESPACE;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Bookmark expectedBookmark \u003d new Bookmark(VALID_BOOKMARK);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(expectedBookmark, ParserUtil.parseBookmark(Optional.of(bookmarkWithWhitespace)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote(null, null));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseNote_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(INVALID_NOTE_TITLE, INVALID_NOTE_TEXT));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseNote_validValueWithoutWhitespace_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE_TITLE, VALID_NOTE_TEXT);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE_TITLE, VALID_NOTE_TEXT));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void parseNote_validValueWithWhitespace_returnsTrimmedNote() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String noteTitleWithWhitespace \u003d WHITESPACE + VALID_NOTE_TITLE + WHITESPACE;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String noteTextWithWhitespace \u003d WHITESPACE + VALID_NOTE_TEXT + WHITESPACE;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE_TITLE, VALID_NOTE_TEXT);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteTitleWithWhitespace, noteTextWithWhitespace));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 85,
      "-": 120,
      "pennhanlee": 1,
      "TanLeYang": 20
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_READING_PROGRESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookGenreComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookNameComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookPagesReadComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.comparators.BookReadingProgressComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validNamePrefixArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new SortCommand(new BookNameComparator(), PREFIX_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME, expectedSortCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // multiple whitespaces in command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \"           \", expectedSortCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validGenrePrefixArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new SortCommand(new BookGenreComparator(), PREFIX_GENRE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_GENRE, expectedSortCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // multiple whitespaces in command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_GENRE + \"      \", expectedSortCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validBookmarkPrefixArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new SortCommand(new BookPagesReadComparator(), PREFIX_BOOKMARK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_BOOKMARK, expectedSortCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // multiple whitespaces in command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_BOOKMARK + \"             \", expectedSortCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void parse_validReadingProgressPrefixArgs_returnsSortCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        SortCommand expectedSortCommand \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "                new SortCommand(new BookReadingProgressComparator(), PREFIX_READING_PROGRESS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_READING_PROGRESS, expectedSortCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // multiple whitespaces in command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_READING_PROGRESS + \"             \", expectedSortCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "angrybunny123": 71
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/logic/parser/ViewCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static seedu.bookmark.testutil.TypicalIndexes.INDEX_FIRST_BOOK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.logic.commands.ViewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class ViewCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private ViewCommandParser parser \u003d new ViewCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_validArgs_returnsViewCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseSuccess(parser, \"1\", new ViewCommand(INDEX_FIRST_BOOK));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 24
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/LibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class LibraryTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final Library library \u003d new Library();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(Collections.emptyList(), library.getBookList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library newData \u003d getTypicalLibrary();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(newData, library);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void resetData_withDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // Two books with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cBook\u003e newBooks \u003d Arrays.asList(HARRY_POTTER, editedHarryPotter);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LibraryStub newData \u003d new LibraryStub(newBooks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e library.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.hasBook(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_bookNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(library.hasBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_bookInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.addBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(library.hasBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_bookWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.addBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(library.hasBook(editedHarryPotter));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void getBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e library.getBookList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * A stub ReadOnlyAddressBook whose books list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static class LibraryStub implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        private final ObservableList\u003cBook\u003e books \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        LibraryStub(Collection\u003cBook\u003e books) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            this.books.setAll(books);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        public ObservableList\u003cBook\u003e getBookList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            return books;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "TanLeYang": 41
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.model.Model.PREDICATE_SHOW_ALL_BOOKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.TO_KILL_A_MOCKINGBIRD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.RedoException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.UndoException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.LibraryBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(new Library(), new Library(modelManager.getLibrary()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userPrefs.setBookmarkFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userPrefs.setBookmarkFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setBookmarkFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.setBookmarkFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(path, modelManager.getBookmarkFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasBook(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_bookNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(modelManager.hasBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void hasBook_bookInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.addBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(modelManager.hasBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void getFilteredBookList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredBookList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo_nothingToUndo_throwsUndoException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library library \u003d new LibraryBuilder().withBook(HARRY_POTTER).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(UndoException.class, modelManager::undo);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo_validUndo_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library library \u003d new LibraryBuilder().withBook(HARRY_POTTER).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.deleteBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.save();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(modelManager.hasBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void redo_nothingToRedo_throwsRedoException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library library \u003d new LibraryBuilder().withBook(HARRY_POTTER).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(RedoException.class, modelManager::redo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undoThenRedo_validUndoRedo_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library library \u003d new LibraryBuilder().withBook(HARRY_POTTER).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.deleteBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.save();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.undo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.redo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(modelManager.hasBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library library \u003d new LibraryBuilder().withBook(HARRY_POTTER).withBook(TO_KILL_A_MOCKINGBIRD).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library differentLibrary \u003d new Library();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentLibrary, userPrefs)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String[] keywords \u003d HARRY_POTTER.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.updateFilteredBookList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(library, userPrefs)));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        modelManager.updateFilteredBookList(PREDICATE_SHOW_ALL_BOOKS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        differentUserPrefs.setBookmarkFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(library, differentUserPrefs)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "TanLeYang": 74,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setBookmarkFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    public void setSortingPreferences_nullSortingPreferences_throwsAssertionError() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e userPrefs.setSortingPreference(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "TanLeYang": 3,
      "angrybunny123": 4
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/WordBankTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.Word;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.WordStore;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.testutil.TypicalWords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordBankTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private WordBank wordBank \u003d TypicalWords.getEmptyWordBank();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //-------------------- initWordBank() ------------------------//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void initWordBank_nullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.initWordBank(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void initWordBank_validLibrary() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Library testLibrary \u003d new Library();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book testBook \u003d TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        testLibrary.addBook(testBook);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.initWordBank(testLibrary);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d testBook.getName().fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookGenre \u003d testBook.getGenre().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d bookGenre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d testBook.getTags();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore nameStore \u003d wordBank.getWordStore(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore genreStore \u003d wordBank.getWordStore(PREFIX_GENRE.getPrefix());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore tagStore \u003d wordBank.getWordStore(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(tagStore.contains(tag));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //------------------- resetWordBank() ------------------------//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void resetWordBank_nullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.resetWordBank(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void resetWordBank_validLibrary() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Library oldLibrary \u003d new Library();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Library newLibrary \u003d new Library();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book oldBook \u003d TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book newBook \u003d TypicalBooks.FULL_NINETEEN_EIGHTY_FOUR;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        oldLibrary.addBook(oldBook);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        newLibrary.addBook(newBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.initWordBank(oldLibrary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.resetWordBank(newLibrary);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d newBook.getName().fullName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookGenre \u003d newBook.getGenre().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d bookGenre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d newBook.getTags();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore nameStore \u003d wordBank.getWordStore(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore genreStore \u003d wordBank.getWordStore(PREFIX_GENRE.getPrefix());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore tagStore \u003d wordBank.getWordStore(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(tagStore.contains(tag));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //--------------------- handleNewBook() -----------------------//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void handleNew_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.handleNewBook(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void handle_newBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book book \u003d TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.handleNewBook(book);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d book.getName().fullName;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookGenre \u003d book.getGenre().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d bookGenre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d book.getTags();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore nameStore \u003d wordBank.getWordStore(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore genreStore \u003d wordBank.getWordStore(PREFIX_GENRE.getPrefix());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore tagStore \u003d wordBank.getWordStore(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(tagStore.contains(tag));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //--------------------- handleOldBook() -----------------------//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void handleOld_nullBook_throwsNullPointerExcepition() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordBank.handleOldBook(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void handle_oldBook() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book book \u003d TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.handleNewBook(book);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d book.getName().fullName;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookGenre \u003d book.getGenre().value;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d bookGenre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d book.getTags();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.handleOldBook(book);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore nameStore \u003d wordBank.getWordStore(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore genreStore \u003d wordBank.getWordStore(PREFIX_GENRE.getPrefix());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore tagStore \u003d wordBank.getWordStore(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertFalse(nameStore.contains(name));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertFalse(genreStore.contains(genre));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertFalse(tagStore.contains(tag));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //------------------- updateWordBank() ----------------------//"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void updateWordBank() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book originalBook \u003d TypicalBooks.COMPULSORY_JANE_EYRE; // Have: Name, Genre, Do not have: Tags"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book editedBook \u003d TypicalBooks.FULL_JANE_EYRE; // Have: Name, Genre, Tags"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d editedBook.getName().fullName;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookGenre \u003d editedBook.getGenre().value;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d bookGenre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d editedBook.getTags();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore nameStore \u003d wordBank.getWordStore(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore genreStore \u003d wordBank.getWordStore(PREFIX_GENRE.getPrefix());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore tagStore \u003d wordBank.getWordStore(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.addToWordBank(originalBook);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertFalse(tagStore.contains(tag));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.updateWordBank(originalBook, editedBook); //Tags should now be present."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(tagStore.contains(tag));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void update_wordBank_checkWordCount() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book originalBook \u003d TypicalBooks.COMPULSORY_JANE_EYRE; // Have: Name, Genre, Do not have: Tags"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Book editedBook \u003d TypicalBooks.FULL_JANE_EYRE; // Have: Name, Genre, Tags"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookName \u003d editedBook.getName().fullName;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] nameSplit \u003d bookName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e nameWords \u003d Arrays.asList(nameSplit);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String bookGenre \u003d editedBook.getGenre().value;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String[] genreSplit \u003d bookGenre.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e genreWords \u003d Arrays.asList(genreSplit);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Set\u003cTag\u003e tags \u003d editedBook.getTags();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e tagWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Tag tag : tags) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            tagWords.add(tag.getTagName());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore nameStore \u003d wordBank.getWordStore(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore genreStore \u003d wordBank.getWordStore(PREFIX_GENRE.getPrefix());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        WordStore tagStore \u003d wordBank.getWordStore(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.addToWordBank(originalBook);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d nameStore.getWord(name);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, targetWord.getCount());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d genreStore.getWord(genre);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, targetWord.getCount());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertFalse(tagStore.contains(tag));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordBank.updateWordBank(originalBook, editedBook); //Tags should now be present."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        //Since oldbook \u0026 newbook have the same name and genre,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        //oldbook removed \u0026 newbook added \u003d\u003d name \u0026 genre count \u003d 1"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        //tag was newly added so tag count \u003d 1."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String name : nameWords) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(nameStore.contains(name));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d nameStore.getWord(name);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, targetWord.getCount());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String genre : genreWords) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(genreStore.contains(genre));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d genreStore.getWord(genre);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, targetWord.getCount());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String tag : tagWords) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(tagStore.contains(tag));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d tagStore.getWord(tag);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, targetWord.getCount());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 312
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/BookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_BOOKMARK_1984;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_1984;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_1984;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_BAD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TOTAL_PAGES_1984;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book book \u003d new BookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e book.getTags().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void isSameBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(HARRY_POTTER.isSameBook(HARRY_POTTER));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different name and genre -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(HARRY_POTTER.isSameBook(FULL_JANE_EYRE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withName(VALID_NAME_1984).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.isSameBook(editedHarryPotter));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different genre -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withGenre(VALID_GENRE_1984).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.isSameBook(editedHarryPotter));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different total pages -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTotalPages(VALID_TOTAL_PAGES_1984).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(HARRY_POTTER.isSameBook(editedHarryPotter));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different bookmarks -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withBookmark(VALID_BOOKMARK_1984).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(HARRY_POTTER.isSameBook(editedHarryPotter));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same values, different tags -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTags(VALID_TAG_BAD).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(HARRY_POTTER.isSameBook(editedHarryPotter));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.isSameBook(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void getFieldValues_validFields_correctValues() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String totalPages \u003d \"1500\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final String bookmark \u003d \"50\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final int totalPagesValue \u003d 1500;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        final int bookmarkValue \u003d 50;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book testBook \u003d new BookBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withName(\"TEST\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(\"FICTION\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withTotalPages(totalPages)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withBookmark(bookmark)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        testBook \u003d Book.setGoal(testBook, new Goal(\"5 15/12/2024\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(testBook.hasStartedReading());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(testBook.hasGoal());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals((bookmarkValue), testBook.getPagesRead());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals((totalPagesValue), testBook.getTotalPagesNumber());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book harryPotterCopy \u003d new BookBuilder(HARRY_POTTER).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(HARRY_POTTER.equals(harryPotterCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(HARRY_POTTER.equals(HARRY_POTTER));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(5));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(FULL_JANE_EYRE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withName(VALID_NAME_JANE_EYRE).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(editedHarryPotter));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different genre -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withGenre(VALID_GENRE_1984).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(editedHarryPotter));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different total pages -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTotalPages(VALID_TOTAL_PAGES_1984).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(editedHarryPotter));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different bookmark -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withBookmark(VALID_BOOKMARK_1984).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(editedHarryPotter));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTags(VALID_TAG_BAD).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(editedHarryPotter));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 3,
      "-": 34,
      "pennhanlee": 6,
      "TanLeYang": 77
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/BookmarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Hybrid tests for Bookmark, depends on {@code TotalPages}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookmarkTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final TotalPages VALID_TOTAL_PAGES \u003d new TotalPages(\"1234\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_default_pageZeroBookmark() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Bookmark bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(bookmark.value, \"0\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // bookmarked page null"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Bookmark(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_invalidBookmarkPage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String invalidBookmarkPage \u003d \"-1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Bookmark(invalidBookmarkPage));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void isValidBookmark() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // null bookmark page"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Bookmark.isValidBookmark(null, VALID_TOTAL_PAGES));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // blank bookmark page"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(Bookmark.isValidBookmark(\"\")); // empty string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(Bookmark.isValidBookmark(\" \")); // spaces only"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // invalid bookmark page"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(Bookmark.isValidBookmark(\"@@@\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // bookmarked page \u003e total pages"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(Bookmark.isValidBookmark(new Bookmark(\"12345\"), VALID_TOTAL_PAGES));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // valid bookmarks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(Bookmark.isValidBookmark(new Bookmark(\"123\"), VALID_TOTAL_PAGES));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(Bookmark.isValidBookmark(new Bookmark(\"0\"), VALID_TOTAL_PAGES)); // pg 0 explicitly stated"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(Bookmark.isValidBookmark(new Bookmark(\"000001\"), VALID_TOTAL_PAGES)); // leading zeroes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 9,
      "TanLeYang": 47
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/GenreTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class GenreTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Genre(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_invalidGenre_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String invalidGenre \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Genre(invalidGenre));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_tooLongGenre_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String tooLong \u003d \"a\".repeat(Genre.MAX_GENRE_LENGTH + 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Genre(tooLong));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void isValidGenre() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // null genre"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Genre.isValidGenre(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // blank genre"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(Genre.isValidGenre(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(Genre.isValidGenre(\" \")); // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // invalid genre"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(Genre.isValidGenre(\"f1ct10nXDXD@@@@\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(Genre.isValidGenre(\"a\".repeat(Genre.MAX_GENRE_LENGTH + 1))); // 1 char too long"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // valid genre"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(Genre.isValidGenre(\"Horror 1\")); // alphanumeric"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(Genre.isValidGenre(\"Horror\")); // First letter capitalized"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(Genre.isValidGenre(\"horror\")); // all lower caps"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(Genre.isValidGenre(\"HORROR\")); // all caps"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(Genre.isValidGenre(\"non fiction\")); // multiple words"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 2,
      "TanLeYang": 48
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/GoalTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "public class GoalTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String BEFORE_NOW \u003d \"10-10-1999\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String VALID_PAGE \u003d \"8\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public static final String AFTER_NOW \u003d \"10-10-2021\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void test_isSameGoal() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal g1 \u003d new Goal(\"10\", \"15-10-2021\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal g2 \u003d new Goal(\"10\", \"15-10-2021\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal g3 \u003d Goal.defaultGoal();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(g1.equals(g1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(g1.equals(g2));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(g2.equals(g1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(g2.equals(g2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(g1.equals(g3));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(g2.equals(g3));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void test_overdueDeadline() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal gOverdue \u003d new Goal(VALID_PAGE, BEFORE_NOW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Goal gNotDue \u003d new Goal(VALID_PAGE, AFTER_NOW);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book overdueBook \u003d Book.setGoal(new BookBuilder().build(), gOverdue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        Book notDueBook \u003d Book.setGoal(new BookBuilder().build(), gNotDue);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(overdueBook.getGoal().isOverdue());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(notDueBook.getGoal().isOverdue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void test_validGoalDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String validDate \u003d \"20-10-2024\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String invalidDate \u003d \"38-10-2024\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String invalidMonth \u003d \"20-13-2024\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String invalidYear \u003d \"20-11-1\"; // Year invalid format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String invalidSeparator \u003d \"20/10/2024\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String dateNull \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String validPage \u003d \"10\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(validDate.matches(Goal.DEADLINE_REGEX));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(Goal.isValidGoal(validPage, validDate));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(validPage, invalidDate));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(validPage, invalidYear));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(validPage, invalidMonth));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(validPage, invalidSeparator));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(validPage, dateNull));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    public void test_validGoalPage() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String validDate \u003d \"20-10-2024\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String validPage \u003d \"10\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String invalidPageLetter \u003d \"10b\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        String pageNull \u003d \"\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(validDate.matches(Goal.DEADLINE_REGEX));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertTrue(Goal.isValidGoal(validPage, validDate));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(invalidPageLetter, validDate));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        assertFalse(Goal.isValidGoal(pageNull, validDate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 71
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "import seedu.bookmark.model.book.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        // different book -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(predicate.test(new BookBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                .withGenre(\"Fiction\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "TanLeYang": 10,
      "angrybunny123": 2
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_tooLongName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String tooLong \u003d \"a\".repeat(Name.MAX_NAME_LENGTH + 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(tooLong));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(Name.isValidName(\"a\".repeat(Name.MAX_NAME_LENGTH + 1))); // 1 char too long"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "pennhanlee": 1,
      "TanLeYang": 11
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/NoteTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Note(\"Hello\", null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Note(null, \"Hello\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new Note(null, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Note(invalidTitle, \"Valid Text.\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void constructor_invalidText_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        String invalidText \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Note(\"Valid Title.\", invalidText));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public void isValidNote() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // null text"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isValidNote(\"Hello\", null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isValidNote(null, \"Hello\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // null title and text"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Note.isValidNote(null, null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(Note.isValidNote(\"\", \"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertFalse(Note.isValidNote(\" \", \" \")); // spaces only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        // valid note"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"peter jack\", \"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"12345\", \"12345\")); // numbers only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"peter the 2nd\", \"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"Capital Tan\", \"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"David Roger Jackson Ray Jr 2nd\", \"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"^\", \"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        assertTrue(Note.isValidNote(\"peter*\", \"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 52
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/TotalPagesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TotalPagesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TotalPages(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_nonNumericalTotalPages_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String invalidTotalPages \u003d \"total pages\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TotalPages(invalidTotalPages));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_negativeTotalPages_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String invalidTotalPages \u003d \"-1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TotalPages(invalidTotalPages));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_tooManyDigits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        StringBuilder tooLong \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // tooLong is one character too long"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tooLong.append(\"1\".repeat(TotalPages.MAX_TOTAL_PAGES_LENGTH + 2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TotalPages(tooLong.toString()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void isValidTotalPages() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // null total pages"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TotalPages.isValidTotalPages(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // total pages \u003d 0"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(TotalPages.isValidTotalPages(\"0\")); // 0 is invalid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // blank total pages"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(TotalPages.isValidTotalPages(\"\")); // empty string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(TotalPages.isValidTotalPages(\" \")); // spaces only"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // non-numerical total pages"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(TotalPages.isValidTotalPages(\"abc\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // negative value total pages"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(TotalPages.isValidTotalPages(\"-123\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // too many digits total pages"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String tooLong \u003d \"1\".repeat(TotalPages.MAX_TOTAL_PAGES_LENGTH + 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TotalPages(tooLong));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // valid total pages"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(TotalPages.isValidTotalPages(\"123\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(TotalPages.isValidTotalPages(\"001234\")); // leading zeroes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 64
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/book/UniqueBookListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.book;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.FULL_JANE_EYRE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.exceptions.BookNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.exceptions.DuplicateBookException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.BookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class UniqueBookListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private final UniqueBookList uniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void contains_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void contains_bookNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(uniqueBookList.contains(HARRY_POTTER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void contains_bookInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(uniqueBookList.contains(HARRY_POTTER));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void contains_bookWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertTrue(uniqueBookList.contains(editedHarryPotter));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void add_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void add_duplicateBook_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.add(HARRY_POTTER));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_nullTargetBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(null, HARRY_POTTER));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_nullEditedBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBook(HARRY_POTTER, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_targetBookNotInList_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.setBook(HARRY_POTTER, HARRY_POTTER));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_editedBookIsSameBook_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.setBook(HARRY_POTTER, HARRY_POTTER);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedUniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_editedBookHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Book editedHarryPotter \u003d new BookBuilder(HARRY_POTTER).withTags(VALID_TAG_GOOD)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.setBook(HARRY_POTTER, editedHarryPotter);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        expectedUniqueBookList.add(editedHarryPotter);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_editedBookHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        uniqueBookList.setBook(HARRY_POTTER, FULL_JANE_EYRE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        expectedUniqueBookList.add(FULL_JANE_EYRE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBook_editedBookHasNonUniqueIdentity_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        uniqueBookList.add(FULL_JANE_EYRE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBook(HARRY_POTTER, FULL_JANE_EYRE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void remove_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void remove_bookDoesNotExist_throwsBookNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(BookNotFoundException.class, () -\u003e uniqueBookList.remove(HARRY_POTTER));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void remove_existingBook_removesBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.remove(HARRY_POTTER);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks_nullUniqueBookList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((UniqueBookList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks_uniqueBookList_replacesOwnListWithProvidedUniqueBookList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        expectedUniqueBookList.add(FULL_JANE_EYRE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.setBooks(expectedUniqueBookList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueBookList.setBooks((List\u003cBook\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.add(HARRY_POTTER);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cBook\u003e bookList \u003d Collections.singletonList(FULL_JANE_EYRE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        uniqueBookList.setBooks(bookList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UniqueBookList expectedUniqueBookList \u003d new UniqueBookList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        expectedUniqueBookList.add(FULL_JANE_EYRE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(expectedUniqueBookList, uniqueBookList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void setBooks_listWithDuplicateBooks_throwsDuplicateBookException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        List\u003cBook\u003e listWithDuplicateBooks \u003d Arrays.asList(HARRY_POTTER, HARRY_POTTER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(DuplicateBookException.class, () -\u003e uniqueBookList.setBooks(listWithDuplicateBooks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            -\u003e uniqueBookList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "pennhanlee": 10,
      "TanLeYang": 75
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/history/HistoryManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.RedoException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.exceptions.UndoException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Integration tests with {@code State}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class HistoryManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Library DEFAULT_LIBRARY \u003d TypicalBooks.getTypicalLibrary();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Book TO_ADD \u003d TypicalBooks.HAMLET;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final UserPrefs DEFAULT_USER_PREFS \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Predicate\u003cBook\u003e DEFAULT_PREDICATE \u003d (b) -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final State DEFAULT_STATE \u003d State.createState(DEFAULT_LIBRARY,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library editedLibrary \u003d new Library(DEFAULT_LIBRARY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedLibrary.addBook(TO_ADD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newState \u003d State.createState(editedLibrary, DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyA \u003d new HistoryManager(DEFAULT_STATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyB \u003d new HistoryManager(DEFAULT_STATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyC \u003d new HistoryManager(newState);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(historyA, historyA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same current state, same undo and redo deque"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(historyA, historyB);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // different current state"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(historyA, historyC);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same current state, different undo deque"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.addNewState(newState);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(historyA, historyC);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same current state, different redo deque"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.undo();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(historyA, historyB);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void changeThenUndo_validActions_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library editedLibrary \u003d new Library(DEFAULT_LIBRARY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedLibrary.addBook(TO_ADD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newState \u003d State.createState(editedLibrary, DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyA \u003d new HistoryManager(DEFAULT_STATE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.addNewState(newState);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.undo();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(historyA.getCurrentState(), DEFAULT_STATE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void changeThenUndoThenRedo_validActions_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library editedLibrary \u003d new Library(DEFAULT_LIBRARY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedLibrary.addBook(TO_ADD);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State newState \u003d State.createState(editedLibrary, DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyA \u003d new HistoryManager(DEFAULT_STATE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.addNewState(newState);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.undo();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        historyA \u003d historyA.redo();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(historyA.getCurrentState(), newState);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void undo_noUndoAvailable_throwsException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyA \u003d new HistoryManager(DEFAULT_STATE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(UndoException.class, historyA::undo);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void redo_noRedoAvailable_throwsException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        HistoryManager historyA \u003d new HistoryManager(DEFAULT_STATE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(RedoException.class, historyA::redo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 98
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/history/StateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * Hybrid tests with {@code Library}, and {@code UserPrefs}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class StateTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Library DEFAULT_LIBRARY \u003d TypicalBooks.getTypicalLibrary();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Book TO_ADD \u003d TypicalBooks.HAMLET;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final UserPrefs DEFAULT_USER_PREFS \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Predicate\u003cBook\u003e DEFAULT_PREDICATE \u003d (b) -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final State DEFAULT_STATE \u003d State.createState(DEFAULT_LIBRARY,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void equalsTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State state \u003d State.createState(DEFAULT_LIBRARY, DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library editedLibrary \u003d new Library(DEFAULT_LIBRARY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedLibrary.addBook(TO_ADD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        UserPrefs editedUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedUserPrefs.setBookmarkFilePath(Paths.get(\"data\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        State editedState \u003d State.createState(editedLibrary, DEFAULT_USER_PREFS, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(DEFAULT_STATE, DEFAULT_STATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // same library, user prefs and predicate"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(state, DEFAULT_STATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // diff library"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(DEFAULT_STATE, editedState);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // diff user prefs"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedState \u003d State.createState(DEFAULT_LIBRARY, editedUserPrefs, DEFAULT_PREDICATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(DEFAULT_STATE, editedState);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // diff predicate"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        editedState \u003d State.createState(DEFAULT_LIBRARY, DEFAULT_USER_PREFS, (b) -\u003e false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotEquals(DEFAULT_STATE, editedState);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "TanLeYang": 57
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void constructor_tooLogTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String tooLong \u003d \"a\".repeat(Tag.MAX_TAG_LENGTH + 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(tooLong));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        // 1 char too long tag name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"a\".repeat(Tag.MAX_TAG_LENGTH + 1)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "TanLeYang": 13
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/wordstore/WordComparatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.PriorityQueue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordComparatorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word APPLE \u003d new Word(\"Apple\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word BANANA \u003d new Word(\"Banana\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word CHERRY \u003d new Word(\"Cherry\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word DURIAN \u003d new Word(\"Durian\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word ELDERBERRY \u003d new Word(\"Elderberry\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word FOO \u003d new Word(\"Foo\", 1);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word BOO \u003d new Word(\"Boo\", 2);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final Word POO \u003d new Word(\"Poo\", 3);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final PriorityQueue\u003cWord\u003e differentDistancePQ \u003d new PriorityQueue\u003c\u003e(new WordComparator());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final PriorityQueue\u003cWord\u003e differentWordsPQ \u003d new PriorityQueue\u003c\u003e(new WordComparator());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void compareWord_byDistance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentDistancePQ.add(FOO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentDistancePQ.add(BOO);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentDistancePQ.add(POO);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word word \u003d differentDistancePQ.poll();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, FOO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        word \u003d differentDistancePQ.poll();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, BOO);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        word \u003d differentDistancePQ.poll();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, POO);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void compareWord_byWord() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentWordsPQ.add(CHERRY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentWordsPQ.add(DURIAN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentWordsPQ.add(APPLE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentWordsPQ.add(BANANA);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        differentWordsPQ.add(ELDERBERRY);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word word \u003d differentWordsPQ.poll();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, APPLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        word \u003d differentWordsPQ.poll();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, BANANA);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        word \u003d differentWordsPQ.poll();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, CHERRY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        word \u003d differentWordsPQ.poll();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, DURIAN);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        word \u003d differentWordsPQ.poll();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(word, ELDERBERRY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 55
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/wordstore/WordStoreTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.CHAMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.CORRECT_HARRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.HARRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.exceptions.WordNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.testutil.TypicalWords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordStoreTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private WordStore wordStore \u003d new WordStore();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //------------------- contains() ------------------------------//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void contains_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordStore.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void contains_wordNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(wordStore.contains(HARRY));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void contains_wordInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String harry \u003d CORRECT_HARRY.getWord();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(wordStore.contains(harry));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //--------------------- wordAdder() ---------------------------//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void add_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordStore.wordAdder(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void add_newWord_countOne() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word harry \u003d wordStore.getWord(HARRY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, harry.getCount());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void add_existingWord_increaseCount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word harry \u003d wordStore.getWord(HARRY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(2, harry.getCount());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //-------------------- wordDeleter() -------------------------//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void delete_nullBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wordStore.wordDeleter(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void delete_bookDoesNotExist() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertThrows(WordNotFoundException.class, () -\u003e wordStore.wordDeleter(CHAMBER));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void delete_existingWord_countZero() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordDeleter(HARRY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(wordStore.contains(HARRY));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void delete_existingBook_countNonZero() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordAdder(HARRY); //increase count to 2"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.wordDeleter(HARRY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word harry \u003d wordStore.getWord(HARRY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(1, harry.getCount());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //--------------------- addWords() ---------------------------//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void addWords() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e listOfWords \u003d TypicalWords.getTypicalStrings();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String word : listOfWords) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(wordStore.contains(word));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void add_existingWords() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e listOfWords \u003d TypicalWords.getTypicalStrings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String word : listOfWords) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(wordStore.contains(word));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d wordStore.getWord(word);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(2, targetWord.getCount());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //---------------------- deleteWords() -----------------------//"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void deleteWords_countOne() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e listOfWords \u003d TypicalWords.getTypicalStrings();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.deleteWords(listOfWords);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String word : listOfWords) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertFalse(wordStore.contains(word));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void deleteWords_countBiggerThanOne() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e listOfWords \u003d TypicalWords.getTypicalStrings();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.deleteWords(listOfWords);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (String word : listOfWords) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertTrue(wordStore.contains(word));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            Word targetWord \u003d wordStore.getWord(word);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(1, targetWord.getCount());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //---------------------- getWordStore() ------------------------//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void getWordStore() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cString\u003e listOfWords \u003d TypicalWords.getTypicalStrings();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        List\u003cWord\u003e listOfWordObjs \u003d TypicalWords.getTypicalWords();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        wordStore.addWords(listOfWords);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Word word : listOfWordObjs) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            assertEquals(word, wordStore.getWord(word.getWord()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 152
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/model/wordstore/WordTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.model.wordstore;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.CORRECT_AND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.CORRECT_CHAMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.CORRECT_HARRY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.HARRY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.testutil.TypicalWords.MISSPELT_HARRY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class WordTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void getFieldValues_validFields_distanceSet() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word validWordWithDistance \u003d new Word(\"Word\", 4);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final String word \u003d \"Word\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final int count \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final int distance \u003d 4;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWordWithDistance.getWord(), word);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWordWithDistance.getCount(), count);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWordWithDistance.getDistance(), distance);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void getFieldValues_validFields_noDistanceSet() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word validWord \u003d new Word(\"Word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final String word \u003d \"Word\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final int count \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        final int distance \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWord.getWord(), word);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWord.getCount(), count);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWord.getDistance(), distance);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void addCount() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word validWord \u003d new Word(\"Word\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        counter++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        validWord.addCount();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWord.getCount(), counter);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void minusCount() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word validWord \u003d new Word(\"Word\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        counter--;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        validWord.minusCount();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWord.getCount(), counter);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void setDistance() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word validWord \u003d new Word(\"Word\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        int distance \u003d 3;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        validWord.setDistance(3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(validWord.getDistance(), distance);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void isSameWord() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(CORRECT_HARRY.isSameWord(CORRECT_HARRY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.isSameWord(CORRECT_AND));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // same word with typo -\u003e return false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word misspeltHarry \u003d new Word(MISSPELT_HARRY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.isSameWord(misspeltHarry));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // same word with different distance -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word distanceHarry \u003d new Word(HARRY, 3);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(CORRECT_HARRY.isSameWord(distanceHarry));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // same word with different count -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String harry \u003d CORRECT_HARRY.getWord();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word countChangedHarry \u003d new Word(harry);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        countChangedHarry.addCount();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(CORRECT_HARRY.isSameWord(countChangedHarry));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different word with same count -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String chamber \u003d CORRECT_CHAMBER.getWord();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word wordChamber \u003d new Word(chamber);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertEquals(wordChamber.getCount(), CORRECT_HARRY.getCount());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(wordChamber.isSameWord(CORRECT_HARRY));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(HARRY_POTTER.isSameBook(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertTrue(CORRECT_HARRY.equals(CORRECT_HARRY));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different word -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.equals(CORRECT_AND));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // same word with typo -\u003e return false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word misspeltHarry \u003d new Word(MISSPELT_HARRY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.equals(misspeltHarry));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different distance -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word distanceHarry \u003d new Word(HARRY, 3);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.equals(distanceHarry));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different count -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        String harry \u003d CORRECT_HARRY.getWord();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Word countChangedHarry \u003d new Word(harry);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        countChangedHarry.addCount();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.equals(countChangedHarry));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(CORRECT_HARRY.equals(\"harry\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        assertFalse(HARRY_POTTER.equals(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 126
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/storage/JsonAdaptedBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.storage.JsonAdaptedBook.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.TO_KILL_A_MOCKINGBIRD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class JsonAdaptedBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private static final String INVALID_NAME \u003d \"a\".repeat(Name.MAX_NAME_LENGTH + 1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String INVALID_GENRE \u003d \"F@ACTS0nLY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String VALID_NAME \u003d TO_KILL_A_MOCKINGBIRD.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String VALID_GENRE \u003d TO_KILL_A_MOCKINGBIRD.getGenre().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TO_KILL_A_MOCKINGBIRD.getTags().stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String VALID_TOTAL_PAGES \u003d \"190\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final String VALID_BOOKMARK \u003d \"120\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private static final String VALID_GOAL \u003d \"20 10-11-2029\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private static final List\u003cJsonAdaptedNote\u003e VALID_NOTES \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            TO_KILL_A_MOCKINGBIRD.getNotes().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    .map(note -\u003e new JsonAdaptedNote(note.title, note.text))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void toModelType_validBookDetails_returnsBook() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(TO_KILL_A_MOCKINGBIRD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(TO_KILL_A_MOCKINGBIRD, book.toModelType());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new JsonAdaptedBook(INVALID_NAME, VALID_GENRE, VALID_TAGS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                        VALID_TOTAL_PAGES, VALID_BOOKMARK, VALID_GOAL, VALID_NOTES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(null, VALID_GENRE, VALID_TAGS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                VALID_TOTAL_PAGES, VALID_BOOKMARK, VALID_GOAL, VALID_NOTES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void toModelType_invalidGenre_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, INVALID_GENRE, VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                        VALID_TOTAL_PAGES, VALID_BOOKMARK, VALID_GOAL, VALID_NOTES);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String expectedMessage \u003d Genre.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void toModelType_nullGenre_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonAdaptedBook book \u003d new JsonAdaptedBook(VALID_NAME, null, VALID_TAGS, VALID_TOTAL_PAGES,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                VALID_BOOKMARK, VALID_GOAL, VALID_NOTES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Genre.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, book::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonAdaptedBook book \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                new JsonAdaptedBook(VALID_NAME, VALID_GENRE, invalidTags,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "                        VALID_TOTAL_PAGES, VALID_BOOKMARK, VALID_GOAL, VALID_NOTES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalValueException.class, book::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 7,
      "pangpuncake": 6,
      "-": 40,
      "pennhanlee": 1,
      "TanLeYang": 31
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/storage/JsonLibraryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HAMLET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.HARRY_POTTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.THE_FAULT_IN_OUR_STARS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class JsonLibraryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonLibraryStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void readLibrary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readLibrary(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLibrary\u003e readLibrary(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new JsonLibraryStorage(Paths.get(filePath)).readLibrary(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertFalse(readLibrary(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"notJsonFormatLibrary.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void readLibrary_invalidBookLibrary_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"invalidBookLibrary.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void readLibrary_invalidAndValidBookLibrary_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readLibrary(\"invalidAndValidBookLibrary.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void readAndSaveLibrary_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempLibrary.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library original \u003d getTypicalLibrary();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonLibraryStorage jsonLibraryStorage \u003d new JsonLibraryStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        jsonLibraryStorage.saveLibrary(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ReadOnlyLibrary readBack \u003d jsonLibraryStorage.readLibrary(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        original.addBook(HAMLET);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        original.removeBook(HARRY_POTTER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        jsonLibraryStorage.saveLibrary(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        readBack \u003d jsonLibraryStorage.readLibrary(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        original.addBook(THE_FAULT_IN_OUR_STARS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        jsonLibraryStorage.saveLibrary(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        readBack \u003d jsonLibraryStorage.readLibrary().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void saveLibrary_nullLibrary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLibrary(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Saves {@code library} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private void saveLibrary(ReadOnlyLibrary library, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            new JsonLibraryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                    .saveLibrary(library, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void saveLibrary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveLibrary(new Library(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "TanLeYang": 45
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/storage/JsonSerializableLibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.testutil.TypicalBooks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class JsonSerializableLibraryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableLibraryTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final Path TYPICAL_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalBooksLibrary.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final Path INVALID_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidBookLibrary.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "    private static final Path DUPLICATE_BOOK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateBookLibrary.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void toModelType_typicalBooksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_BOOK_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library libraryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library typicalBooksLibrary \u003d TypicalBooks.getTypicalLibrary();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(libraryFromFile, typicalBooksLibrary);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void toModelType_invalidBookFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_BOOK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void toModelType_duplicateBooks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_BOOK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableLibrary.MESSAGE_DUPLICATE_BOOKS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "TanLeYang": 18,
      "angrybunny123": 6
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        userPrefs.setBookmarkFilePath(Paths.get(\"library.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "TanLeYang": 6
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.TypicalBooks.getTypicalLibrary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        JsonLibraryStorage libraryStorage \u003d new JsonLibraryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageManager \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void libraryReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         * {@link JsonLibraryStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonLibraryStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library original \u003d getTypicalLibrary();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        storageManager.saveLibrary(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        ReadOnlyLibrary retrieved \u003d storageManager.readLibrary().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertEquals(original, new Library(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public void getLibraryFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        assertNotNull(storageManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "TanLeYang": 17
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/BookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "import seedu.bookmark.model.book.Goal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A utility class to help with building Book objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String DEFAULT_GENRE \u003d \"Fiction\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String DEFAULT_TOTAL_PAGES \u003d \"1000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Genre genre;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private TotalPages totalPages;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Bookmark bookmark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "    private Goal goal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    private List\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Creates a {@code BookBuilder} with the default details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        genre \u003d new Genre(DEFAULT_GENRE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        totalPages \u003d new TotalPages(DEFAULT_TOTAL_PAGES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookmark \u003d new Bookmark();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        goal \u003d Goal.defaultGoal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Initializes the BookBuilder with the data of {@code bookToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder(Book bookToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        name \u003d bookToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        genre \u003d bookToCopy.getGenre();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        totalPages \u003d bookToCopy.getTotalPages();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        bookmark \u003d bookToCopy.getBookmark();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(bookToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        goal \u003d bookToCopy.getGoal();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e(bookToCopy.getNotes());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the {@code Name} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the {@code Genre} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder withGenre(String genre) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.genre \u003d new Genre(genre);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the {@code TotalPages} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder withTotalPages(String totalPages) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.totalPages \u003d new TotalPages(totalPages);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the {@code Bookmark} of the {@code Book} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public BookBuilder withBookmark(String bookmark) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        this.bookmark \u003d new Bookmark(bookmark);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Parses the {@code notes} into a {@code List\u003cNote\u003e} and set it to the {@code Book} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public BookBuilder withNotes(String... notes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        this.notes \u003d SampleDataUtil.getNoteList(notes);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public Book build() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mgiang2015"
        },
        "content": "        return new Book(name, genre, tags, totalPages, bookmark, goal, notes);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mgiang2015": 5,
      "pangpuncake": 14,
      "-": 43,
      "pennhanlee": 2,
      "TanLeYang": 49
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/BookUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_BOOKMARK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_GENRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import static seedu.bookmark.logic.parser.CliSyntax.PREFIX_TOTAL_PAGES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": " * A utility class for Book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class BookUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Returns an add command string for adding the {@code book}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static String getAddCommand(Book book) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getBookDetails(book);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Returns the part of command string for the given {@code book}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static String getBookDetails(Book book) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        sb.append(PREFIX_NAME + book.getName().fullName + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        sb.append(PREFIX_GENRE + book.getGenre().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        sb.append(PREFIX_TOTAL_PAGES + book.getTotalPages().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        sb.append(PREFIX_BOOKMARK + book.getBookmark().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        book.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Returns the part of command string for the given {@code EditBookDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static String getEditBookDescriptorDetails(EditCommand.EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        descriptor.getGenre().ifPresent(genre -\u003e sb.append(PREFIX_GENRE).append(genre.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        descriptor.getTotalPages().ifPresent(totalPages -\u003e sb.append(PREFIX_TOTAL_PAGES)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "                                                                   .append(totalPages.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        descriptor.getBookmark().ifPresent(bookmark -\u003e sb.append(PREFIX_BOOKMARK).append(bookmark.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 8,
      "-": 34,
      "pennhanlee": 10,
      "TanLeYang": 13
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/EditBookDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.logic.commands.EditCommand.EditBookDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.Bookmark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Genre;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "import seedu.bookmark.model.book.TotalPages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A utility class to help with building EditBookDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class EditBookDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private EditBookDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptorBuilder(EditCommand.EditBookDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.descriptor \u003d new EditBookDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns an {@code EditBookDescriptor} with fields containing {@code book}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptorBuilder(Book book) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor \u003d new EditBookDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setName(book.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setGenre(book.getGenre());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setTags(book.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setTotalPages(book.getTotalPages());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setBookmark(book.getBookmark());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the {@code Name} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Sets the {@code Genre} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptorBuilder withGenre(String genre) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setGenre(new Genre(genre));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditBookDescriptor}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Sets the {@code TotalPages} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public EditBookDescriptorBuilder withTotalPages(String totalPages) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        descriptor.setTotalPages(new TotalPages(totalPages));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     * Sets the {@code Bookmark} of the {@code EditBookDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public EditBookDescriptorBuilder withBookmark(String bookmark) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        descriptor.setBookmark(new Bookmark(bookmark));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public EditBookDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 18,
      "TanLeYang": 70
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/LibraryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A utility class to help with building Library objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": " *     {@code Library ab \u003d new LibraryBuilder().withBook(\"Harry\", \"Potter\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class LibraryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private Library library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public LibraryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library \u003d new Library();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public LibraryBuilder(Library library) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        this.library \u003d library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Adds a new {@code Book} to the {@code Library} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public LibraryBuilder withBook(Book book) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        library.addBook(book);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public Library build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "TanLeYang": 15,
      "angrybunny123": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return Index.fromOneBased(model.getFilteredBookList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static Book getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return model.getFilteredBookList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "TanLeYang": 8
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/TypicalBooks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_BOOKMARK_1984;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_BOOKMARK_JANE_EYRE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_1984;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_GENRE_JANE_EYRE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_1984;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_NAME_JANE_EYRE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_BAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TAG_GOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TOTAL_PAGES_1984;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.logic.commands.CommandTestUtil.VALID_TOTAL_PAGES_JANE_EYRE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " * A utility class containing a list of {@code Book} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "public class TypicalBooks {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book HARRY_POTTER \u003d new BookBuilder().withName(\"Harry Potter\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Fiction\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTags(\"Good\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTotalPages(\"1000\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(\"500\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book TO_KILL_A_MOCKINGBIRD \u003d new BookBuilder().withName(\"To Kill a Mockingbird\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Fiction\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTags(\"Good\", \"Lengthy\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTotalPages(\"1500\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            .withBookmark(\"269\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "            .withNotes(\"Chapter 1\", \"Chapter 2\", \"Chapter 3\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book THE_HUNGER_GAMES \u003d new BookBuilder().withName(\"The Hunger Games\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Fiction\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTotalPages(\"500\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(\"20\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book CRIME_AND_PUNISHMENT \u003d new BookBuilder().withName(\"Crime and Punishment\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            .withGenre(\"Crime\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            .withTags(\"Bad\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTotalPages(\"1000\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "angrybunny123"
        },
        "content": "            .withBookmark(\"1000\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book LORD_OF_THE_FLIES \u003d new BookBuilder().withName(\"Lord of the Flies\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Mystery\").withTotalPages(\"369\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(\"123\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book ENDERS_GAME \u003d new BookBuilder().withName(\"Enders Game\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Thriller\").withTotalPages(\"123\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(\"23\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book ON_THE_ROAD \u003d new BookBuilder().withName(\"On the Road\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Travel\").withTotalPages(\"239\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(\"111\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book HAMLET \u003d new BookBuilder().withName(\"Hamlet\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Classic\").withTotalPages(\"239\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final Book THE_FAULT_IN_OUR_STARS \u003d new BookBuilder().withName(\"The Fault in Our Stars\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(\"Tragic\").withTotalPages(\"239\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    // Manually added - Books\u0027s compulsory details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Book COMPULSORY_NINETEEN_EIGHTY_FOUR \u003d new BookBuilder().withName(VALID_NAME_1984)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(VALID_GENRE_1984)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            .withTotalPages(VALID_TOTAL_PAGES_1984).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Book COMPULSORY_JANE_EYRE \u003d new BookBuilder().withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            .withGenre(VALID_GENRE_JANE_EYRE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            .withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    // Manually added - Book\u0027s full details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Book FULL_NINETEEN_EIGHTY_FOUR \u003d new BookBuilder().withName(VALID_NAME_1984)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            .withGenre(VALID_GENRE_1984)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            .withTags(VALID_TAG_GOOD, VALID_TAG_BAD)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTotalPages(VALID_TOTAL_PAGES_1984)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(VALID_BOOKMARK_1984).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Book FULL_JANE_EYRE \u003d new BookBuilder().withName(VALID_NAME_JANE_EYRE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withGenre(VALID_GENRE_JANE_EYRE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTags(VALID_TAG_GOOD, VALID_TAG_BAD)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withTotalPages(VALID_TOTAL_PAGES_JANE_EYRE)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            .withBookmark(VALID_BOOKMARK_JANE_EYRE).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    private TypicalBooks() {} // prevents instantiation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     * Returns an {@code Library} with all the typical books."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static Library getTypicalLibrary() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        Library ab \u003d new Library();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        for (Book book : getTypicalBooks()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "            ab.addBook(book);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    public static List\u003cBook\u003e getTypicalBooks() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HARRY_POTTER, TO_KILL_A_MOCKINGBIRD, THE_HUNGER_GAMES,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "                CRIME_AND_PUNISHMENT, LORD_OF_THE_FLIES, ENDERS_GAME, ON_THE_ROAD));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 2,
      "pennhanlee": 12,
      "TanLeYang": 84,
      "angrybunny123": 3
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final Index INDEX_FIRST_BOOK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final Index INDEX_SECOND_BOOK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pangpuncake"
        },
        "content": "    public static final Index INDEX_THIRD_BOOK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pangpuncake": 3,
      "-": 7,
      "TanLeYang": 2
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/testutil/TypicalWords.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "package seedu.bookmark.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.Library;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.WordBank;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.book.Book;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "import seedu.bookmark.model.wordstore.Word;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "public class TypicalWords {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String HARRY \u003d \"harry\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String POTTER \u003d \"potter\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String AND \u003d \"and\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String CHAMBER \u003d \"chamber\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String SECRETS \u003d \"secrets\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MISSPELT_HARRY \u003d \"hbrry\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MISSPELT_POTTER \u003d \"pptter\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MISSPELT_AND \u003d \"abd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MISSPELT_CHAMBER \u003d \"chabber\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final String MISSPELT_SECRETS \u003d \"sekrets\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    //correctly spelt"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Word CORRECT_HARRY \u003d new Word(\"harry\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Word CORRECT_POTTER \u003d new Word(\"potter\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Word CORRECT_AND \u003d new Word(\"and\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Word CORRECT_CHAMBER \u003d new Word(\"chamber\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static final Word CORRECT_SECRETS \u003d new Word(\"secrets\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    private TypicalWords() {} //prevents instantiation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     * Returns an {@code WordBank} with all the typical books converted into words."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static WordBank getTypicalWordBank() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Library lib \u003d new Library();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        for (Book book : TypicalBooks.getTypicalBooks()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "            lib.addBook(book);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new WordBank(lib);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static WordBank getEmptyWordBank() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        Library lib \u003d new Library();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new WordBank(lib);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static List\u003cWord\u003e getTypicalWords() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CORRECT_HARRY, CORRECT_POTTER, CORRECT_AND,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                CORRECT_CHAMBER, CORRECT_SECRETS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    public static List\u003cString\u003e getTypicalStrings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HARRY, POTTER, AND,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "                CHAMBER, SECRETS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pennhanlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pennhanlee": 65
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/java/seedu/bookmark/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "package seedu.bookmark.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import static seedu.bookmark.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "import seedu.bookmark.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "TanLeYang": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003c?import seedu.bookmark.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "TanLeYang": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "TanLeYang"
        },
        "content": "\u003cfx:root type\u003d\"seedu.bookmark.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "TanLeYang": 1
    }
  }
]
