[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-2/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "# Welcome to ForgetfulNUS!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  ForgetfulNUS is a **flashcard application** designed to assist students currently learning the **German Language**,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  specifically those undertaking the **NUS modules LAG1201 and LAG2201**, as a **memory aid for vocabulary**."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* Example usages:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Self-testing with a scoring system"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Build a user-customised glossary"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * More to come!"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* As the app is still in early development, some features are still a work in progress. Expect to see more updates in the near"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    future!"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* While the app is usable by any party, some features cater *specifically* to NUS students undertaking LAG1201 and LAG2201"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "## Additional links"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* For a full guide to ForgetfulNUS, see our **[ForgetfulNUS User Guide](https://github.com/AY2021S1-CS2103T-W16-2/tp/blob/master/docs/UserGuide.md)**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* For the detailed documentation of this project, see our **[ForgetfulNUS Developer Guide](https://github.com/AY2021S1-CS2103T-W16-2/tp/blob/master/docs/DeveloperGuide.md)**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### Acknowledgements"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 16,
      "YangJiyu98": 1,
      "zhizhizhizhizhi": 1,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "mainClassName \u003d \u0027seedu.forgetfulnus.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "run {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kswk"
        },
        "content": "    archiveName \u003d \u0027ForgetfulNUS.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 5,
      "-": 70,
      "kswk": 1
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "You can reach us at the email seer[at]comp.nus.edu.sg"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Joe Tan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u003cimg src\u003d\"images/tjwjoe.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[[github](http://github.com/tjwjoe)] [[portfolio](team/tjwjoe.md)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Responsibilities: Documentation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Kenny Seet"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u003cimg src\u003d\"images/kswk.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[[github](https://github.com/kswk)] [[portfolio](team/kswk.md)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Responsibilities: Deliverables, Deadlines and Integration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Rayasam Harshini"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u003cimg src\u003d\"images/rayasamhr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[[github](http://github.com/rayasamhr)] [[portfolio](team/rayasamhr.md)]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Responsibilities: Code Quality"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Xu Zhizhi"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u003cimg src\u003d\"images/zhizhizhizhizhi.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[[github](http://github.com/zhizhizhizhizhi)] [[portfolio](team/zhizhizhizhizhi.md)]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Yang Jiyu"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u003cimg src\u003d\"images/yangjiyu98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[[github](http://github.com/yangjiyu98)] [[portfolio](team/yangjiyu98.md)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Responsibilities: Scheduling and Tracking"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "-": 33,
      "kswk": 18
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-2/tp) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "kswk": 1
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**Setting up, getting started**](#setup)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**Design**](#design)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [Architecture](#architecture)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [UI component](#ui_component)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [Logic component](#logic_component)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [Model component](#model_component)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [Storage component](#storage_component)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [Common classes](#common_classes)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**Implementation**](#implementation)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * [[Proposed] Undo/redo feature](#undo_redo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * [Proposed Implementation](#proposed_implementation)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * [Design consideration:](#design_consideration)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "       * [Aspect: How undo \u0026 redo executes](#aspect_undo_redo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [[Proposed] Data archiving](#data_archiving)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**Documentation, logging, testing, configuration, dev-ops**](#documentation_etc)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**Appendix: Requirements**](#requirements)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Product scope](#product_scope)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [User stories](#user_stories)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Use cases](#use_cases)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Non-Functional Requirements](#nfr)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Glossary](#glossary)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**Appendix: Instructions for manual testing**](#manual_testing)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Launch and shutdown](#launch_shutdown)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Deleting a student](#deleting_a_flashcard)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * [Saving data](#saving_data)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "## \u003ca name\u003d\"setup\"\u003e\u003c/a\u003e**Setting up, getting started**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "## \u003ca name\u003d\"design\"\u003e\u003c/a\u003e**Design**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"architecture\"\u003e\u003c/a\u003eArchitecture"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-W16-2/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-W16-2/tp/blob/master/src/main/java/seedu/forgetfulnus/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-W16-4/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "* At app launch: Initialises the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kswk"
        },
        "content": "[**`Commons`**](#common_classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**`UI`**](#ui_component): The UI of the App."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**`Logic`**](#logic_component): The command executor."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**`Model`**](#model_component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "* [**`Storage`**](#storage_component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"ui_component\"\u003e\u003c/a\u003eUI component"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kswk"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-W16-2/tp/tree/master/src/main/java/seedu/forgetfulnus/ui/Ui.java)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"logic_component\"\u003e\u003c/a\u003eLogic component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kswk"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-W16-2/tp/tree/master/src/main/java/seedu/forgetfulnus/logic/Logic.java)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kswk"
        },
        "content": "1. `Logic` uses the `GlossaryBookParser` class to parse the user command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a Flashcard)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"add g/German e/English\")` API call."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "![Interactions Inside the Logic Component for the `add g/German e/English` Command](images/AddSequenceDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"model_component\"\u003e\u003c/a\u003eModel component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kswk"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-W16-2/tp/tree/master/src/main/java/seedu/forgetfulnus/model/Model.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kswk"
        },
        "content": "* stores the glossary data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kswk"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cFlashcard\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `Glossary`, which `Flashcard` references. This allows `Glossary` to only require one `Tag` object per unique `Tag`, instead of each `Flashcard` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"storage_component\"\u003e\u003c/a\u003eStorage component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kswk"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-W16-2/tp/tree/master/src/main/java/seedu/forgetfulnus/storage/Storage.java)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"common_classes\"\u003e\u003c/a\u003eCommon classes"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kswk"
        },
        "content": "Classes used by multiple components are in the `seedu.forgetfulnus.commons` package."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kswk"
        },
        "content": "## \u003ca name\u003d\"implementation\"\u003e\u003c/a\u003e**Implementation**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Randomly generating a specified number of flashcards from the glossary to self-test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kswk"
        },
        "content": "This feature is facilitated by `RandomQuizCommand` and `RandomQuizCommandParser` and `Model`."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kswk"
        },
        "content": "`RandomQuizCommand` implements the method:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `RandomQuizCommand#execute(Model)` — Returns a `CommandResult` which begins a round of vocabulary quiz containing the specified number of flashcards randomly selected from the existing glossary."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kswk"
        },
        "content": "`RandomQuizCommandParser` implements the method:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `RandomQuizCommandParser#parse(String)` — Returns a `RandomQuizCommand` which ensures the specified number of flashcards is valid."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kswk"
        },
        "content": "`Model` implements the method:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `Model#setRandomQuizMode(boolean)` — Sets the state of Model to randomQuizMode and backs up or retrieves the original glossary depending on the boolean value."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kswk"
        },
        "content": "Given below is an example usage scenario and how the random quiz mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kswk"
        },
        "content": "Step 1. The user launches the application with an existing glossary of flashcards that the user added previously."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kswk"
        },
        "content": "Step 2. The user executes `random 5` command to randomly select 5 flashcards from the existing glossary to test his/her own vocabulary. The `random 5` command calls `RandomQuizCommandParser#parse(String)` which checks the validity of the argument given to `random` command. This then leads to the calling of `RandomQuizCommand#execute(Model)`, which in turn calls the `Model#setRandomQuizMode(boolean)`."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kswk"
        },
        "content": "Step 3. The change of state of the Model resulting from `Model#setRandomQuizMode(boolean)` starts a round of vocabulary quiz for the user when the boolean parameter provided is true."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kswk"
        },
        "content": "The following sequence diagram shows how the random quiz mechanism works:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kswk"
        },
        "content": "![RandomQuizSequenceDiagram](images/RandomQuizSequenceDiagram.png)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kswk"
        },
        "content": "The following activity diagram summarises what happens when a user executes the random command:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kswk"
        },
        "content": "![RandomQuizActivityDiagram](images/RandomQuizActivityDiagram.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "### \u003ca name\u003d\"score\"\u003e\u003c/a\u003e\\[Proposed\\] Score report feature:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "The proposed feature saves scores from previous iterations of the quiz mode, which can be accessed by the user with the `ViewScoreCommand`. Scores are saved as percentage of questions answered correctly in a local file, which is exposed in the `Storage` interface as `Storage#getScoreFilePath()`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Each time the quiz mode is entered and ended, a score is calculated as a percentage of correct answers input by the user and encapsulated by a `Score` object. The `Score` is added to a `ScoreList`, where the following methods are implemented:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "`ScoreList#addScore()`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "`ScoreList#getScores()`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "`ScoreList#deleteScores()`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "These operations are exposed in the Model interface as `Model#addScore()`, `Model#getScores()` and `Model#deleteScores()` respectively."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "The following sequence diagram shows how the score is saved:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "### Predefined tags feature"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "There are two types of predefined tags for each flash cards. They are the `DifficultyTag` and `GenderTag`. "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "The following activity diagram summarises what happens for the `DifficultyTag` when a user executes the Add command:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "![DifficultyTagActivityDiagram](images/DifficultyTagActivityDiagram.png)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "For `GenderTag` the activity diagram is similar, with the default tag being `NONE`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "The following class diagram outlines the structure of the predefined tags and how it interacts with other `Model` components."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "![PredefinedTagClassDiagram](images/PredefinedTagClassDiagram.png)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "As both the `DifficultyTag` and `GenderTag` can share similar code, they are extended from `PredefinedTags`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "### \u003ca name\u003d\"data_archiving\"\u003e\u003c/a\u003e\\[Implemented\\] Quizzing"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "The proposed quiz feature for users to test their vocabulary is facilitated by `Model` and `Command`. It does so by allowing a command to set `Model` to quiz mode. When the model is in quiz mode, it will take in commands allowing users to attempt to type the correct definition, skip the flashcard under test or end the quiz."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* `Glossary#quiz(Model)` — Starts the quizzing with the displayed flashcard list."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* `Glossary#next(Model)` — Attempt to type the correct English definition of the German phrase on the current flashcard."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* `Glossary#next(Model)` — Skips the current flashcard under test."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* `Glossary#end(Model)` — Ends the quiz."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "These operations are exposed in `Ui` as commands. They are implemented by `QuizCommand`, `TryCommand`, `NextCommand` and `EndQuizCommand` respectively."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Given below is an example usage scenario and how the quiz mechanism behaves at each step."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Step 1: The user launch the application with an existing list of flashcard. Flashcards from this list will be tested on in the order of their index, and the list can be customised by using the `find \u003csearch phrase\u003e` command."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Step 2: User enters `quiz` and the program will execute the QuizCommand on the current model. The model will be set to quiz mode and will be expecting quiz commands like `try \u003cattempt\u003e`, `next` and `end`. The Ui will update to hide all the English definitions on the flashcards. The first flashcard on the list will be tested when the quiz begins."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Step 3: The user enters `try \u003cattempt\u003e` and the `GlossaryParser#parse(String)` will parse input into a TryCommand with the attempt. If the attempt matches the English definition of the flashcard, the flashcard index, score and question count in `model` increment. The Ui will update to show the English definition of the current flashcard. The next flashcard on the list will be tested. "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "If the attempt does not match, step 3 will repeat."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Alternatively, the user can enter `next` to execute the NextCommand on the model. The flashcard index and question count in `model` will increment, the Ui will update to show the English definition of the current flashcard andthe next flashcard and the next flashcard will be tested. "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Step 4: The quiz mode will end when there is no next flashcard i.e. current flashcard is the last on the list, and the user attempts the English definition correctly with `try \u003cattempt\u003e` or the user skips the card with `next`. Alternatively, the quiz can be ended early at any point during the quiz when the user enters `end`, letting the program execute the EndQuizCommand on the current model. The Ui will update to show the English definitions on all the flashcards in the flashcard list."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "The following activity diagram outlines the process of quizzing:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "![QuizActivityDiagram](images/QuizActivityDiagram.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "The following sequence diagram shows how the quiz operation works:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "![QuizCommandSequenceDiagram](images/QuizCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### \\[Implemented\\] Sort Feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "The Sort feature is implemented as a way for users to further customise the glossary and make it easier for them to find phrases they want."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Sorting is implemented as a `SortCommand` class which extends from the abstract `Command` class and makes use of a `SortCommandParser` to parse the parameters input by the user."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "This is in line with the original AddressBook3\u0027s Command pattern."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "`SortCommand` relies on several pre-defined `Comparator`s to execute the sorting, one of which is selected for use when"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "the user\u0027s input is successfully parsed. For example, when the user inputs `sort english`, a SortCommand object is created"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "with a `Comparator` to compare the `EnglishPhrase`s of each `FlashCard` object in the `Glossary`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "This class diagram outlines the structure of `SortCommand` and `SortCommand` and how they interact with "
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "other aspects of the program."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "![SortCommandClassDiagram](images/SortCommandClassDiagram.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "The following sequence diagram briefly outlines the execution process when a user enters the command \"sort english\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "![SortCommandSequenceDiagram](images/SortCommandSequenceDiagram.png)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. The user command is first passed into `LogicManager`, which calls upon `GlossaryParser` to parse the command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. `GlossaryParser` identifies the input as a command to sort the glossary, creates a `SortCommandParser` and calls its `parse(String)` method."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. The new `SortCommandParser` parses the parameter and creates a new `SortCommand`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. `LogicManager` calls the new `SortCommand`\u0027s `execute(model)` method."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. `execute()` calls `SortCommand`\u0027s own `getSortedGlossary()` method to obtain a sorted `Glossary`."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. The sorted `Glossary` replaces the current `Glossary` in `Model`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. The result of the command execution is encapsulated as a CommandResult object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Note:** The lifeline for `SortCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### Alternatives:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. Sorting replaces the entire Glossary with a new sorted Glossary (current implementation)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   - Pros: Fairly adaptable from existing commands"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   - Cons: Large glossary size may lead to computational delays and overhead"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. Sorting sorts the current Glossary in place instead of creating a new Glossary"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   - Pros: Less computational overhead"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   - Cons: Original AB3 implementation uses immutable Glossary equivalent, requires very significant refactoring of code to achieve."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   Using a mutable Glossary also makes the code more vulnerable."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kswk"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kswk"
        },
        "content": "## \u003ca name\u003d\"documentation_etc\"\u003e\u003c/a\u003e**Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kswk"
        },
        "content": "## \u003ca name\u003d\"requirements\"\u003e\u003c/a\u003e**Appendix: Requirements**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"product_scope\"\u003e\u003c/a\u003eProduct scope"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "#### **Target user profile**:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "ForgetfulNUS is targeted at students taking level 1000-2000 German language modules at the NUS Center of Language Studies who can type fast and prefer typing to mouse interactions."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "#### **Value proposition**: "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kswk"
        },
        "content": "A flashcard CLI app designed to cater to the specific needs of the target user to help them learn their German vocabularies.  "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"user_stories\"\u003e\u003c/a\u003eUser Stories"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Priority | As a... | I want to... | So that I..."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "--- | ---------- | --------- | ---- |"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "*** | user |add a flashcard with German phrase and meaning | can refer it or use it to test myself later."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "*** | user | list out all the flashcards with index | can look through the phrases and their meanings to study."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "*** | user | delete a flash card by index"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "*** | user | test myself with the flashcards | can be quizzed on the phrases and their meanings."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "** | user | my flashcards to be saved (storage) | can use them when I next launch the app."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"use_cases\"\u003e\u003c/a\u003eUse Cases"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "(For all use cases below, the **System** is `ForgetfulNUS` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "#### **Use Case: UC1- Add a flashcard**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "1.  User adds a flashcard with German phrase and meaning."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "2.  ForgetfulNUS adds the flashcard and display the newly-added flashcard."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "- 1a. ForgetfulNUS detects less than 2 fields for the flashcard."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    - 1a1. ForgetfulNUS requests the User to input phrase and meaning for the flashcard.     "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    - 1a2. User enters a new flashcard or terminates the process."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    Steps 1a1-1a2 are repeated until the user input is correct or the user terminates the process."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "#### **Use case: UC2 - List all flashcards**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "1.  User requests ForgetfulNUS to list all the flashcards."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "2.  ForgetfulNUS shows the list of flashcards."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "- 1a. ForgetfulNUS detects incorrect command."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    - 1a1. ForgetfulNUS shows error and asks for a command in the correct format. "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    - 1a2. User enters a command."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "#### **Use case: UC3 - Delete a flashcard**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "1.  User deletes a flashcard by the index."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "2.  ForgetfulNUS displays the flashcard to be deleted and asks for confirmation."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "3.  User confirms deletion of flashcard."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "4.  ForgetfulNUS deletes the flashcard."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "- 3a. User chooses to not delete the flashcard at confirmation."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    - 3a1. ForgetfulNUS terminates the process. "
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#### **Use case: UC4 - Self-testing with flashcards**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "**MSS:**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "1. User requests to start self-testing."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "2. ForgetfulNUS displays a german word."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "3. User inputs the corresponding english translation."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "4. ForgetfulNUS displays the results of User\u0027s answer."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    Steps 2-4 are repeated until there are no more words to be tested.    "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**Extensions:**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "- 4a. At any time, User chooses to stop self-testing."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "   - 4a1. ForgetfulNUS stops self-testing."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "*{More to be added soon}*"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kswk"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "2. A user with above average typing speed for regular English text should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "3. German diacritics (eg. ä) should be fully supported in being saved and displayed by the UI."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "4. Verification of user input in testing mode should not take more than 2 seconds."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"glossary\"\u003e\u003c/a\u003eGlossary"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Mainstream OS:** Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Flashcard:** An item containing (a) a German phrase (b) the corresponding English definition"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **German phrase:** German text of any length"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Index:** Position of flashcard in the list of flashcards displayed to the user"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **CLI:** Command Line Interface"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kswk"
        },
        "content": "## \u003ca name\u003d\"manual_testing\"\u003e\u003c/a\u003e**Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"launch_shutdown\"\u003e\u003c/a\u003eLaunch and shutdown"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kswk"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample flashcards. The window size may not be optimum."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"deleting_a_flashcard\"\u003e\u003c/a\u003eDeleting a flashcard"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kswk"
        },
        "content": "1. Deleting a flashcard while all flashcards are being shown"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kswk"
        },
        "content": "   1. Prerequisites: List all flashcards using the `list` command. Multiple flashcards in the list."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kswk"
        },
        "content": "      Expected: First flashcard is deleted from the list. Details of the deleted flashcard shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kswk"
        },
        "content": "      Expected: No flashcard is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kswk"
        },
        "content": "### \u003ca name\u003d\"saving_data\"\u003e\u003c/a\u003eSaving data"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 41,
      "YangJiyu98": 35,
      "zhizhizhizhizhi": 42,
      "rayasamhr": 36,
      "-": 234,
      "kswk": 86
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   1. Run the `seedu.forgetfulnus.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [ForgetfulNUS’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Do the tutorials**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "   These tutorials will help you get acquainted with the codebase."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Tracing code](tutorials/TracingCode.md)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Removing fields](tutorials/RemovingFields.md)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "   * [Adding a new command](tutorials/AddRemark.md)"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 53,
      "kswk": 1
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   e.g. `seedu.forgetfulnus.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   e.g. `seedu.forgetfulnus.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "   e.g. `seedu.forgetfulnus.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "ForgetfulNUS is a desktop glossary app for students taking German 1 (LAG1201)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "and German 2 (LAG2201) in NUS to practise and test their vocabulary. This app is optimised"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "for use via a Command Line Interface (CLI). If you can type fast, ForgetfulNUS "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "can get your German revision done quickly and effectively."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. [Quick Start](#qs)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "1. [Commonly used Commands](#cucmds)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. [Features](#features)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. [Edit the glossary](#editing)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Add a Flashcard](#add)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Delete a Flashcard](#delete)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        1. [Clear All Flashcards](#clear)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. [Test Yourself](#test)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Normal Test](#quiz)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Random Test](#random)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Next](#next)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Try](#try)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [End Testing](#end)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        1. [View Past Scores](#scores)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. [Navigate the glossary](#navigating)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        1. [Find a Flashcard](#find)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [List All Flashcards](#list)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Sort All Flashcards](#sort)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. [Miscellaneous Commands](#misc)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        1. [Help](#help)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        1. [Exit](#exit)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. [FAQ](#faq)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. [Command Summary](#cmdsum)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "## \u003ca name\u003d\"qs\"\u003e\u003c/a\u003e1. Quick start"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "1. Download the latest `ForgetfulNUS.jar` from [here](https://github.com/AY2021S1-CS2103T-W16-2/tp/releases)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your ForgetfulNUS."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "1. Double-click the file to start the app. When it first starts up, ForgetfulNUS should look similar to the figure below. ForgetfulNUS contains some pre-loaded"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " sample data for you to get started.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  ## \u003ca name\u003d\"cucmds\"\u003e\u003c/a\u003e2. Commonly used commands"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "   Here are some example commands you can try:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "   * **`add`**`g/Vergesslichkeit e/Forgetfulness` : Adds a flashcard with German phrase `Vergesslichkeit` with English translation `Forgetfulness` to the glossary."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * **`quiz`** : Starts a round of vocabulary testing with all existing flashcards in the glossary."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "   * **`end`** : Ends a round of vocabulary testing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "## \u003ca name\u003d\"features\"\u003e\u003c/a\u003e3. Features"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  e.g. in `add g/\u003cGERMAN PHRASE\u003e e/\u003cENGLISH PHRASE\u003e`, `GERMAN PHRASE` and `ENGLISH PHRASE` are parameters which can be used as `add g/Vergesslichkeit e/Forgetfulness`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* Items with `...` after them can be used multiple times including zero times."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  e.g. `g/\u003cGERMAN PHRASE\u003e [t/\u003cTAG\u003e]...` can be used as  (i.e. 0 times), t/objects, t/objects t/nouns etc."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* Items in `[]`, square brackets, are optional."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  e.g `g/\u003cGERMAN PHRASE\u003e [t/\u003cTAG\u003e]` can be used as g/Vergesslichkeit t/tutorialOne or as g/Vergesslichkeit."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### \u003ca name\u003d\"editing\"\u003e\u003c/a\u003e3.1. Edit the glossary"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"add\"\u003e\u003c/a\u003e3.1.1. Add a flashcard: `add`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Adds a flashcard to the glossary. You can use this to expand your glossary."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Format: `add g/\u003cGERMAN PHRASE\u003e e/\u003cENGLISH PHRASE\u003e d/[\u003cDIFFICULTY\u003e] s/[\u003cGENDER\u003e] [t/\u003cTAG\u003e]}`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "**:information_source: Notes about add command:**\u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* Difficulty has only three states, EASY, MEDIUM and HARD."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  If left blank, by default it will be MEDIUM."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* Gender has only four states, M (Masculine), F (Feminine), NEUTRAL or NONE."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  If left blank, by default it will be NONE."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `add g/Vergesslichkeit e/Forgetfulness d/hard s/f t/chapter1`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "![add-screenshot](images/add-screenshot.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e3.1.2. Delete a flashcard : `delete`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Deletes the specified flashcard from the glossary permanently. You can use this command to delete flashcards you consider outdated or not relevant to your learning. "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Format: `delete \u003cINDEX\u003e`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kswk"
        },
        "content": "* Deletes the flashcard at the specified `INDEX`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* The index refers to the index number shown in the displayed glossary."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* `delete 2` deletes the 2nd flashcard in the glossary."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "![delete-screenshot](images/delete-screenshot.png)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"clear\"\u003e\u003c/a\u003e3.1.3. Clear All Flashcards : `clear`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Deletes all flashcards from the glossary permanently."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kswk"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kswk"
        },
        "content": "![clear-screenshot](images/clear-screenshot.png)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### \u003ca name\u003d\"test\"\u003e\u003c/a\u003e3.2. Test Yourself"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"quiz\"\u003e\u003c/a\u003e3.2.1. Normal Test : `quiz`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Starts a round of vocabulary testing with all the flashcards that are currently in the glossary. English translation is now hidden for the user to self test. You can use this command to test if you remember the definition corresponding to the German phrase on the flashcards."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kswk"
        },
        "content": "Format: `quiz`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kswk"
        },
        "content": "![quiz-screenshot](images/quiz-screenshot.png)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"random\"\u003e\u003c/a\u003e3.2.2. Random Test : `random`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Starts a round of vocabulary testing like the previous quiz command but with the specified number of flashcards randomly selected from the existing glossary. You can use this command when you want a quick quiz where you can decide the number of questions."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kswk"
        },
        "content": "Format: `random \u003cNUMBER\u003e`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Example: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `random 4` starts a randomised quiz with 4 randomly selected flashcards."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kswk"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "![random-screenshot](images/random-screenshot.png)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Note that screenshot might not look exactly the same on your end as flashcards are randomised."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"next\"\u003e\u003c/a\u003e3.2.3. Next : `next`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Skips the current flashcard and move on to the next card in quiz mode. You can use this command if you cannot get the correct answer but wish to continue with the quiz. The current flashcard will be considered incorrectly answered."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Format: `next`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kswk"
        },
        "content": "![next-screenshot](images/next-screenshot.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"try\"\u003e\u003c/a\u003e3.2.4. Try : `try`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Compares the user attempt with the definition of the current flashcard. You can use this command when the app asks you to enter the definition on a flashcard. If the attempt is correct, the quiz will move on to the next flashcard. If the attempt is not correct, users will be prompted to try again or skip this card."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Format: `try \u003cATTEMPT\u003e`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Example: \u0027try Tuesday\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kswk"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kswk"
        },
        "content": "![try-screenshot](images/try-screenshot.png)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"end\"\u003e\u003c/a\u003e3.2.5. End Test : `end`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Ends the round of vocabulary testing. You can use this anytime during the quiz and the quiz score will be the number of correct attempts to that point."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kswk"
        },
        "content": "Format: `end`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kswk"
        },
        "content": "![end-screenshot](images/end-screenshot.png)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"scores\"\u003e\u003c/a\u003e3.2.6. View Past Scores : `scores`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Displays a history of scores from past quizzes, starting from the most recent round. The German phrases tested in these"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "rounds are also listed for easy reference."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "**:information_source: Notes about saving scores:**\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* For each unique list of German phrases, only the most recent score is saved. If you decide to test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "yourself on the same list again, your previous score will be overwritten."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kswk"
        },
        "content": "![scores-screenshot](images/scores-screenshot.png)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### \u003ca name\u003d\"navigating\"\u003e\u003c/a\u003e3.3. Navigate the glossary"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "These commands allow you to manipulate the the glossary so you can find certain phrases more easily."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"find\"\u003e\u003c/a\u003e3.3.1. Find a Flashcard : `find`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Finds certain flashcard(s) according to the **German phrase** entered. You can enter more german phrases after the first phrase to search for more flashcards corresponding to your search parameters. **The full German phrase must be entered for each parameter**."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kswk"
        },
        "content": "Format: `find \u003cGERMAN PHRASE\u003e \u003cOPTIONAL GERMAN PHRASE 1\u003e \u003cOPTIONAL GERMAN PHRASE 2\u003e...`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `find Donnerstag` finds the flashcard(s) with the German Phrase \u0027Donnerstag\u0027."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "![find-screenshot](images/find-screenshot.png)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"list\"\u003e\u003c/a\u003e3.3.2. List All Flashcards : `list`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Displays all flashcards in the glossary. You can use this command to return to the full glossary after a find operation."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "![list-screenshot](images/list-screenshot.png)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### \u003ca name\u003d\"sort\"\u003e\u003c/a\u003e3.3.3. Sort All Flashcards : `sort`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Sorts the all flashcards according to the way you choose. You may find this helpful for browsing the flashcards or changing the order for quiz mode."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Format: `sort \u003cPARAMETER\u003e`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* `\u003cPARAMETER\u003e` refers to how you want to sort the flashcards by."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* Possible parameters:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `german`: sorts by the alphabetical order of German phrases."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `english`: sorts by the alphabetical order of English definitions."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `reversegerman`: sorts by the reverse alphabetical order of German phrases."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `reverseenglish`: sorts by the reverse alphabetical order of English phrases."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `easytohard`: sorts by difficulty of flashcards, from easy to hard."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `hardtoeasy`: sorts by difficulty of flashcards, from hard to easy."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `earliest`: sorts by chronological order, from the earliest flashcard added to latest."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    1. `latest`: sorts by chronological order, from the latest flashcard added to earliest."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kswk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kswk"
        },
        "content": "* `sort hardtoeasy` sorts the flashcards by their respective difficulty tags from \"hard\" to \"easy\"."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "After entering this command, your app should look like this:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "![sort-screenshot](images/sort-screenshot.png)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "### \u003ca name\u003d\"misc\"\u003e\u003c/a\u003e3.4. Miscellaneous Commands"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"help\"\u003e\u003c/a\u003e3.4.1. Help : `help`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Opens a small window containing a link to this User Guide. You can use this command when you need to refer to the command formats or how to run the app."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "#### \u003ca name\u003d\"exit\"\u003e\u003c/a\u003e3.4.2 Exit the program : `exit`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Saves and exits the program."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "## \u003ca name\u003d\"faq\"\u003e\u003c/a\u003e4. FAQ"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Q**: Do I need to save my data manually?\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**A**: ForgetfulNUS glossary data is automatically saved in the hard disk upon exiting. There is no need to save manually."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**A**:"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. Install the app in your other computer."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. Locate the `data` folder in your previous ForgetfulNUS home folder, and find the `glossary.JSON` file inside."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. Transfer the `glossary.JSON` file to your new computer"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "1. Place the `glossary.JSON` file in the `data` folder of the ForgetfulNUS home folder in your other computer."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "## \u003ca name\u003d\"cmdsum\"\u003e\u003c/a\u003e5. Command Summary"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Add** | `add g/\u003cGERMAN PHRASE\u003e e/\u003cENGLISH PHRASE\u003e [d/\u003cDIFFICULTY\u003e] [s/\u003cGENDER\u003e] [t/\u003cTAGS\u003e...]` \u003cbr\u003e e.g., `add g/Vergesslichkeit e/Forgetfulness d/hard`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "**Delete** | `delete INDEX` \u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "**Clear** | `clear`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kswk"
        },
        "content": "**Start Normal Quiz** | `quiz`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kswk"
        },
        "content": "**Start Random Quiz** | `random \u003cNUMBER\u003e` \u003cbr\u003e e.g., `random 5`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Next phrase** | `next`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Try an answer** | `try \u003cATTEMPT\u003e` \u003cbr\u003e e.g., `try Tuesday`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kswk"
        },
        "content": "**End Quiz** | `end`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Find** | `find \u003cGERMAN PHRASE\u003e` \u003cbr\u003e e.g., `find Vergesslichkeit`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "**List** | `list`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Sort** | `sort \u003cPARAMETER\u003e` \u003cbr\u003e e.g., `sort english`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 84,
      "YangJiyu98": 27,
      "zhizhizhizhizhi": 26,
      "rayasamhr": 43,
      "-": 95,
      "kswk": 35
    }
  },
  {
    "path": "docs/diagrams/AddSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "participant \":GlossaryParser\" as GlossaryParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "[-\u003e LogicManager : execute(\"add g/German e/English\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "LogicManager -\u003e GlossaryParser : parseCommand(\"Add g/German e/English\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate GlossaryParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "create AddCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "GlossaryParser -\u003e AddCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser --\u003e GlossaryParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "GlossaryParser -\u003e AddCommandParser : parse(\"g/German e/English\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate AddCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "alt No difficulty specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    AddCommandParser -\u003e Model : new DifficultyTag()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    Model -\u003e AddCommandParser"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    Deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "else else"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    AddCommandParser -\u003e Model : new DifficultyTag(difficulty)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    activate Model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    Model -\u003e AddCommandParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    Deactivate Model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "end"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser -\u003e Model : new GermanPhrase(German)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Model -\u003e AddCommandParser"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Deactivate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser -\u003e Model : new EnglishPhrase(English)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Model -\u003e AddCommandParser"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "opt Tags present"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "   AddCommandParser -\u003e Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "   activate Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "   Model -\u003e AddCommandParser"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "   Deactivate Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "end"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser -\u003e Model : new FlashCard"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Model --\u003e AddCommandParser"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "create AddCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser -\u003e AddCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommand --\u003e AddCommandParser : a"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser --\u003e GlossaryParser : a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate AddCommandParser"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommandParser -[hidden]-\u003e GlossaryParser"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "destroy AddCommandParser"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "GlossaryParser --\u003e LogicManager : a"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate GlossaryParser"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "LogicManager -\u003e AddCommand : executeWithChecks"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate AddCommand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommand -\u003e Model : AddFlashCard"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Model --\u003e AddCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "CommandResult --\u003e AddCommand"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "AddCommand --\u003e LogicManager :"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate AddCommand"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 109
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteFlashCard(fc)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveGlossary(glossary)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "kswk": 2
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "Glossary *-right-\u003e \"1\" UniqueFlashCardList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "Glossary *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "UniqueTagList -[hidden]down- UniqueFlashCardList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "UniqueTagList -[hidden]down- UniqueFlashCardList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "UniqueFlashCardList o-right-\u003e FlashCard"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e GermanPhrase"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e EnglishPhrase"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e Difficulty"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "FlashCard *--\u003e Order"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 11,
      "kswk": 9
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "if () then ([command commits Glossary])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "    :Purge redundant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "    :Save Glossary to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "    glossaryStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "kswk": 4
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":GlossaryBookParser\" as GlossaryBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "LogicManager -\u003e GlossaryBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate GlossaryBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "DeleteCommandParser --\u003e GlossaryBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "DeleteCommandParser --\u003e GlossaryBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e GlossaryBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate GlossaryBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "DeleteCommand -\u003e Model : deleteFlashCard(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "kswk": 11
    }
  },
  {
    "path": "docs/diagrams/DifficultyTagActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ":User executes Add command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "if () then ([Difficulty specified])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    if () then ([Valid difficulty])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    :Add specified difficulty tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "   else ([else])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "       : Add default Medium difficulty tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 18
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class GlossaryBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "LogicManager --\u003e\"1\" GlossaryBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "kswk": 3
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "Interface ReadOnlyGlossary \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class Glossary"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class ReadOnlyGlossary"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "Package FlashCard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class FlashCard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Class Order"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class Difficulty"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Class Gender"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class GermanPhrase"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class EnglishPhrase"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class UniqueFlashCardList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "Glossary .up.|\u003e ReadOnlyGlossary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "ModelManager o--\u003e \"1\" Glossary"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "Glossary *--\u003e \"1\" UniqueFlashCardList"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "UniqueFlashCardList o--\u003e \"*\" FlashCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e GermanPhrase"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e EnglishPhrase"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e Difficulty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "FlashCard *--\u003e Gender"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "FlashCard *--\u003e Order"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "FlashCard *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "GermanPhrase -[hidden]right-\u003e EnglishPhrase"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "EnglishPhrase -[hidden]right-\u003e Difficulty"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "ModelManager --\u003e\"1\" FlashCard : filtered list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "YangJiyu98": 2,
      "-": 33,
      "kswk": 20
    }
  },
  {
    "path": "docs/diagrams/PredefinedTagClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "show members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "show methods"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "skinparam arrowColor MODEL_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR_T2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "abstract class PredefinedTag"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "class GenderTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +MASCULINE_GENDER_TAG"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +FEMININE_GENDER_TAG"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +NEUTRAL_GENDER_TAG"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +NONE_GENDER_TAG"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    +isValidGenderTag(String) : boolean"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "class DifficultyTag {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +EASY_TAG"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +MEDIUM_TAG"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    {static} +HARD_TAG"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    +isValidDifficultyTag(String) : boolean"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "class FlashCard"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "PredefinedTag \u003c|-- DifficultyTag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "PredefinedTag \u003c|-- GenderTag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "FlashCard *--\u003e \"1\" DifficultyTag : \u003e contains"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "FlashCard *--\u003e \"1\" GenderTag : \u003e contains"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 35
    }
  },
  {
    "path": "docs/diagrams/QuizActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "start"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ":User inputs \"quiz\";"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ":Start a new quiz with flashcard index \u003d 0;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    :Get flashcard from model with flashcard index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    \u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    \u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    : Test flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    : Incrememt flashcard index by 1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "repeat while () is ([flashcard is not null])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "stop"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhizhizhizhizhi": 17
    }
  },
  {
    "path": "docs/diagrams/QuizCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "participant \":GlossaryParser\" as GlossaryParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "participant \"QuizCommand\" as QuizCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "[-\u003e LogicManager : execute(\"quiz\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "LogicManager -\u003e GlossaryParser : parseCommand(\"quiz\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "activate GlossaryParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "GlossaryParser -\u003e GlossaryParser : parseCommand(\"quiz\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "create QuizCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "GlossaryParser -\u003e QuizCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "activate QuizCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "GlossaryParser --\u003e LogicManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "deactivate GlossaryParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "QuizCommand -\u003e Model : resetQuiz()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Model --\u003e QuizCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "QuizCommand -\u003e Model : setQuizMode(true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Model --\u003e QuizCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "QuizCommand -\u003e Model : updateFilteredPhraseList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Model --\u003e QuizCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "QuizCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "CommandResult --\u003e QuizCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "QuizCommand --\u003e LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "deactivate QuizCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhizhizhizhizhi": 56
    }
  },
  {
    "path": "docs/diagrams/RandomQuizActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": ":User inputs \"random \u003cNUMBER\u003e\";"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "if () then ([\u003cNUMBER\u003e is above zero and more than the\\ntotal number of flashcards in glossary])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "    :Start a quiz but with \u003cNUMBER\u003e\\nof randomly selected flashcards;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "endif"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "stop"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kswk": 13
    }
  },
  {
    "path": "docs/diagrams/RandomQuizSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":GlossaryParser\" as GlossaryParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":RandomQuizCommandParser\" as RandomQuizCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \"rq:RandomQuizCommand\" as RandomQuizCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":Glossary\" as Glossary LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "[-\u003e LogicManager : execute(\"random 5\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "LogicManager -\u003e GlossaryParser : parseCommand(\"random 5\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate GlossaryParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "create RandomQuizCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryParser -\u003e RandomQuizCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate RandomQuizCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommandParser --\u003e GlossaryParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate RandomQuizCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryParser -\u003e RandomQuizCommandParser : parse(\"5\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate RandomQuizCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "create RandomQuizCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommandParser -\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate RandomQuizCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand --\u003e RandomQuizCommandParser : rq"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate RandomQuizCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommandParser --\u003e GlossaryParser : rq"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate RandomQuizCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommandParser -[hidden]-\u003e GlossaryParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "destroy RandomQuizCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryParser --\u003e LogicManager : rq"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate GlossaryParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "LogicManager -\u003e RandomQuizCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate RandomQuizCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand -\u003e Model : setRandomQuizMode(true)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kswk"
        },
        "content": "Model --\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kswk"
        },
        "content": "create Glossary"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand -\u003e Glossary"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate Glossary"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "Glossary --\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate Glossary"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand -\u003e Model : replaceGlossary()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kswk"
        },
        "content": "Model --\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand -\u003e Model : setQuizMode(true)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kswk"
        },
        "content": "Model --\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand -\u003e Model : updateFilteredPhraseList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kswk"
        },
        "content": "Model --\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kswk"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kswk"
        },
        "content": "CommandResult --\u003e RandomQuizCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kswk"
        },
        "content": "RandomQuizCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate RandomQuizCommand"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kswk"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kswk": 95
    }
  },
  {
    "path": "docs/diagrams/SortCommandClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "show members"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "show methods"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "abstract class Command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "interface Parser"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "class SortCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    comp: Comparator\u003cFlashCard\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    +void : execute(model)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "class SortCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    ~SortCommand : parse(String)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "class ParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    +{static} String : parseSortParams()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "class GlossaryParser {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    +Command : parseCommand(String)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "interface Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    void : setGlossary()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "GlossaryParser --\u003e \"1\" SortCommandParser : creates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand --|\u003e Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser ..\u003e ParserUtil : uses static method from"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser --\u003e \"1\" SortCommand : creates"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand ..\u003e \"1\" Model : modifies"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 34
    }
  },
  {
    "path": "docs/diagrams/SortCommandSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "participant \":GlossaryParser\" as GlossaryParser LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "participant \"scmd:SortCommand\" as SortCommand LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR_T4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[-\u003e LogicManager : execute(\"sort english\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "LogicManager -\u003e GlossaryParser : parseCommand(\"sort english\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate GlossaryParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "create SortCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "GlossaryParser -\u003e SortCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser --\u003e GlossaryParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "GlossaryParser -\u003e SortCommandParser : parse(\"english\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser -\u003e SortCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand --\u003e SortCommandParser : scmd"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser --\u003e GlossaryParser : scmd"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommandParser -[hidden]-\u003e GlossaryParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "destroy SortCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "GlossaryParser --\u003e LogicManager : scmd"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate GlossaryParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "LogicManager -\u003e SortCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand -\u003e SortCommand : getSortedGlossary()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand --\u003e SortCommand : sortedGlossary"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand -\u003e Model : setGlossary(sortedGlossary)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "CommandResult --\u003e SortCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "SortCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 75
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "Interface GlossaryStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "Class JsonGlossaryStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "StorageManager o--\u003e GlossaryStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "JsonGlossaryStorage .left.|\u003e GlossaryStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "JsonGlossaryStorage .down.\u003e JsonSerializableGlossaryStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "JsonSerializableGlossaryStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "kswk": 6
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":GlossaryBookParser\" as GlossaryBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "participant \":VersionedGlossary\" as VersionedGlossary MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "LogicManager -\u003e GlossaryBookParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate GlossaryBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryBookParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "UndoCommand --\u003e GlossaryBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "GlossaryBookParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate GlossaryBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "UndoCommand -\u003e Model : undoGlossary()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "Model -\u003e VersionedGlossary : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "activate VersionedGlossary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "VersionedGlossary -\u003e VersionedGlossary :resetData(ReadOnlyGlossary)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "VersionedGlossary --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "deactivate VersionedGlossary"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "kswk": 14
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "ecp -\u003e ec ++: index, editFlashCardDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 1,
      "-": 20
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "title: ForgetfulNUS"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-W16-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-W16-2/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-W16-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-W16-2/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "**ForgetfulNUS is a desktop application for helping students taking German 1** (LAG1201) **and German 2** (LAG2201) **in NUS to practise their vocabulary.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "* If you are interested in using ForgetfulNUS, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "* If you are interested about developing ForgetfulNUS, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "kswk": 6
    }
  },
  {
    "path": "docs/team/kswk.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "title: Kenny Seet\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "## Project: ForgetfulNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "ForgetfulNUS is a **flashcard application** designed to assist students currently learning the **German Language**,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "  specifically those undertaking the **NUS modules LAG1201 and LAG2201**, as a **memory aid for vocabulary**."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **New Feature**: Added the ability to quiz with a specified number of randomised flashcards."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * What it does: allows the user to choose a specific number of flashcards from the existing glossary and start a quiz with the order of the flashcards randomised."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can quiz himself/herself conveniently with a selected number of flashcards that he/she is comfortable with. Furthermore, the selected number of flashcards will be quizzed in no particular order due to randomisation instead of having the user quiz himself/herself through the entire German 1 and German 2 Glossary in the same order every time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dkswk\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Contributed to the refactoring of Address Book - Level 3 to ForgetfulNUS [#87](https://github.com/AY2021S1-CS2103T-W16-2/tp/commit/b7075d97eae784e099507da32b5f24ca86a30263)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Improved code quality and readability of the codebase. [#130](https://github.com/AY2021S1-CS2103T-W16-2/tp/commit/2301588617e3b4dec90426aa5e711cd1689b328d)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      }
    ],
    "authorContributionMap": {
      "kswk": 41
    }
  },
  {
    "path": "docs/team/rayasamhr.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "title: Rayasam Harshini\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "## Project: ForgetfulNUS"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "ForgetfulNUS is a desktop glossary app for students taking German 1 (LAG1201) and German 2 (LAG2201) in NUS to practise and test their vocabulary. "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "This app is optimised for use via a Command Line Interface (CLI). If you can type fast, ForgetfulNUS can get your German revision done quickly and effectively."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **New Feature**: Added the ability to save quiz scores."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * What it does: allows the user to view scores for previous rounds "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  of testing, along with a list of German words tested in each round. Scores are saved to local"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  storage and can be accessed even after exiting and reopening the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can keep"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  track of their progress when quizzing. Not only can users view previous scores"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  to check if they are making progress, they can also see the words tested to identify potential"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  weak areas."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Highlights: This enhancement required significant additions to the Storage component to save scoring"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "   information in a separate .json file. Given that scores are saved in a similar way to flashcards in the glossary,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "   this enhancement was challenging as it required analysis of code to extract several class methods into interfaces to minimise code duplication."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "   Modifications were also made to the Model component to allow words tested to be tracked along with the scores."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003drayasamhr\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026zFR\u003dfalse\u0026tabAuthor\u003drayasamhr\u0026tabRepo\u003dAY2021S1-CS2103T-W16-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Project management - Incomplete**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Enhancements to existing features- Incomplete**:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Documentation - Incomplete**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    * Added documentation for the feature `scores [\\#72]()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    * Added implementation details of the `scores` feature."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "* **Community - I**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 45
    }
  },
  {
    "path": "docs/team/tjwjoe.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "title: Tan Jia Wei Joe\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "## Project: ForgetfulNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "ForgetfulNUS is a flashcard application designed to assist students in learning the German Language, specifically those undertaking the NUS modules LAG1201 and LAG2201, as a memory aid for vocabulary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **New Feature**: Added the ability to sort the glossary in multiple ways"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * What it does: allows the user to sort the glossary based on the parameter they input, such as by chronological or alphabetical order for instance."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Justification: This allows the user to navigate their glossary much more easily and adds another degree of customisability to the glossary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Highlights: To implement sorting by chronological order, I created a new Order field to be used in every FlashCard. "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dtjwjoe\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Managed releases `v1.2` - `v1.4` (3 releases) on GitHub"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Performed significant refactoring of the original AB3 code at the start of the project to make it suit our product."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Added an Order field to each FlashCard to facilitate sorting by chronological order."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    * Ensured that the overall quality of the User Guide was maintained throughout the project."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    * Wrote usage guide for `sort` feature."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    * Added documentation for the `sort` feature."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * Reported bugs and suggestions for other teams in the cohort (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "* **Credits**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "  * This project is based on the AddressBook-Level3 project created by the SE-EDU initiative."
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 38
    }
  },
  {
    "path": "docs/team/yangjiyu98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "title: Yang Jiyu\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "## Project: ForgetfulNUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "ForgetfulNUS is a desktop glossary app for students taking German 1 (LAG1201) and German 2 (LAG2201) in NUS to practise and test their vocabulary. This app is optimised for use via a Command Line Interface (CLI). If you can type fast, ForgetfulNUS can get your German revision done quickly and effectively."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* **New Feature**: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * What it does: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Justification: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Highlights: "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dYangJiyu98\u0026tabRepo\u003dAY2021S1-CS2103T-W16-2%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Managed releases `v1.2`, `v1.2.1`, `v1.3` (3 releases) on GitHub"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Refactor code to enhance readability from existing code, AddressBook - Level 3."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Updated Add command (Pull requests [\\#78](https://github.com/AY2021S1-CS2103T-W16-2/tp/pull/78), [\\#80](https://github.com/AY2021S1-CS2103T-W16-2/tp/pull/80))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    * Add documentation for the features `add` and `find` [\\#72]()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    * Minor tweaks to existing documentation of Commonly used commands: [\\#74]()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    * Updated sequence diagram within the `Logic` component for the Add command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    * Updated class diagram within the `Model` component to reflect the additional tags."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    * Added implementation details of the `PredefinedTags` feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    * Added use cases for ForgetfulNUS"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 42
    }
  },
  {
    "path": "docs/team/zhizhizhizhizhi.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "title: Xu ZhiZhi\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "ForgetfulNUS is a desktop glossary app for students taking German 1 (LAG1201) and German 2 (LAG2201) in NUS to practise and test their vocabulary. This app is optimised for use via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **New Feature**:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * What it does: "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Justification: "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Highlights: "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Integrated a third party library (Natty) to the project ([\\#42]())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "  * Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "zhizhizhizhizhi": 45
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Changes the remark of an existing flashCard in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the flashCard identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            + \"by the index number used in the last flashCard listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @param index of the flashCard in the filtered flashCard list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @param remark of the flashCard to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.forgetfulnus.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## Add `Remark` to the model"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of flashCard data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the flashCard’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a flashCard."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Create a new `Remark` in `seedu.forgetfulnus.model.flashCard`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each flashCard."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "Simply add the following to [`seedu.forgetfulnus.ui.FlashCardCardView`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public PersonCard(Person flashCard, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    remark.setText(flashCard.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Person flashCardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Person editedFlashCard \u003d new Person(flashCardToEdit.getName(), flashCardToEdit.getPhone(), flashCardToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                flashCardToEdit.getAddress(), remark, flashCardToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model.setPerson(flashCardToEdit, editedFlashCard);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedFlashCard));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code flashCardToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private String generateSuccessMessage(Person flashCardToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return String.format(message, flashCardToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "rayasamhr": 17,
      "-": 371
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.forgetfulnus.model.flashCard.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "  \"flashCards\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "rayasamhr": 1,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.forgetfulnus.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "       Person flashCardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "       Person editedFlashCard \u003d createEditedPerson(flashCardToEdit, editFlashCardDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "       if (!flashCardToEdit.isSamePerson(editedFlashCard) \u0026\u0026 model.hasPerson(editedFlashCard)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "       model.setPerson(flashCardToEdit, editedFlashCard);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedFlashCard));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "       flashCards.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "rayasamhr": 6,
      "-": 243
    }
  },
  {
    "path": "gradle/wrapper/gradle-wrapper.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "#Tue Oct 20 20:34:02 SGT 2020"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "distributionUrl\u003dhttps\\://services.gradle.org/distributions/gradle-5.2.1-all.zip"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "distributionBase\u003dGRADLE_USER_HOME"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "distributionPath\u003dwrapper/dists"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "zipStorePath\u003dwrapper/dists"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "zipStoreBase\u003dGRADLE_USER_HOME"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 3,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyScoreList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.JsonGlossaryStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.storage.JsonScoreStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.storage.interfaces.ObjectStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initialising Glossary ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ObjectStorage\u003cReadOnlyGlossary\u003e glossaryStorage \u003d new JsonGlossaryStorage(userPrefs.getGlossaryFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ObjectStorage\u003cReadOnlyScoreList\u003e scoreStorage \u003d new JsonScoreStorage(userPrefs.getScoresFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        storage \u003d new StorageManager(glossaryStorage, scoreStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s glossary and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * The data from the sample glossary will be used instead if {@code storage}\u0027s glossary is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * or an empty glossary will be used instead if errors occur when reading {@code storage}\u0027s glossary."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ReadOnlyGlossary initialData \u003d initialiseGlossary(storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ReadOnlyScoreList initialScores \u003d initialiseScoreList(storage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ReadOnlyGlossary initialiseGlossary(Storage storage) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            Optional\u003cReadOnlyGlossary\u003e glossaryOptional \u003d storage.readGlossary();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            if (glossaryOptional.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                logger.info(\"Glossary data file not found. Will be starting with a sample Glossary\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return glossaryOptional.orElseGet(SampleDataUtil::getSampleGlossary);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            logger.warning(\"Glossary data file not in the correct format. Will be starting with an empty Glossary\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new Glossary();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            logger.warning(\"Problem while reading from the glossary file. Will be starting with an empty Glossary\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new Glossary();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ReadOnlyScoreList initialiseScoreList(Storage storage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            Optional\u003cReadOnlyScoreList\u003e scoreListOptional \u003d storage.readScores();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (scoreListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                logger.info(\"Score data file not found. Will be starting with an empty score list\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return scoreListOptional.orElseGet(ScoreList::new);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            logger.warning(\"Glossary data file not in the correct format. Will be starting with an empty Glossary\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new ScoreList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            logger.warning(\"Problem while reading from the glossary file. Will be starting with an empty Glossary\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return new ScoreList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Config initialisedConfig;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kswk"
        },
        "content": "            initialisedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kswk"
        },
        "content": "            initialisedConfig \u003d new Config();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kswk"
        },
        "content": "            ConfigUtil.saveConfig(initialisedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return initialisedConfig;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kswk"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Glossary\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kswk"
        },
        "content": "        logger.info(\"Starting Glossary \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kswk"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Glossary ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 24,
      "YangJiyu98": 1,
      "rayasamhr": 30,
      "-": 138,
      "kswk": 12
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/Comparators.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " * Container for comparators used by SortCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class Comparators {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e GERMAN_COMP \u003d (obj1, obj2) -\u003e obj1.getGermanPhrase().toString()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .toLowerCase().compareTo(obj2.getGermanPhrase().toString().toLowerCase());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e REVERSE_GERMAN_COMP \u003d (obj1, obj2) -\u003e obj2.getGermanPhrase().toString()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .toLowerCase().compareTo(obj1.getGermanPhrase().toString().toLowerCase());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e ENGLISH_COMP \u003d (obj1, obj2) -\u003e obj1.getEnglishPhrase().toString()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .toLowerCase().compareTo(obj2.getEnglishPhrase().toString().toLowerCase());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e REVERSE_ENGLISH_COMP \u003d (obj1, obj2) -\u003e obj2.getEnglishPhrase().toString()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .toLowerCase().compareTo(obj1.getEnglishPhrase().toString().toLowerCase());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e DIFFICULTY_EASY_COMP \u003d (obj1, obj2) -\u003e obj1.getDifficultyTag()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .compareTo(obj2.getDifficultyTag());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e DIFFICULTY_HARD_COMP \u003d (obj1, obj2) -\u003e obj2.getDifficultyTag()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .compareTo(obj1.getDifficultyTag());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e CHRONOLOGICAL_EARLIEST_COMP \u003d (obj1, obj2) -\u003e obj1.getOrder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .compareTo(obj2.getOrder());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final Comparator\u003cFlashCard\u003e CHRONOLOGICAL_LATEST_COMP \u003d (obj1, obj2) -\u003e obj2.getOrder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .compareTo(obj1.getOrder());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 28
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "            \"The flashcard index provided is invalid!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX_PARAM \u003d \" %s is not a valid prefix parameter.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_PARAM \u003d \" %s is not a valid sort parameter.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_PHRASES_LISTED_OVERVIEW \u003d \"%1$d flashcard(s) listed!\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Type \u0027list\u0027 to show entire glossary.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_QUIZ_ALREADY_STARTED \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "            \"Quiz has already started! Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_ZERO_INDEX \u003d \"Index is 0.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 8,
      "kswk": 11
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, ParseZeroException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Returns the Glossary."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @see seedu.forgetfulnus.model.Model#getGlossary()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "    ReadOnlyGlossary getGlossary();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of flashcards */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFilteredFlashCardList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the user prefs\u0027 glossary file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "    Path getGlossaryFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the user prefs\u0027 scores file path"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Path getScoresFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 8,
      "rayasamhr": 9,
      "-": 35,
      "kswk": 5
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.GlossaryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private final GlossaryParser glossaryParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        glossaryParser \u003d new GlossaryParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Command command \u003d glossaryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        commandResult \u003d command.executeWithChecks(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "            storage.saveGlossary(model.getGlossary());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            storage.saveScores(model.getScoreList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public ReadOnlyGlossary getGlossary() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return model.getGlossary();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFilteredFlashCardList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Path getGlossaryFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return model.getGlossaryFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the user prefs\u0027 scores file path"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Path getScoresFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return model.getScoreFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 15,
      "zhizhizhizhizhi": 1,
      "rayasamhr": 11,
      "-": 57,
      "kswk": 8
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_DIFFICULTY_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_ENGLISH_PHRASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GENDER_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GERMAN_PHRASE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Adds a phrase to the glossary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a phrase to the glossary. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_GERMAN_PHRASE + \"GERMAN PHRASE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_ENGLISH_PHRASE + \"ENGLISH PHRASE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_DIFFICULTY_TAG + \"DIFFICULTY LEVEL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_GENDER_TAG + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_GERMAN_PHRASE + \"Vergesslichkeit \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_ENGLISH_PHRASE + \"Forgetfulness \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + PREFIX_DIFFICULTY_TAG + \"hard \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + PREFIX_TAG + \"chapter1 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New phrase added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PHRASE \u003d \"This phrase already exists in the glossary\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"Flashcards cannot be added in quiz mode. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final FlashCard toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Creates an AddCommand to add the specified {@code FlashCard}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public AddCommand(FlashCard flashCard) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(flashCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        toAdd \u003d flashCard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (model.hasFlashCard(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PHRASE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        int size \u003d model.getGlossary().getFlashCardList().size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (Order.getNextOrderOfAddition() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            toAdd.setOrder(size + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model.addFlashCard(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        size \u003d model.getGlossary().getFlashCardList().size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Order.setNextOrderOfAddition(size + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 14,
      "YangJiyu98": 11,
      "zhizhizhizhizhi": 12,
      "rayasamhr": 9,
      "-": 34,
      "kswk": 5
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Clears the glossary."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Glossary has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"\u0027clear\u0027 command cannot be used in quiz mode. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.setGlossary(new Glossary());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Order.setNextOrderOfAddition(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "zhizhizhizhizhi": 11,
      "-": 16,
      "kswk": 5
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    enum CommandType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        QUIZ_MODE, NOT_QUIZ_MODE, ANY_MODE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Returns reminder message when the command is not applicable in the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * current mode (quiz mode or out of quiz mode)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return reminder message that command is not applicable in current mode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public abstract String getQuizModeReminder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Returns if the command can be used in quiz mode."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return QUIZ_MODE if command can only be used in quiz mode,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     *         NOT_QUIZ_MODE if command cannot be used in quiz mode,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     *         ANY_MODE if command can be used in either mode."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public abstract CommandType isQuizModeCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Executes the command and returns the result message with quiz mode"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * checks."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandResult executeWithChecks(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        if (isQuizModeCommand() \u003d\u003d CommandType.ANY_MODE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                || (isQuizModeCommand() \u003d\u003d CommandType.QUIZ_MODE \u0026\u0026 model.isQuizMode())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                || (isQuizModeCommand() \u003d\u003d CommandType.NOT_QUIZ_MODE \u0026\u0026 !model.isQuizMode())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return execute(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return new CommandResult(getQuizModeReminder());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "zhizhizhizhizhi": 38,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "zhizhizhizhizhi": 5,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Deletes a flashcard identified using it\u0027s displayed index from the glossary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \": Deletes the flashcard identified by the index number used in the glossary.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_DELETE_FLASHCARD_SUCCESS \u003d \"Deleted Phrase: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"Flashcards cannot be deleted in quiz mode. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Adjusts the {@code Orders}s of all the FlashCards whose {@code Orders}s are greater than the FlashCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * removed. This fills up the Order gap created after a FlashCard is deleted."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param model the current model."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param deletedFlashCardOrderValue the Order of the FlashCard to be deleted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void shiftOrders(Model model, int deletedFlashCardOrderValue) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Glossary copiedGlossary \u003d new Glossary(model.getGlossary());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        ObservableList\u003cFlashCard\u003e immutableList \u003d model.getGlossary().getFlashCardList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        for (FlashCard flashCard : immutableList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            int currentOrderValue \u003d flashCard.getOrder().getValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            if (currentOrderValue \u003e deletedFlashCardOrderValue) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                FlashCard newFc \u003d flashCard.setOrder(currentOrderValue - 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                copiedGlossary.setFlashCard(flashCard, newFc);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.setGlossary(copiedGlossary);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard phraseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model.deleteFlashCard(phraseToDelete);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        shiftOrders(model, phraseToDelete.getOrder().getValue());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        int size \u003d model.getGlossary().getFlashCardList().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Order.setNextOrderOfAddition(size + 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FLASHCARD_SUCCESS, phraseToDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 31,
      "zhizhizhizhizhi": 13,
      "rayasamhr": 3,
      "-": 38,
      "kswk": 8
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Edits the details of an existing flashcard in the glossary."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the flashcard identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            + \"by the index number used in the displayed flashcard list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String MESSAGE_EDIT_FLASHCARD_SUCCESS \u003d \"Edited FlashCard: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the glossary.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"Flashcards cannot be edited in quiz mode. \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final EditFlashCardDescriptor editFlashCardDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @param index of the flashcard in the filtered flashcard list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @param editFlashCardDescriptor details to edit the flashcard with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EditCommand(Index index, EditFlashCardDescriptor editFlashCardDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(editFlashCardDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.editFlashCardDescriptor \u003d new EditFlashCardDescriptor(editFlashCardDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCardToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard editedFlashCard \u003d createEditedFlashCard(flashCardToEdit, editFlashCardDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!flashCardToEdit.isSameFlashCard(editedFlashCard) \u0026\u0026 model.hasFlashCard(editedFlashCard)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model.setFlashCard(flashCardToEdit, editedFlashCard);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.updateFilteredPhraseList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Creates and returns a {@code FlashCard} with the details of {@code flashCardToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * edited with {@code editFlashCardDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static FlashCard createEditedFlashCard(FlashCard flashCardToEdit,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                                                   EditFlashCardDescriptor editFlashCardDescriptor) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assert flashCardToEdit !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        GermanPhrase updatedGermanPhrase \u003d editFlashCardDescriptor"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .getGermanPhrase()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .orElse(flashCardToEdit.getGermanPhrase());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        EnglishPhrase updatedEnglishPhrase \u003d editFlashCardDescriptor"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .getEnglishPhrase()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .orElse(flashCardToEdit.getEnglishPhrase());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        DifficultyTag updatedDifficultyTag \u003d editFlashCardDescriptor"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .getDifficultyTag()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .orElse(flashCardToEdit.getDifficultyTag());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        GenderTag updatedGenderTag \u003d editFlashCardDescriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .getGenderTag()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .orElse(flashCardToEdit.getGenderTag());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFlashCardDescriptor.getTags().orElse(flashCardToEdit.getTags());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        Order unchangedOrder \u003d flashCardToEdit.getOrder(); // User can never edit Order"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new FlashCard(updatedGermanPhrase, updatedEnglishPhrase,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                updatedDifficultyTag, updatedGenderTag, updatedTags, unchangedOrder);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 editFlashCardDescriptor.equals(e.editFlashCardDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Stores the details to edit the flashcard with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * corresponding field value of the flashcard."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static class EditFlashCardDescriptor {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        private GermanPhrase germanPhrase;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        private EnglishPhrase englishPhrase;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        private DifficultyTag difficultyTag;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        private GenderTag genderTag;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        private Order order;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public EditFlashCardDescriptor() {}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public EditFlashCardDescriptor(EditFlashCardDescriptor toCopy) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            setGermanPhrase(toCopy.germanPhrase);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            setEnglishPhrase(toCopy.englishPhrase);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            setDifficultyTag(toCopy.difficultyTag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            setGenderTag(toCopy.genderTag);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            setOrder(toCopy.order);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return CollectionUtil.isAnyNonNull(germanPhrase, englishPhrase, difficultyTag, genderTag, tags);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public void setGermanPhrase(GermanPhrase germanPhrase) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            this.germanPhrase \u003d germanPhrase;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public Optional\u003cGermanPhrase\u003e getGermanPhrase() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return Optional.ofNullable(germanPhrase);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public void setEnglishPhrase(EnglishPhrase englishPhrase) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            this.englishPhrase \u003d englishPhrase;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public Optional\u003cEnglishPhrase\u003e getEnglishPhrase() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return Optional.ofNullable(englishPhrase);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public void setDifficultyTag(DifficultyTag difficultyTag) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            this.difficultyTag \u003d difficultyTag;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public Optional\u003cDifficultyTag\u003e getDifficultyTag() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return Optional.ofNullable(difficultyTag);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public void setGenderTag(GenderTag genderTag) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            this.genderTag \u003d genderTag;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        public Optional\u003cGenderTag\u003e getGenderTag() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return Optional.ofNullable(genderTag);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        public void setOrder(Order order) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            this.order \u003d order;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        public Optional\u003cOrder\u003e getOrder() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return Optional.ofNullable(order);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (!(other instanceof EditFlashCardDescriptor)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            EditFlashCardDescriptor e \u003d (EditFlashCardDescriptor) other;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return getGermanPhrase().equals(e.getGermanPhrase())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    \u0026\u0026 getEnglishPhrase().equals(e.getEnglishPhrase())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    \u0026\u0026 getDifficultyTag().equals(e.getDifficultyTag())"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    \u0026\u0026 getGenderTag().equals(e.getGenderTag())"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 22,
      "YangJiyu98": 53,
      "zhizhizhizhizhi": 11,
      "rayasamhr": 33,
      "-": 125,
      "kswk": 13
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/EndQuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Ends the ongoing round of vocabulary self-testing."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class EndQuizCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"end\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Quiz ended!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"You are currently not in quiz mode.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.QUIZ_MODE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (model.isQuizMode() || model.isRandomQuizMode()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            while (model.getQuizModeIndex() \u003c lastShownList.size()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                FlashCard toEdit \u003d lastShownList.get(model.getQuizModeIndex());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                FlashCard changeTo \u003d toEdit.copy();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                changeTo.updateShowingEnglish(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                model.setFlashCard(toEdit, changeTo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                model.addCardToScore(changeTo);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (model.isRandomQuizMode()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                model.setRandomQuizMode(false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            model.saveScore();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.setQuizMode(false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.updateFilteredPhraseList(unused -\u003e true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                            + \" Your score: %s / %s\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                    model.getQuizScore(), model.getQuizTotalQuestions()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "            return new CommandResult(QUIZ_MODE_REMINDER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "zhizhizhizhizhi": 39,
      "rayasamhr": 8,
      "kswk": 7
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.ANY_MODE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "zhizhizhizhizhi": 12,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Finds and lists all flashcards in the glossary which contain any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all flashcards which contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Montag Dienstag Mittwoch\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d COMMAND_WORD + \" command cannot be used in quiz mode. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private final GermanPhraseContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FindCommand(GermanPhraseContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.updateFilteredPhraseList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return new CommandResult(String.format(Messages.MESSAGE_PHRASES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "                model.getFilteredFlashCardList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "zhizhizhizhizhi": 12,
      "-": 28,
      "kswk": 10
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.ANY_MODE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "zhizhizhizhizhi": 12,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Lists all flashcards in the glossary to the user, shown in the default unsorted state."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all flashcards.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String MESSAGE_EMPTY_GLOSSARY \u003d \"The glossary is empty!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"\u0027list\u0027 command cannot be used in quiz mode. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (model.getGlossary().getFlashCardList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_GLOSSARY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.updateFilteredPhraseList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 8,
      "zhizhizhizhizhi": 12,
      "-": 17,
      "kswk": 6
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/NextCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Skips the current flashcard during a vocabulary self-testing session."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class NextCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"next\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d COMMAND_WORD + \" command cannot be used when not in quiz mode. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027quiz\u0027 to start quizzing.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Enter the definition of: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.QUIZ_MODE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String germanWord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        int index \u003d model.getQuizModeIndex();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        if (index \u003c 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } else if (index \u003c lastShownList.size() - 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard toEdit \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard nextCard \u003d lastShownList.get(index + 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assert (nextCard !\u003d null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard changeTo \u003d toEdit.copy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            germanWord \u003d nextCard.getGermanPhrase().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            changeTo.updateShowingEnglish(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.setFlashCard(toEdit, changeTo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            model.addCardToScore(changeTo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.updateFilteredPhraseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + germanWord);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            Command endQuiz \u003d new EndQuizCommand();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return endQuiz.executeWithChecks(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 8,
      "zhizhizhizhizhi": 41,
      "rayasamhr": 2,
      "kswk": 9
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/QuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_QUIZ_ALREADY_STARTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class QuizCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"quiz\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Quiz started!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d MESSAGE_QUIZ_ALREADY_STARTED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String NO_FLASHCARD_MESSAGE \u003d \"There is no flashcard to quiz with.\\n \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Add a flashcard with \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"\u0027add g/\u003cGERMAN PHRASE\u003e e/\u003cENGLISH PHRASE\u003e d/[\u003cDIFFICULTY\u003e] s/[\u003cGENDER\u003e] [t/\u003cTAG\u003e]}\u0027\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String FIRST_CARD \u003d \" Enter the definition of: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        if (lastShownList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return new CommandResult(NO_FLASHCARD_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        ListIterator\u003cFlashCard\u003e iterator \u003d lastShownList.listIterator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard toEdit \u003d iterator.next();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard changeTo \u003d toEdit.copy();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            changeTo.updateShowingEnglish(false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.setFlashCard(toEdit, changeTo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        model.updateFilteredPhraseList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model.setQuizMode(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS) + FIRST_CARD"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                + lastShownList.get(model.getQuizModeIndex()).getGermanPhrase().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "zhizhizhizhizhi": 46,
      "rayasamhr": 1,
      "kswk": 7
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/RandomQuizCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_QUIZ_ALREADY_STARTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Begins a round of vocabulary self-testing with a specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": " * number of flashcards randomly chosen from the existing glossary."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class RandomQuizCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"random\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Random Quiz started!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \": Randomly selects specified number of flashcards and starts quiz\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d MESSAGE_QUIZ_ALREADY_STARTED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String FIRST_CARD \u003d \" Enter the definition of: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Creates a RandomQuizCommand to with the specified {@code Index}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public RandomQuizCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.setRandomQuizMode(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "        if (targetIndex.getOneBased() \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kswk"
        },
        "content": "        List\u003cFlashCard\u003e randomList \u003d new ArrayList\u003c\u003e(lastShownList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Collections.shuffle(randomList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "        while (randomList.size() \u003e targetIndex.getOneBased()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "            randomList.remove(randomList.size() - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kswk"
        },
        "content": "        replaceGlossary(model, randomList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kswk"
        },
        "content": "        ListIterator\u003cFlashCard\u003e iterator \u003d model.getFilteredFlashCardList().listIterator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kswk"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kswk"
        },
        "content": "            FlashCard toEdit \u003d iterator.next();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kswk"
        },
        "content": "            FlashCard changeTo \u003d toEdit.copy();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "            changeTo.updateShowingEnglish(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kswk"
        },
        "content": "            model.setFlashCard(toEdit, changeTo);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.setQuizMode(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.updateFilteredPhraseList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kswk"
        },
        "content": "                + FIRST_CARD"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kswk"
        },
        "content": "                + model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .getFilteredFlashCardList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .get(model.getQuizModeIndex())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .getGermanPhrase()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Initialises a new glossary with the given randomList and replaces the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * existing glossary in model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @param model Model that the command is operating on."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @param randomList List containing randomly selected flashcards."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private void replaceGlossary(Model model, List\u003cFlashCard\u003e randomList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary randomGlossary \u003d new Glossary();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kswk"
        },
        "content": "        randomGlossary.setFlashCards(randomList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.setGlossary(randomGlossary);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.updateFilteredPhraseList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kswk"
        },
        "content": "                || (other instanceof RandomQuizCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kswk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RandomQuizCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kswk": 113
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/ScoreCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class ScoreCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"scores\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"\u0027scores\u0027 command cannot be used in quiz mode. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final String MESSAGE_HEADER \u003d \"Here are the scores for your past quiz attempts: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String scores \u003d model.getScoreList().asViewable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        sb.append(MESSAGE_HEADER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        sb.append(scores);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 34,
      "kswk": 3
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Comparators;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            + \": Sorts the glossary according to the input parameter.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Possible parameters: german, english, reversegerman, reverseenglish,\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"easytohard, hardtoeasy, earliest, latest\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" german\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String MESSAGE_SORT_SUCCESS \u003d \"The glossary has been sorted!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d \"Flashcards cannot be sorted in quiz mode. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "            + \"Enter \u0027end\u0027 to end quizzing.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String MESSAGE_EMPTY_GLOSSARY \u003d \"The glossary is empty, there is nothing to sort!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final CommandType type \u003d CommandType.NOT_QUIZ_MODE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Comparator\u003cFlashCard\u003e comp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Logger logger \u003d Logger.getLogger(\"Sort Command Logger\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Creates a new SortCommand using the input parameter from the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param parameter the parameter that the user wants to sort the glossary by."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public SortCommand(String parameter) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assert parameter !\u003d null : \"Input cannot be null!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        parameter \u003d parameter.trim().toLowerCase();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        logger.log(Level.INFO, String.format(\"Input parameter: %s\", parameter));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        switch(parameter) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"german\"):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.GERMAN_COMP;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"english\"):"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.ENGLISH_COMP;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"reversegerman\"):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.REVERSE_GERMAN_COMP;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"reverseenglish\"):"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.REVERSE_ENGLISH_COMP;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"easytohard\"):"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.DIFFICULTY_EASY_COMP;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"hardtoeasy\"):"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.DIFFICULTY_HARD_COMP;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"earliest\"):"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.CHRONOLOGICAL_EARLIEST_COMP;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case(\"latest\"):"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            comp \u003d Comparators.CHRONOLOGICAL_LATEST_COMP;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            assert false : \"Invalid parameter %s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null!\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (model.getGlossary().getFlashCardList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return new CommandResult(MESSAGE_EMPTY_GLOSSARY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.setGlossary(getSortedGlossary(model));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return new CommandResult(MESSAGE_SORT_SUCCESS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public Glossary getSortedGlossary(Model model) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assert model !\u003d null : \"Model cannot be null!\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e sortedList \u003d new ArrayList\u003c\u003e(model.getGlossary().getFlashCardList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        sortedList.sort(comp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        logger.log(Level.INFO, \"List successfully sorted.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Glossary glossary \u003d new Glossary();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        glossary.setFlashCards(sortedList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return glossary;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (other \u003d\u003d null || other.getClass() !\u003d this.getClass()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand otherCommand \u003d (SortCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return this.comp.equals(otherCommand.comp);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 99,
      "kswk": 15
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/TryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class TryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"try\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String QUIZ_MODE_REMINDER \u003d COMMAND_WORD + \" command cannot be used when not in quiz mode. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027quiz\u0027 to start quizzing.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String CORRECT_ATTEMPT \u003d \"Correct! \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String INCORRECT_ATTEMPT \u003d \"Not correct. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"Enter \u0027try \u003cenglish phrase\u003e\u0027 to try again \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            + \"or \u0027next\u0027 to skip to next card.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public static final String REENTER \u003d \"\\nEnter the definition of: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private static final CommandType type \u003d CommandType.QUIZ_MODE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private final String attempt;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Creates a TryCommand to compare the quiz attempt with the flashcard\u0027s phrase."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public TryCommand(String attempt) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        requireNonNull(attempt);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        this.attempt \u003d attempt;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        List\u003cFlashCard\u003e lastShownList \u003d model.getFilteredFlashCardList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        int index \u003d model.getQuizModeIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        FlashCard flashCard \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        assert (flashCard !\u003d null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        if (flashCard.getEnglishPhrase().isCorrectAttempt(attempt)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.updateWithCorrectAttempt();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return new CommandResult(CORRECT_ATTEMPT"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                    + new NextCommand().executeWithChecks(model).toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return new CommandResult(INCORRECT_ATTEMPT + REENTER"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                + flashCard.getGermanPhrase().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public String getQuizModeReminder() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return QUIZ_MODE_REMINDER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public CommandType isQuizModeCommand() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhizhizhizhizhi": 60,
      "kswk": 7
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_DIFFICULTY_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_ENGLISH_PHRASE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GENDER_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GERMAN_PHRASE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.PredefinedTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_CAST \u003d \"Invalid casting of class\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"AddCommandParserLogger\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws ClassCastException if wrong class is cast"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        .tokenize(args, PREFIX_GERMAN_PHRASE, PREFIX_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                                PREFIX_DIFFICULTY_TAG, PREFIX_GENDER_TAG, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GERMAN_PHRASE, PREFIX_ENGLISH_PHRASE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        DifficultyTag difficultyTag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DIFFICULTY_TAG)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            logger.log(Level.INFO, \"Set default difficulty tag, MEDIUM Difficulty.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            difficultyTag \u003d new DifficultyTag(DifficultyTag.MEDIUM_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            PredefinedTag newTag \u003d ParserUtil.parsePredefinedTag(PREFIX_DIFFICULTY_TAG,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    argMultimap.getValue(PREFIX_DIFFICULTY_TAG).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (newTag instanceof DifficultyTag) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                difficultyTag \u003d (DifficultyTag) newTag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new ClassCastException(MESSAGE_INVALID_CLASS_CAST);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        GenderTag genderTag;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_GENDER_TAG)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            logger.log(Level.INFO, \"Set default gender tag, NONE Gender.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            genderTag \u003d new GenderTag(GenderTag.NONE_GENDER_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            PredefinedTag newTag \u003d ParserUtil.parsePredefinedTag(PREFIX_GENDER_TAG,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    argMultimap.getValue(PREFIX_GENDER_TAG).get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (newTag instanceof GenderTag) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                genderTag \u003d (GenderTag) newTag;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new ClassCastException(MESSAGE_INVALID_CLASS_CAST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        GermanPhrase germanPhrase \u003d ParserUtil.parseGermanPhrase(argMultimap.getValue(PREFIX_GERMAN_PHRASE).get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        EnglishPhrase englishPhrase \u003d ParserUtil.parseEnglishPhrase(argMultimap.getValue(PREFIX_ENGLISH_PHRASE).get());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        FlashCard flashCard \u003d new FlashCard(germanPhrase, englishPhrase, difficultyTag, genderTag, tagList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new AddCommand(flashCard);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 11,
      "YangJiyu98": 52,
      "rayasamhr": 1,
      "-": 37,
      "kswk": 1
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final Prefix PREFIX_DIFFICULTY_TAG \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final Prefix PREFIX_GERMAN_PHRASE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final Prefix PREFIX_ENGLISH_PHRASE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final Prefix PREFIX_GENDER_TAG \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "YangJiyu98": 6,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @throws ParseZeroException if the user input is \u00270\u0027."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "        } catch (ParseZeroException pze) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseZeroException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "                    String.format(MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "                            DeleteCommand.MESSAGE_USAGE), pze);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "                            DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "-": 22,
      "kswk": 10
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_DIFFICULTY_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_ENGLISH_PHRASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GENDER_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GERMAN_PHRASE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                ArgumentTokenizer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        .tokenize(args, PREFIX_GERMAN_PHRASE, PREFIX_ENGLISH_PHRASE, PREFIX_DIFFICULTY_TAG,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                                PREFIX_GENDER_TAG, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditFlashCardDescriptor editFlashCardDescriptor \u003d new EditFlashCardDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GERMAN_PHRASE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            editFlashCardDescriptor"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    .setGermanPhrase(ParserUtil.parseGermanPhrase(argMultimap.getValue(PREFIX_GERMAN_PHRASE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ENGLISH_PHRASE).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            editFlashCardDescriptor"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    .setEnglishPhrase(ParserUtil.parseEnglishPhrase(argMultimap.getValue(PREFIX_ENGLISH_PHRASE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DIFFICULTY_TAG).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            editFlashCardDescriptor"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    .setDifficultyTag((DifficultyTag) ParserUtil.parsePredefinedTag(PREFIX_DIFFICULTY_TAG,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                            argMultimap.getValue(PREFIX_DIFFICULTY_TAG).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER_TAG).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            editFlashCardDescriptor"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    .setGenderTag((GenderTag) ParserUtil.parsePredefinedTag(PREFIX_GENDER_TAG,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                            argMultimap.getValue(PREFIX_GENDER_TAG).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFlashCardDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        editFlashCardDescriptor.setOrder(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!editFlashCardDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new EditCommand(index, editFlashCardDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 11,
      "YangJiyu98": 22,
      "rayasamhr": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return new FindCommand(new GermanPhraseContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/GlossaryParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EndQuizCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.QuizCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.RandomQuizCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ScoreCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.logic.commands.TryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class GlossaryParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @throws ParseZeroException if the user input is \u00270\u0027."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        case QuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                return new QuizCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        case EndQuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                return new EndQuizCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        case NextCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                return new NextCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kswk"
        },
        "content": "        case RandomQuizCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kswk"
        },
        "content": "            return new RandomQuizCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        case TryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            return new TryCommand(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        case ScoreCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kswk"
        },
        "content": "            if (arguments.equals(\"\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                return new ScoreCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kswk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 21,
      "zhizhizhizhizhi": 13,
      "rayasamhr": 4,
      "-": 61,
      "kswk": 31
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @throws ParseZeroException if the user input is \u00270\u0027."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "    T parse(String userInput) throws ParseException, ParseZeroException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 12,
      "kswk": 3
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_PREFIX_PARAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_SORT_PARAM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_ZERO_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_DIFFICULTY_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GENDER_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.PredefinedTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @throws ParseZeroException if the specified index is \u00270\u0027."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "        if (trimmedIndex.equals(\"0\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseZeroException(MESSAGE_ZERO_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Parses {@code parameter} into a String and returns it in lowercase."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param parameter the sorting parameter input by the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @return The sorting parameter as a trimmed lowercase String."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @throws ParseException if the specified parameter is not valid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static String parseSortParams(String parameter) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String trimmedParam \u003d parameter.toLowerCase().trim();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        boolean isLanguage \u003d trimmedParam.equals(\"german\") || trimmedParam.equals(\"english\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                || trimmedParam.equals(\"reversegerman\") || trimmedParam.equals(\"reverseenglish\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        boolean isDifficulty \u003d trimmedParam.equals(\"easytohard\") || trimmedParam.equals(\"hardtoeasy\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        boolean isTime \u003d trimmedParam.equals(\"earliest\") || trimmedParam.equals(\"latest\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (!isLanguage \u0026\u0026 !isDifficulty \u0026\u0026 !isTime) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_SORT_PARAM, parameter));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return trimmedParam;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Parses a {@code String German phrase} into a {@code German Phrase}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws ParseException if the given {@code German Phrase} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static GermanPhrase parseGermanPhrase(String germanPhrase) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(germanPhrase);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String trimmedGermanPhrase \u003d germanPhrase.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!GermanPhrase.isValidGermanPhrase(trimmedGermanPhrase)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new ParseException(GermanPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new GermanPhrase(trimmedGermanPhrase);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static EnglishPhrase parseEnglishPhrase(String englishPhrase) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(englishPhrase);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String trimmedEnglishPhrase \u003d englishPhrase.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!EnglishPhrase.isValidEnglishPhrase(trimmedEnglishPhrase)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new ParseException(EnglishPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new EnglishPhrase(trimmedEnglishPhrase);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Parses a {@code String Predefined tag or a Gender Tag} into a {@code Predefined tag }."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @throws ParseException if the given {@code Predefined tag} is invalid or if the given {@code prefix} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static PredefinedTag parsePredefinedTag(Prefix prefix, String predefinedTag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(predefinedTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String trimmedPredefinedTag \u003d predefinedTag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (prefix.equals(PREFIX_DIFFICULTY_TAG)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (!DifficultyTag.isValidDifficultyTag(trimmedPredefinedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new ParseException(DifficultyTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return new DifficultyTag(trimmedPredefinedTag.toUpperCase());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (prefix.equals(PREFIX_GENDER_TAG)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            if (!GenderTag.isValidGenderTag(trimmedPredefinedTag)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                throw new ParseException(GenderTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            return new GenderTag(trimmedPredefinedTag.toUpperCase());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_PREFIX_PARAM, prefix));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 26,
      "YangJiyu98": 46,
      "-": 68,
      "kswk": 10
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add g/Vergesslichkeit e/Forgetfulness d/hard t/chapter1\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 37,
      "kswk": 2
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/RandomQuizCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.RandomQuizCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Parses input arguments and creates a new RandomQuizCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class RandomQuizCommandParser implements Parser\u003cRandomQuizCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static Logger logger \u003d Logger.getLogger(\"RandomQuizCommandParserLogger\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RandomQuizCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * and returns a RandomQuizCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @throws ParseZeroException if the user input is \u00270\u0027."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public RandomQuizCommand parse(String args) throws ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "        logger.log(Level.INFO, \"Start processing arguments\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "            assert index.getOneBased() \u003e 0 : \"Parameter of RandomQuizCommand must be more than 0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "            logger.log(Level.INFO, \"End of processing\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "            return new RandomQuizCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "        } catch (ParseZeroException pze) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "            logger.log(Level.WARNING, \"Processing error\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseZeroException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "                    String.format(MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "                            RandomQuizCommand.MESSAGE_USAGE), pze);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "            logger.log(Level.WARNING, \"Processing error\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RandomQuizCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kswk": 45
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assert args !\u003d null : \"Input cannot be null!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            String params \u003d ParserUtil.parseSortParams(args);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return new SortCommand(params);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 24
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/logic/parser/exceptions/ParseZeroException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "package seedu.forgetfulnus.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Represents a parse error due to a param of \u00270\u0027 encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class ParseZeroException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public ParseZeroException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public ParseZeroException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kswk": 15
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/Glossary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.UniqueFlashCardList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashCard comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class Glossary implements ReadOnlyGlossary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final UniqueFlashCardList flashCards;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCards \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Glossary() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Creates a Glossary using the FlashCards in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Glossary(ReadOnlyGlossary toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashCards}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code flashCards} must not contain duplicate flashCards."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.flashCards.setFlashCards(flashCards);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Resets the existing data of this {@code Glossary} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void resetData(ReadOnlyGlossary newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        setFlashCards(newData.getFlashCardList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns true if a flashCard with the same identity as {@code flashCard} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean hasFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(flashCard);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return flashCards.contains(flashCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Adds a flashcard to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The flashcard must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void addFlashCard(FlashCard p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCards.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashCard}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The flashcard identity of {@code editedFlashCard} must not be the same as another existing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * flashcard in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(editedFlashCard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCards.setFlashCard(target, editedFlashCard);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void removeFlashCard(FlashCard key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCards.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return flashCards.asUnmodifiableObservableList().size() + \" flashCards\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFlashCardList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return flashCards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kswk"
        },
        "content": "                || (other instanceof Glossary // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 flashCards.equals(((Glossary) other).flashCards));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return flashCards.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "rayasamhr": 31,
      "-": 81,
      "kswk": 6
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /** {@code Predicate} that always evaluates to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "    Predicate\u003cFlashCard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Returns the user prefs\u0027 glossary file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "    Path getGlossaryFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Sets the user prefs\u0027 glossary file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "    void setGlossaryFilePath(Path glossaryFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Replaces glossary data with the data in {@code glossary}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "    void setGlossary(ReadOnlyGlossary glossary);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /** Returns the Glossary */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "    ReadOnlyGlossary getGlossary();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the user prefs\u0027 score file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Path getScoreFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Sets the user prefs\u0027 score file path."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void setScoreFilePath(Path scoreFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces score data with the data in {@code scoreList}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void setScoreList(ScoreList scoreList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /** Returns the score list */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    ScoreList getScoreList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Returns true if a flashCard with the same identity as {@code flashCard} exists in the glossary."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    boolean hasFlashCard(FlashCard flashCard);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * The flashcard must exist in the glossary."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void deleteFlashCard(FlashCard target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Adds the given flashCard."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * {@code flashCard} must not already exist in the glossary."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void addFlashCard(FlashCard flashCard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashCard}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * {@code target} must exist in the glossary."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The flashcard identity of {@code editedFlashCard} must not be the same as"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * another existing flashcard in the glossary."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void setFlashCard(FlashCard target, FlashCard editedFlashCard);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFilteredFlashCardList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void updateFilteredPhraseList(Predicate\u003cFlashCard\u003e predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the predicate in the class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    void updateFilteredPhraseList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Increments index of the current flashcard in the filtered list in quiz mode."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void addCardToScore(FlashCard next);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Gets the index of the current flashcard in the filtered list in quiz mode."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return index"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    int getQuizModeIndex();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void saveScore();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Sets the program to quiz mode or ends the quiz mode."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     *  @param quizMode true to set to quiz mode, false to end quiz mode"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    void setQuizMode(boolean quizMode);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Returns if the program is in quiz mode."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return isQuizMode"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    boolean isQuizMode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Sets the program to random quiz mode or ends the random quiz mode. Upon entering"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * random quiz mode, current glossary is backed up and upon ending random quiz mode,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * current glossary is restored with previously backed up glossary."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kswk"
        },
        "content": "     *  @param isRandomQuiz true to set to random quiz mode, false to end random quiz mode."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kswk"
        },
        "content": "    void setRandomQuizMode(boolean isRandomQuiz);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Returns if the program is in random quiz mode."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @return isRandomQuiz"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kswk"
        },
        "content": "    boolean isRandomQuizMode();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Increments the number of correct attempts in current quiz."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    void updateWithCorrectAttempt();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Returns the number of correct attempts in this quiz."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return quizScore"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    int getQuizScore();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Returns the total questions in this quiz."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * @return quizTotalQuestions"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    int getQuizTotalQuestions();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Resets the program at the end of a quiz."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    void resetQuiz();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "zhizhizhizhizhi": 47,
      "rayasamhr": 34,
      "-": 58,
      "kswk": 30
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.Score;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Represents the in-memory model of the glossary data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Glossary glossary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Glossary backupGlossary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private FilteredList\u003cFlashCard\u003e filteredFlashCards;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Predicate\u003cFlashCard\u003e predicate \u003d PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private boolean isQuizMode \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private boolean isRandomQuiz \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Score quizScore;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ScoreList scoreList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Initialises a ModelManager with the given glossary and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ModelManager(ReadOnlyGlossary initialData, ReadOnlyScoreList initialScores, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireAllNonNull(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        logger.fine(\"Initialising with glossary: \" + initialData + \", scores: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + initialScores + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.glossary \u003d new Glossary(initialData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.scoreList \u003d new ScoreList(initialScores);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        filteredFlashCards \u003d new FilteredList\u003c\u003e(this.glossary.getFlashCardList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Path getGlossaryFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return userPrefs.getGlossaryFilePath();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setGlossaryFilePath(Path glossaryFilePath) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kswk"
        },
        "content": "        requireNonNull(glossaryFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kswk"
        },
        "content": "        userPrefs.setGlossaryFilePath(glossaryFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Path getScoreFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return userPrefs.getScoresFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setScoreFilePath(Path scoreFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(scoreFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        userPrefs.setScoresFilePath(scoreFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kswk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Glossary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setGlossary(ReadOnlyGlossary glossary) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.glossary.resetData(glossary);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public ReadOnlyGlossary getGlossary() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return glossary;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean hasFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(flashCard);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return glossary.hasFlashCard(flashCard);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void deleteFlashCard(FlashCard target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        glossary.removeFlashCard(target);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void addFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        glossary.addFlashCard(flashCard);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        updateFilteredPhraseList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireAllNonNull(target, editedFlashCard);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        glossary.setFlashCard(target, editedFlashCard);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Score List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setScoreList(ScoreList scoreList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.scoreList.resetData(scoreList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ScoreList getScoreList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return scoreList;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered FlashCard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code FlashCard} backed by the internal list of"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * {@code versionedGlossary}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e getFilteredFlashCardList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return filteredFlashCards;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void updateFilteredPhraseList(Predicate\u003cFlashCard\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        filteredFlashCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void updateFilteredPhraseList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        filteredFlashCards.setPredicate(predicate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Quiz Mode \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int getQuizScore() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return quizScore.getScore();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int getQuizTotalQuestions() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return quizScore.getNumQuestions();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Resets the program at the end of a quiz."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void resetQuiz() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        int quizSize \u003d filteredFlashCards.size();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        quizScore \u003d new Score(0, quizSize, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void addCardToScore(FlashCard next) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        quizScore.addFlashcard(next);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void updateWithCorrectAttempt() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        quizScore.incrementScore();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public int getQuizModeIndex() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return quizScore.getIndex();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveScore() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        scoreList.addScore(quizScore);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void setQuizMode(boolean isQuizMode) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        this.isQuizMode \u003d isQuizMode;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        if (isQuizMode) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            resetQuiz();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public boolean isQuizMode() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return isQuizMode;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setRandomQuizMode(boolean isRandomQuiz) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.isRandomQuiz \u003d isRandomQuiz;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kswk"
        },
        "content": "        if (isRandomQuiz) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kswk"
        },
        "content": "            backupGlossary \u003d new Glossary(glossary);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kswk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kswk"
        },
        "content": "            setGlossary(new Glossary(backupGlossary));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kswk"
        },
        "content": "            updateFilteredPhraseList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public boolean isRandomQuizMode() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return isRandomQuiz;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return glossary.equals(other.glossary)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 filteredFlashCards.equals(other.filteredFlashCards);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "zhizhizhizhizhi": 36,
      "rayasamhr": 79,
      "-": 103,
      "kswk": 37
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/ReadOnlyGlossary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Unmodifiable view of a glossary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "public interface ReadOnlyGlossary {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * This list will not contain any duplicate flashcard."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    ObservableList\u003cFlashCard\u003e getFlashCardList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "rayasamhr": 3,
      "-": 10,
      "kswk": 2
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/ReadOnlyScoreList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.Score;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public interface ReadOnlyScoreList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    ObservableList\u003cScore\u003e getScoreList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 8
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "    Path getGlossaryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Path getScoresFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "rayasamhr": 1,
      "-": 14,
      "kswk": 1
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/ScoreList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.Score;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.UniqueScoreList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class ScoreList implements ReadOnlyScoreList {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final UniqueScoreList scores;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ScoreList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        scores \u003d new UniqueScoreList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Wraps all score data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Duplicates are not allowed (by .isSameScore comparison)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ScoreList(ReadOnlyScoreList initialScores) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        resetData(initialScores);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Resets the existing data of this {@code ScoreList} with {@code scoreList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void resetData(ReadOnlyScoreList scoreList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(scoreList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        setScores(scoreList.getScoreList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private void setScores(List\u003cScore\u003e scoreList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.scores.setScores(scoreList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ObservableList\u003cScore\u003e getScoreList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return scores.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void addScore(Score score) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        scores.add(score);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns String containing the numeric score and German words tested for each"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code Score} in the {@code ScoreList}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @return String describing each numeric score and German words tested"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public String asViewable() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ListIterator\u003cScore\u003e iterator \u003d scores.getReverseIterator();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        while (iterator.hasPrevious()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            Score previous \u003d iterator.previous();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            sb.append(String.format(\"\\n\\nScore: [%s / %s]\", previous.getScore(), previous.getNumQuestions()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            sb.append(\"\\nWords tested:\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            List\u003cFlashCard\u003e fc \u003d previous.getFlashcards();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            ListIterator\u003cFlashCard\u003e fcIterator \u003d fc.listIterator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            while (fcIterator.hasNext()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                sb.append(\"\\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                sb.append(String.format(\"%d. \", fcIterator.nextIndex() + 1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                sb.append(fcIterator.next().getGermanPhrase());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 74
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Path glossaryFilePath \u003d Paths.get(\"data\" , \"glossary.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Path scoresFilePath \u003d Paths.get(\"data\" , \"scores.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "        setGlossaryFilePath(newUserPrefs.getGlossaryFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        setScoresFilePath(newUserPrefs.getScoresFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Path getGlossaryFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return glossaryFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Path getScoresFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return scoresFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setGlossaryFilePath(Path glossaryFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "        requireNonNull(glossaryFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.glossaryFilePath \u003d glossaryFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setScoresFilePath(Path scoresFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(scoresFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.scoresFilePath \u003d scoresFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 glossaryFilePath.equals(o.glossaryFilePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 scoresFilePath.equals(o.scoresFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return Objects.hash(guiSettings, glossaryFilePath, scoresFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + glossaryFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        sb.append(\"\\nLocal scores file location : \" + scoresFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "rayasamhr": 14,
      "-": 77,
      "kswk": 8
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/EnglishPhrase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Represents a FlashCard\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEnglishPhrase(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class EnglishPhrase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            \"English phrases should only contain alphabets and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private final String fullEnglishPhrase;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructs a {@code English phrase}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param englishPhrase A valid english phrase."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public EnglishPhrase(String englishPhrase) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(englishPhrase);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        checkArgument(isValidEnglishPhrase(englishPhrase), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        fullEnglishPhrase \u003d englishPhrase;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static boolean isValidEnglishPhrase(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     * Returns true if the given string is equivalent to the full english phrase, case insensitive."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public boolean isCorrectAttempt(String attempt) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        assert (attempt !\u003d null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return attempt.trim().replaceAll(\"( )+\", \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                .toLowerCase().equals(fullEnglishPhrase.toLowerCase());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return fullEnglishPhrase;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                || (other instanceof EnglishPhrase // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                \u0026\u0026 fullEnglishPhrase.toLowerCase()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .equals(((EnglishPhrase) other).fullEnglishPhrase.toLowerCase())); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return fullEnglishPhrase.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "YangJiyu98": 48,
      "zhizhizhizhizhi": 9,
      "rayasamhr": 1
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/FlashCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a Phrase in the Glossary."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class FlashCard {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final GermanPhrase germanPhrase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final EnglishPhrase englishPhrase;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final DifficultyTag difficultyTag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final GenderTag genderTag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Order order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private boolean showingEnglish \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public FlashCard(GermanPhrase germanPhrase, EnglishPhrase englishPhrase,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                     DifficultyTag difficultyTag, GenderTag genderTag, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireAllNonNull(germanPhrase, englishPhrase, difficultyTag, genderTag, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.germanPhrase \u003d germanPhrase;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.englishPhrase \u003d englishPhrase;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.difficultyTag \u003d difficultyTag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.genderTag \u003d genderTag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.order \u003d new Order(Order.getNextOrderOfAddition());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Used only for testing. Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FlashCard(GermanPhrase germanPhrase, EnglishPhrase englishPhrase,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                     DifficultyTag difficultyTag, GenderTag genderTag, Set\u003cTag\u003e tags, Order order) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireAllNonNull(germanPhrase, englishPhrase, difficultyTag, genderTag, tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.germanPhrase \u003d germanPhrase;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.englishPhrase \u003d englishPhrase;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.difficultyTag \u003d difficultyTag;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.genderTag \u003d genderTag;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public GermanPhrase getGermanPhrase() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return germanPhrase;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public EnglishPhrase getEnglishPhrase() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return englishPhrase;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public DifficultyTag getDifficultyTag() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return difficultyTag;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public GenderTag getGenderTag() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return genderTag;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public Order getOrder() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FlashCard setOrder(int num) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.order \u003d new Order(num);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Returns true if both flashcards of the same German phrase have the same English phrase."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * This defines a weaker notion of equality between two flashcards."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isSameFlashCard(FlashCard otherFlashCard) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (otherFlashCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return otherFlashCard !\u003d null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 otherFlashCard.getGermanPhrase().equals(getGermanPhrase())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                \u0026\u0026 otherFlashCard.getEnglishPhrase().equals(getEnglishPhrase());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Returns true if both flashcards have the same data fields, except for their Orders."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * This defines a stronger notion of equality between two flashcards."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!(other instanceof FlashCard)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard otherFlashCard \u003d (FlashCard) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return otherFlashCard.getGermanPhrase().equals(getGermanPhrase())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 otherFlashCard.getEnglishPhrase().equals(getEnglishPhrase())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                \u0026\u0026 otherFlashCard.getDifficultyTag().equals(getDifficultyTag())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                \u0026\u0026 otherFlashCard.getGenderTag().equals(getGenderTag())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 otherFlashCard.getTags().equals(getTags());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return Objects.hash(germanPhrase, englishPhrase, difficultyTag, genderTag, tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        builder.append(getGermanPhrase())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .append(\"\\nEnglish phrase: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .append(getEnglishPhrase())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .append(\"\\nDifficulty: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .append(getDifficultyTag())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .append(\"\\nGender: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .append(getGenderTag())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .append(\"\\nTags: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void updateShowingEnglish(boolean showingEnglish) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        this.showingEnglish \u003d showingEnglish;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public boolean isShowingEnglish() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        return showingEnglish;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public FlashCard copy() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new FlashCard(germanPhrase, englishPhrase, difficultyTag, genderTag, tags, order);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 25,
      "YangJiyu98": 45,
      "zhizhizhizhizhi": 13,
      "rayasamhr": 14,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/GermanPhrase.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a german phrase in the glossary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGermanPhrase(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class GermanPhrase {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            \"German phrases should only contain english alphabets and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * The first character of the German phrase must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{L}][\\\\p{L} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private final String fullGermanPhrase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructs a {@code German phrase}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param germanPhrase A valid german phrase."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public GermanPhrase(String germanPhrase) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(germanPhrase);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        checkArgument(isValidGermanPhrase(germanPhrase), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        fullGermanPhrase \u003d germanPhrase;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Returns true if a given string is a valid german phrase."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static boolean isValidGermanPhrase(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return fullGermanPhrase;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                || (other instanceof GermanPhrase // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                \u0026\u0026 fullGermanPhrase.toLowerCase()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .equals(((GermanPhrase) other).fullGermanPhrase.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return fullGermanPhrase.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "YangJiyu98": 53,
      "kswk": 2
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/GermanPhraseContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Tests that a {@code FlashCard}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class GermanPhraseContainsKeywordsPredicate implements Predicate\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public GermanPhraseContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean test(FlashCard flashCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        .containsWordIgnoreCase(flashCard.getGermanPhrase().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                || (other instanceof GermanPhraseContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                \u0026\u0026 keywords.equals(((GermanPhraseContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "YangJiyu98": 1,
      "rayasamhr": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/Order.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " * Tracks the order in which a FlashCard is added to the Glossary. No two unique FlashCards should have the same order"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " * at any point in time. The user should never directly see or interact with this field."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class Order implements Comparable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Static variable to track order in which a FlashCard is added. Initialised to -1 at the start of the app, but"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * will be reassigned the moment a new FlashCard is added or deleted."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Order cannot be less than one!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static int nextOrderOfAddition \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private int value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public Order(int value) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void setValue(int value) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public int getValue() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static int getNextOrderOfAddition() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return nextOrderOfAddition;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static void setNextOrderOfAddition(int value) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        nextOrderOfAddition \u003d value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return (other instanceof Order \u0026\u0026 value \u003d\u003d ((Order) other).getValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public int compareTo(Order other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return value - other.value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return String.valueOf(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 47
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/UniqueFlashCardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.exceptions.DuplicateFlashCardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.exceptions.FlashCardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * A flashcard is considered unique by comparing using {@code FlashCard#isSameFlashCard(FlashCard)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * As such, adding and updating of flashcards uses FlashCard#isSameFlashCard(FlashCard) for equality so as to"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * ensure that the flashcard being added or updated is unique in terms of identity in the UniqueFlashCardList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * However, the removal of a flashcard uses FlashCard#equals(Object) so as to ensure that the flashcard"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * @see FlashCard#isSameFlashCard(FlashCard)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class UniqueFlashCardList implements Iterable\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final ObservableList\u003cFlashCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final ObservableList\u003cFlashCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns true if the list contains an equivalent flashcard as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean contains(FlashCard toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashCard);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Adds a flashcard to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The flashcard must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void add(FlashCard toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DuplicateFlashCardException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the flashcard {@code target} in the list with {@code editedFlashCard}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The flashcard identity of {@code editedFlashCard} must not be the same as another existing flashcard in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireAllNonNull(target, editedFlashCard);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new FlashCardNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!target.isSameFlashCard(editedFlashCard) \u0026\u0026 contains(editedFlashCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DuplicateFlashCardException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.set(index, editedFlashCard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Removes the equivalent flashcard from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The flashcard must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void remove(FlashCard toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new FlashCardNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards(UniqueFlashCardList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the contents of this list with {@code flashCards}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code flashCards} must not contain duplicate flashCards."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireAllNonNull(flashCards);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!flashCardsAreUnique(flashCards)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DuplicateFlashCardException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.setAll(flashCards);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ObservableList\u003cFlashCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Iterator\u003cFlashCard\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                || (other instanceof UniqueFlashCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashCardList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns true if {@code flashCards} contains only unique flashCards."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private boolean flashCardsAreUnique(List\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (int i \u003d 0; i \u003c flashCards.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashCards.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                if (flashCards.get(i).isSameFlashCard(flashCards.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 4,
      "rayasamhr": 134
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/exceptions/DuplicateFlashCardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Signals that the operation will result in duplicate FlashCards (FlashCards are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * if they have the same contents)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class DuplicateFlashCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public DuplicateFlashCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "rayasamhr": 10
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/flashcard/exceptions/FlashCardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Signals that the operation is unable to find the specified flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class FlashCardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "rayasamhr": 5
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/score/Score.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.model.score;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final int numQuestions;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final List\u003cFlashCard\u003e flashCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Represents a Score from a round of quizzing."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Guarantees: details are present and not null."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Score(int score, int numQuestions, List\u003cFlashCard\u003e testedFlashCards) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.numQuestions \u003d numQuestions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.flashCards.addAll(testedFlashCards);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int getScore() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int getNumQuestions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return this.numQuestions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public List\u003cFlashCard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return flashCards;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void addFlashcard(FlashCard next) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCards.add(next);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void incrementScore() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        score++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return this.flashCards.size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean isSameScore(Score editedScore) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return this.flashCards.equals(editedScore.flashCards);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 51
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/score/UniqueScoreList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.model.score;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static seedu.forgetfulnus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.exceptions.DuplicateScoreException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.exceptions.ScoreNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class UniqueScoreList implements Iterable\u003cScore\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final ObservableList\u003cScore\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final ObservableList\u003cScore\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns true if the list contains an equivalent score as the given argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean contains(Score toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameScore);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns an equivalent {@code Score} to the given argument,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * if such a {@code Score} is present in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cScore\u003e findMatch(Score toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.stream().filter(toCheck::isSameScore)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .findAny();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Adds a score to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * If the score contains the same flashcard list as any other score"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * already in the list, the original score is overwritten."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void add(Score toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Optional\u003cScore\u003e previousMatch \u003d findMatch(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        previousMatch.ifPresentOrElse(score -\u003e setScore(score, toAdd), () -\u003e internalList.add(toAdd));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the Score {@code target} in the list with {@code editedScore}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The Score identity of {@code editedScore} must not be the same as another existing Score in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setScore(Score target, Score editedScore) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireAllNonNull(target, editedScore);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new ScoreNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!target.isSameScore(editedScore) \u0026\u0026 contains(editedScore)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DuplicateScoreException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.set(index, editedScore);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Removes the equivalent score from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * The score must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void remove(Score toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new ScoreNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setScores(UniqueScoreList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Replaces the contents of this list with {@code scores}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code scores} must not contain duplicate scores."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setScores(List\u003cScore\u003e scores) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireAllNonNull(scores);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!scoresAreUnique(scores)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DuplicateScoreException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        internalList.setAll(scores);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ObservableList\u003cScore\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Iterator\u003cScore\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ListIterator\u003cScore\u003e getReverseIterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.listIterator(internalList.size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                || (other instanceof UniqueScoreList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueScoreList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns true if {@code scores} contains only unique scores."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private boolean scoresAreUnique(List\u003cScore\u003e scores) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (int i \u003d 0; i \u003c scores.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            for (int j \u003d i + 1; j \u003c scores.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                if (scores.get(i).isSameScore(scores.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 142
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/score/exceptions/DuplicateScoreException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.model.score.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class DuplicateScoreException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 4
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/score/exceptions/ScoreNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.model.score.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class ScoreNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ScoreNotFoundException() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 7
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/tag/DifficultyTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a Predefined Difficulty Tag in the Glossary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidDifficultyTag(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class DifficultyTag extends PredefinedTag implements Comparable\u003cDifficultyTag\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Difficulty levels should be EASY, MEDIUM or HARD only\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String EASY_TAG \u003d \"EASY\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MEDIUM_TAG \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String HARD_TAG \u003d \"HARD\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructs a {@code Difficulty Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param tagName A valid difficulty tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public DifficultyTag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        checkArgument(isValidDifficultyTag(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Returns true if a given string is a valid difficulty tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static boolean isValidDifficultyTag(String testInput) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String test \u003d testInput.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return test.equalsIgnoreCase(EASY_TAG) || test.equalsIgnoreCase(MEDIUM_TAG) || test.equalsIgnoreCase(HARD_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                || (other instanceof DifficultyTag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                \u0026\u0026 tagName.equals(((DifficultyTag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Compares this {@code DifficultyTag} to another {@code DifficultyTag}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param other the DifficultyTag to compare to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @return an integer representing whether this DifficultyTag is \"greater than\" the other DifficultyTag"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public int compareTo(DifficultyTag other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        int thisValue \u003d this.tagName.equals(EASY_TAG)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                ? 1"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                : this.tagName.equals(MEDIUM_TAG)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        ? 2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        : 3;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        int otherValue \u003d other.tagName.equals(EASY_TAG)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                ? 1"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                : other.tagName.equals(MEDIUM_TAG)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        ? 2"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        : 3;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return thisValue - otherValue;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 19,
      "YangJiyu98": 54
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/tag/GenderTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a Predefined Gender Tag in the Glossary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidGenderTag(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class GenderTag extends PredefinedTag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender Tags should be M, F, Neutral or omitted only\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String MASCULINE_GENDER_TAG \u003d \"M\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String FEMININE_GENDER_TAG \u003d \"F\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String NEUTRAL_GENDER_TAG \u003d \"NEUTRAL\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String NONE_GENDER_TAG \u003d \"NONE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Constructs a {@code Gender Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * @param tagName A valid gender tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public GenderTag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        super(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        checkArgument(isValidGenderTag(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Returns true if a given string is a valid gender tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static boolean isValidGenderTag(String testInput) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String test \u003d testInput.replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return test.equalsIgnoreCase(MASCULINE_GENDER_TAG) || test.equalsIgnoreCase(FEMININE_GENDER_TAG)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                || test.equalsIgnoreCase(NEUTRAL_GENDER_TAG) || test.equalsIgnoreCase(NONE_GENDER_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                || (other instanceof GenderTag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                \u0026\u0026 tagName.equals(((GenderTag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 62
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/tag/PredefinedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public abstract class PredefinedTag {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    protected final String tagName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    PredefinedTag(String tagName) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 11
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Represents a Tag in the Glossary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tag names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "YangJiyu98": 1,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Contains utility methods for populating {@code Glossary} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static FlashCard[] getSampleFlashCards() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new FlashCard[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Montag\"), new EnglishPhrase(\"Monday\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    new DifficultyTag(\"EASY\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\"), new Order(1)),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Dienstag\"), new EnglishPhrase(\"Tuesday\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    new DifficultyTag(\"EASY\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\", \"hard\"), new Order(2)),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Mittwoch\"), new EnglishPhrase(\"Wednesday\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    new DifficultyTag(\"MEDIUM\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\", \"veryhard\"), new Order(3)),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Donnerstag\"), new EnglishPhrase(\"Thursday\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    new DifficultyTag(\"MEDIUM\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\"), new Order(4)),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Freitag\"), new EnglishPhrase(\"Friday\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    new DifficultyTag(\"MEDIUM\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\"), new Order(5)),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Samstag\"), new EnglishPhrase(\"Saturday\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    new DifficultyTag(\"HARD\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\"), new Order(6)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            new FlashCard(new GermanPhrase(\"Sonntag\"), new EnglishPhrase(\"Sunday\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    new DifficultyTag(\"HARD\"), new GenderTag(\"M\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    getTagSet(\"day\"), new Order(7))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static ReadOnlyGlossary getSampleGlossary() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary sampleG \u003d new Glossary();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (FlashCard sampleFlashCard : getSampleFlashCards()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            sampleG.addFlashCard(sampleFlashCard);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return sampleG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 21,
      "YangJiyu98": 10,
      "rayasamhr": 4,
      "-": 25,
      "kswk": 4
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonAdaptedFlashCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * Jackson-friendly version of {@link FlashCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "class JsonAdaptedFlashCard {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FlashCard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final String germanPhrase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final String englishPhrase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final String difficultyTag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private final String genderTag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private final String order;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given flashcard details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public JsonAdaptedFlashCard(@JsonProperty(\"germanPhrase\") String germanPhrase,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                                @JsonProperty(\"englishPhrase\") String englishPhrase,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                                @JsonProperty(\"difficultyTag\") String difficultyTag,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                                @JsonProperty(\"genderTag\") String genderTag,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                                @JsonProperty(\"order\") String order) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.germanPhrase \u003d germanPhrase;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.englishPhrase \u003d englishPhrase;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.difficultyTag \u003d difficultyTag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.genderTag \u003d genderTag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Converts a given {@code FlashCard} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public JsonAdaptedFlashCard(FlashCard source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        germanPhrase \u003d source.getGermanPhrase().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        englishPhrase \u003d source.getEnglishPhrase().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        difficultyTag \u003d source.getDifficultyTag().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        genderTag \u003d source.getGenderTag().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        order \u003d source.getOrder().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code FlashCard} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public FlashCard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (germanPhrase \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    GermanPhrase.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!GermanPhrase.isValidGermanPhrase(germanPhrase)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(GermanPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        final GermanPhrase modelGermanPhrase \u003d new GermanPhrase(germanPhrase);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (englishPhrase \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    EnglishPhrase.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!EnglishPhrase.isValidEnglishPhrase(englishPhrase)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(EnglishPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        final EnglishPhrase modelEnglishPhrase \u003d new EnglishPhrase(englishPhrase);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (difficultyTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    DifficultyTag.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!DifficultyTag.isValidDifficultyTag(difficultyTag)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(DifficultyTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        final DifficultyTag modelDifficultyTag \u003d new DifficultyTag(difficultyTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (genderTag \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                    GenderTag.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (!GenderTag.isValidGenderTag(genderTag)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            throw new IllegalValueException(GenderTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        final GenderTag modelGenderTag \u003d new GenderTag(genderTag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (order \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                    Order.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (Integer.parseInt(order) \u003c 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            throw new IllegalValueException(Order.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        final Order modelOrder \u003d new Order(Integer.parseInt(order));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new FlashCard(modelGermanPhrase, modelEnglishPhrase, modelDifficultyTag,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                modelGenderTag, modelTags, modelOrder);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 26,
      "YangJiyu98": 52,
      "rayasamhr": 7,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonAdaptedScore.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.Score;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class JsonAdaptedScore {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final int numQuestions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final List\u003cJsonAdaptedFlashCard\u003e flashCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Constructs a {@code JsonAdaptedScore} with the given flashcard details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public JsonAdaptedScore(@JsonProperty(\"score\") int score,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                                @JsonProperty(\"numQuestions\") int numQuestions,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                                @JsonProperty(\"wordsTested\") List\u003cJsonAdaptedFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.numQuestions \u003d numQuestions;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (flashCards !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            this.flashCards.addAll(flashCards);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Converts a given {@code Score} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public JsonAdaptedScore(Score source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        score \u003d source.getScore();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        numQuestions \u003d source.getNumQuestions();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCards.addAll(source.getFlashcards().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .map(JsonAdaptedFlashCard::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Converts this Jackson-friendly adapted score object into the model\u0027s {@code Score} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Score toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        final List\u003cFlashCard\u003e testedFlashCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (JsonAdaptedFlashCard card : flashCards) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            testedFlashCards.add(card.toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (score \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new IllegalValueException(\"Invalid number for score\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (numQuestions \u003c 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new IllegalValueException(\"Number of questions cannot be less than 0\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new Score(score, numQuestions, testedFlashCards);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 65
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonGlossaryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.storage.interfaces.ObjectStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": " * A class to access Glossary data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class JsonGlossaryStorage implements ObjectStorage\u003cReadOnlyGlossary\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public JsonGlossaryStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cReadOnlyGlossary\u003e readFile() throws DataConversionException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return readFile(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Similar to {@link #readFile()}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cReadOnlyGlossary\u003e readFile(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Optional\u003cJsonSerializableGlossary\u003e jsonGlossary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "                filePath, JsonSerializableGlossary.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (jsonGlossary.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "            return Optional.of(jsonGlossary.get().toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveFile(ReadOnlyGlossary file) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        saveFile(file, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Similar to {@link #saveFile(ReadOnlyGlossary)}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveFile(ReadOnlyGlossary file, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableGlossary(file), filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "rayasamhr": 21,
      "-": 52,
      "kswk": 5
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonScoreList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyScoreList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.score.Score;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "@JsonRootName(value \u003d \"scores\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class JsonScoreList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final List\u003cJsonAdaptedScore\u003e scores \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Constructs a {@code JsonSerializableScore} with the given scores."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public JsonScoreList(@JsonProperty(\"scores\") List\u003cJsonAdaptedScore\u003e scores) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.scores.addAll(scores);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public JsonScoreList(ReadOnlyScoreList source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        scores.addAll(source.getScoreList().stream().map(JsonAdaptedScore::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Converts this score list into the model\u0027s {@code ScoreList} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public ScoreList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ScoreList scoreList \u003d new ScoreList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        for (JsonAdaptedScore jsonAdaptedScore : scores) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            Score score \u003d jsonAdaptedScore.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            scoreList.addScore(score);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return scoreList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 47
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonScoreStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyScoreList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.storage.interfaces.ObjectStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * A class to access Score data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class JsonScoreStorage implements ObjectStorage\u003cReadOnlyScoreList\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonScoreStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public JsonScoreStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Path getFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cReadOnlyScoreList\u003e readFile() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return readFile(filePath);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cReadOnlyScoreList\u003e readFile(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Optional\u003cJsonScoreList\u003e jsonScoreList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                filePath, JsonScoreList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (jsonScoreList.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return Optional.of(jsonScoreList.get().toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + e.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveFile(ReadOnlyScoreList scoreList) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        saveFile(scoreList, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveFile(ReadOnlyScoreList scoreList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(scoreList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonScoreList(scoreList), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 73
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonSerializableGlossary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": " * An Immutable Glossary that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "@JsonRootName(value \u003d \"glossary\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "class JsonSerializableGlossary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "            \"Flashcards list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private final List\u003cJsonAdaptedFlashCard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Constructs a {@code JsonSerializableGlossary} with the given flashcards."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public JsonSerializableGlossary(@JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashCard\u003e flashcards) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * {@code JsonSerializableGlossary}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public JsonSerializableGlossary(ReadOnlyGlossary source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "        flashcards.addAll(source.getFlashCardList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .map(JsonAdaptedFlashCard::new)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Glossary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary glossary \u003d new Glossary();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kswk"
        },
        "content": "        for (JsonAdaptedFlashCard jsonAdaptedFlashCard : flashcards) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            FlashCard flashCard \u003d jsonAdaptedFlashCard.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (glossary.hasFlashCard(flashCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            glossary.addFlashCard(flashCard);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return glossary;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "rayasamhr": 3,
      "-": 36,
      "kswk": 20
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyScoreList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public interface Storage extends UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "    Path getGlossaryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    Optional\u003cReadOnlyGlossary\u003e readGlossary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Optional\u003cReadOnlyGlossary\u003e readGlossary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    void saveGlossary(ReadOnlyGlossary glossary) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void saveGlossary(ReadOnlyGlossary glossary, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Path getScoreFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Optional\u003cReadOnlyScoreList\u003e readScores() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Optional\u003cReadOnlyScoreList\u003e readScores(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void saveScores(ReadOnlyScoreList scoreList) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void saveScores(ReadOnlyScoreList scoreList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "rayasamhr": 16,
      "-": 20,
      "kswk": 3
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyScoreList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.storage.interfaces.ObjectStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Manages storage of Glossary data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ObjectStorage\u003cReadOnlyGlossary\u003e glossaryStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ObjectStorage\u003cReadOnlyScoreList\u003e scoreStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ObjectStorage\u003cReadOnlyGlossary\u003e},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * {@code ObjectStorage\u003cReadOnlyScoreList\u003e} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public StorageManager(ObjectStorage\u003cReadOnlyGlossary\u003e glossaryStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                          ObjectStorage\u003cReadOnlyScoreList\u003e scoreStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.glossaryStorage \u003d glossaryStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.scoreStorage \u003d scoreStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Glossary methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Path getGlossaryFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return glossaryStorage.getFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Optional\u003cReadOnlyGlossary\u003e readGlossary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return readGlossary(glossaryStorage.getFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Optional\u003cReadOnlyGlossary\u003e readGlossary(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return glossaryStorage.readFile(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void saveGlossary(ReadOnlyGlossary glossary) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        saveGlossary(glossary, glossaryStorage.getFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void saveGlossary(ReadOnlyGlossary glossary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        glossaryStorage.saveFile(glossary, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Score methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Path getScoreFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return scoreStorage.getFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cReadOnlyScoreList\u003e readScores() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return readScores(scoreStorage.getFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public Optional\u003cReadOnlyScoreList\u003e readScores(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return scoreStorage.readFile(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveScores(ReadOnlyScoreList scoreList) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        saveScores(scoreList, scoreStorage.getFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void saveScores(ReadOnlyScoreList scoreList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        scoreStorage.saveFile(scoreList, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "rayasamhr": 42,
      "-": 57,
      "kswk": 8
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " * Represents a storage for {@link seedu.forgetfulnus.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Saves the given {@link seedu.forgetfulnus.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/interfaces/JsonObjectStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.storage.interfaces;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public abstract class JsonObjectStorage\u003cT\u003e implements ObjectStorage\u003cT\u003e {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 4
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/storage/interfaces/ObjectStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "package seedu.forgetfulnus.storage.interfaces;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public interface ObjectStorage\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Path getFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Optional\u003cT\u003e readFile() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    Optional\u003cT\u003e readFile(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void saveFile(T file) throws IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    void saveFile(T file, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 19
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "         * @see seedu.forgetfulnus.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kswk"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, ParseZeroException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "-": 74,
      "kswk": 2
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/FlashCardCardView.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * An UI component that displays information of a {@code FlashCard}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class FlashCardCardView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String FXML \u003d \"FlashCardListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public final FlashCard flashCard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Label germanPhrase;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Label englishPhrase;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private FlowPane difficultyTagEasy;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private FlowPane difficultyTagMedium;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private FlowPane difficultyTagHard;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private FlowPane genderTagM;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private FlowPane genderTagF;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private FlowPane genderTagNeutral;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Creates a {@code FlashCardCode} with the given {@code FlashCard} and index to display."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public FlashCardCardView(FlashCard flashCard, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.flashCard \u003d flashCard;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        germanPhrase.setText(flashCard.getGermanPhrase().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        englishPhrase.setText(flashCard.isShowingEnglish() ? flashCard.getEnglishPhrase().toString() : \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assert DifficultyTag.isValidDifficultyTag(flashCard.getDifficultyTag().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (flashCard.getDifficultyTag().toString().equals(DifficultyTag.EASY_TAG)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            difficultyTagEasy.getChildren().add(new Label(flashCard.getDifficultyTag().toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (flashCard.getDifficultyTag().toString().equals(DifficultyTag.MEDIUM_TAG)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            difficultyTagMedium.getChildren().add(new Label(flashCard.getDifficultyTag().toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (flashCard.getDifficultyTag().toString().equals(DifficultyTag.HARD_TAG)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            difficultyTagHard.getChildren().add(new Label(flashCard.getDifficultyTag().toString()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assert GenderTag.isValidGenderTag(flashCard.getGenderTag().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        if (flashCard.getGenderTag().toString().equals(GenderTag.MASCULINE_GENDER_TAG)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            genderTagM.getChildren().add(new Label(flashCard.getGenderTag().toString()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (flashCard.getGenderTag().toString().equals(GenderTag.FEMININE_GENDER_TAG)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            genderTagF.getChildren().add(new Label(flashCard.getGenderTag().toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        } else if (flashCard.getGenderTag().toString().equals(GenderTag.NEUTRAL_GENDER_TAG)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            genderTagNeutral.getChildren().add(new Label(flashCard.getGenderTag().toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCard.getTags().stream()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        if (!(other instanceof FlashCardCardView)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCardCardView card \u003d (FlashCardCardView) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                \u0026\u0026 flashCard.equals(card.flashCard);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "YangJiyu98": 34,
      "rayasamhr": 9,
      "-": 53,
      "kswk": 1
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/FlashCardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": " * Panel containing the glossary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class FlashCardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String FXML \u003d \"FlashCardListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashCardListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private ListView\u003cFlashCard\u003e flashCardListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Creates a {@code FlashCardListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public FlashCardListPanel(ObservableList\u003cFlashCard\u003e flashCardList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "        flashCardListView.setItems(flashCardList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "        flashCardListView.setCellFactory(listView -\u003e new FlashCardListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code FlashCard} using a {@code FlashCardCardView}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "    class FlashCardListViewCell extends ListCell\u003cFlashCard\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        protected void updateItem(FlashCard flashCard, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            super.updateItem(flashCard, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            if (empty || flashCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                setGraphic(new FlashCardCardView(flashCard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 4,
      "YangJiyu98": 1,
      "rayasamhr": 5,
      "-": 31,
      "kswk": 9
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-w16-2.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "rayasamhr": 1,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private FlashCardListPanel flashCardListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private StackPane flashCardListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kswk"
        },
        "content": "        flashCardListPanel \u003d new FlashCardListPanel(logic.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kswk"
        },
        "content": "        flashCardListPanelPlaceholder.getChildren().add(flashCardListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kswk"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getGlossaryFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kswk"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kswk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kswk"
        },
        "content": "            logic.execute(\"end\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kswk"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kswk"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public FlashCardListPanel getFlashCardListPanel() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return flashCardListPanel;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @see seedu.forgetfulnus.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kswk"
        },
        "content": "            ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 8,
      "-": 178,
      "kswk": 17
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/glossary.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initialising\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "-": 82,
      "kswk": 1
    }
  },
  {
    "path": "src/main/java/seedu/forgetfulnus/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 1,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#difficultyTagEasy {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#difficultyTagEasy .label {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-color: #00ff00;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#difficultyTagMedium .label {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-color: #ffff00;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#difficultyTagHard .label {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-color: #ff0000;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#genderTagM .label {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-color: #add8e6;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#genderTagF .label {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-color: #e3b0c8;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "#genderTagNeutral .label {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-color: #d3d3d3;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    -fx-font-size: 10;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 59,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/FlashCardListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        \u003cLabel fx:id\u003d\"germanPhrase\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"difficultyTagEasy\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"difficultyTagMedium\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"difficultyTagHard\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"genderTagM\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"genderTagF\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"genderTagNeutral\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "      \u003cLabel fx:id\u003d\"englishPhrase\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$englishPhrase\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "YangJiyu98": 14,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/FlashCardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \u003cListView fx:id\u003d\"flashCardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "kswk": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "         title\u003d\"ForgetfulNUS\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \u003cImage url\u003d\"@/images/glossary.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        \u003cVBox fx:id\u003d\"flashCardList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "          \u003cStackPane fx:id\u003d\"flashCardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "rayasamhr": 1,
      "-": 55,
      "kswk": 3
    }
  },
  {
    "path": "src/test/data/JsonGlossaryStorageTest/invalidAndValidFlashCardGlossary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"germanPhrase\": \"Valid Person\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"englishPhrase\": \"englishphrase\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"germanPhrase\": \"Person With Invalid English phrase Field\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"englishPhrase\": \"948@@@@2424\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"2\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 4,
      "YangJiyu98": 4,
      "-": 4,
      "kswk": 1
    }
  },
  {
    "path": "src/test/data/JsonGlossaryStorageTest/invalidFlashCardGlossary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"germanPhrase\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"englishPhrase\": \"englishPhrase\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "YangJiyu98": 2,
      "-": 3,
      "kswk": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableGlossaryTest/duplicateFlashCardGlossary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"germanPhrase\": \"Montag\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"englishPhrase\": \"Monday\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\": [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"germanPhrase\": \"Montag\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"englishPhrase\": \"Monday\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\": [ \"friends\" ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"2\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 4,
      "YangJiyu98": 8,
      "-": 4,
      "kswk": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableGlossaryTest/invalidFlashCardGlossary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"flashcards\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "    \"germanPhrase\": \"inv@lidPers000n\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"englishPhrase\": \"englishPhrase\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"order\" : \"1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 4,
      "-": 3,
      "kswk": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableGlossaryTest/typicalFlashCardsGlossary.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"_comment\": \"Glossary save file which contains the same FlashCard values as in TypicalFlashCards#getTypicalGlossary()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"flashcards\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Montag\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Monday\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"EASY\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ \"day\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"1\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Dienstag\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Tuesday\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"EASY\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ \"day\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"2\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Mittwoch\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Wednesday\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"3\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Donnerstag\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Thursday\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ \"day\" ],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"4\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Freitag\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Friday\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"MEDIUM\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"5\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Samstag\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Saturday\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"HARD\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"6\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"germanPhrase\" : \"Sonntag\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"englishPhrase\" : \"Sunday\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"difficultyTag\" : \"HARD\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    \"genderTag\" : \"M\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    \"order\" : \"7\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 28,
      "YangJiyu98": 14,
      "-": 9,
      "kswk": 2
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"glossaryFilePath\" : \"glossary.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "kswk": 1
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "  \"glossaryFilePath\" : \"glossary.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/glossary.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.ENGLISH_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.GERMAN_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.FORGETFULNESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.JsonGlossaryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.storage.JsonScoreStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Glossary initialData \u003d new Glossary();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ScoreList initialScores \u003d new ScoreList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "        JsonGlossaryStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "                new JsonGlossaryStorage(temporaryFolder.resolve(\"glossary.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonScoreStorage scoreStorage \u003d new JsonScoreStorage(temporaryFolder.resolve(\"scores.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, scoreStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_EMPTY_GLOSSARY, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kswk"
        },
        "content": "        JsonGlossaryStorage glossaryStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kswk"
        },
        "content": "                new JsonGlossaryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionGlossary.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonScoreStorage scoreStorage \u003d new JsonScoreStorage(temporaryFolder.resolve(\"ioExceptionScores.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        StorageManager storage \u003d new StorageManager(glossaryStorage, scoreStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + GERMAN_DESC_FORGETFULNESS + ENGLISH_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard expectedFlashCard \u003d new FlashCardBuilder(FORGETFULNESS).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.addFlashCard(expectedFlashCard);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void getFilteredFlashCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFlashCardList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kswk"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException, ParseZeroException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static class JsonGlossaryIoExceptionThrowingStub extends JsonGlossaryStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kswk"
        },
        "content": "        private JsonGlossaryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void saveFile(ReadOnlyGlossary glossary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 24,
      "rayasamhr": 16,
      "-": 117,
      "kswk": 10
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void execute_newFlashcard_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.addFlashCard(validFlashCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFlashCard), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFlashCard), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void execute_duplicateFlashcard_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCardInList \u003d model.getGlossary().getFlashCardList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertCommandFailure(new AddCommand(flashCardInList), model, AddCommand.MESSAGE_DUPLICATE_PHRASE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 9,
      "YangJiyu98": 3,
      "rayasamhr": 9,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void constructor_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute_flashCardAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ModelStubAcceptingFlashCardAdded modelStub \u003d new ModelStubAcceptingFlashCardAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFlashCard).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFlashCard), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(Arrays.asList(validFlashCard), modelStub.flashCardsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_duplicateFlashCard_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard validFlashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFlashCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithFlashCard(validFlashCard);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PHRASE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard man \u003d new FlashCardBuilder().withGermanPhrase(\"Mann\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard woman \u003d new FlashCardBuilder().withGermanPhrase(\"Frau\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        AddCommand addManCommand \u003d new AddCommand(man);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        AddCommand addWomanCommand \u003d new AddCommand(woman);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(addManCommand.equals(addManCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(man);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(addManCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(addManCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(addManCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        // different flashCard -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(addManCommand.equals(addWomanCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kswk"
        },
        "content": "        public Path getGlossaryFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public void setGlossaryFilePath(Path glossaryFilePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void addFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kswk"
        },
        "content": "        public void setGlossary(ReadOnlyGlossary newData) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kswk"
        },
        "content": "        public ReadOnlyGlossary getGlossary() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public Path getScoreFilePath() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void setScoreFilePath(Path scoreFilePath) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void setScoreList(ScoreList scoreList) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public ScoreList getScoreList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public boolean hasFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void deleteFlashCard(FlashCard target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void setFlashCard(FlashCard target, FlashCard editedFlashCard) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public ObservableList\u003cFlashCard\u003e getFilteredFlashCardList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void updateFilteredPhraseList(Predicate\u003cFlashCard\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * Updates the filter of the filtered flashcard list to filter by the predicate in the class."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public void updateFilteredPhraseList() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void addCardToScore(FlashCard next) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public int getQuizModeIndex() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void saveScore() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void setQuizMode(boolean quizMode) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public boolean isQuizMode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kswk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kswk"
        },
        "content": "        public void setRandomQuizMode(boolean isRandomQuiz) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kswk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kswk"
        },
        "content": "        public boolean isRandomQuizMode() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * Increments the number of correct attempts in current quiz."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public void updateWithCorrectAttempt() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * Returns the number of correct attempts in this quiz."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * @return quizScore"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public int getQuizScore() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * Returns the total questions in this quiz."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * @return quizTotalQuestions"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public int getQuizTotalQuestions() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         * Resets the program at the end of a quiz."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        public void resetQuiz() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * A Model stub that contains a single flashCard."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private class ModelStubWithFlashCard extends ModelStub {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        private final FlashCard flashCard;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ModelStubWithFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            this.flashCard \u003d flashCard;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public boolean hasFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return this.flashCard.isSameFlashCard(flashCard);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * A Model stub that always accept the flashCard being added."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private class ModelStubAcceptingFlashCardAdded extends ModelStub {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        final ArrayList\u003cFlashCard\u003e flashCardsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public boolean hasFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return flashCardsAdded.stream().anyMatch(flashCard::isSameFlashCard);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public void addFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            requireNonNull(flashCard);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            flashCardsAdded.add(flashCard);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kswk"
        },
        "content": "        public ReadOnlyGlossary getGlossary() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kswk"
        },
        "content": "            return new Glossary();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 21,
      "zhizhizhizhizhi": 55,
      "rayasamhr": 74,
      "-": 131,
      "kswk": 14
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyScoreList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_emptyGlossary_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ReadOnlyGlossary initialData \u003d new Glossary();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ReadOnlyScoreList initialScores \u003d new ScoreList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ReadOnlyUserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model model \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_nonEmptyGlossary_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "        expectedModel.setGlossary(new Glossary());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 9,
      "rayasamhr": 12,
      "-": 18,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_DIFFICULTY_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_ENGLISH_PHRASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GENDER_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GERMAN_PHRASE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_GERMAN_PHRASE_FORGETFULNESS \u003d \"Vergesslichkeit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_GERMAN_PHRASE_TABLE \u003d \"Tisch\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_ENGLISH_PHRASE_FORGETFULNESS \u003d \"Forgetfulness\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_ENGLISH_PHRASE_TABLE \u003d \"Table\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String VALID_DIFFICULTY_TAG_HARD \u003d \"HARD\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String VALID_DIFFICULTY_TAG_MEDIUM \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String VALID_GENDER_TAG_M \u003d \"M\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String VALID_GENDER_TAG_F \u003d \"F\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String VALID_GENDER_TAG_NONE \u003d \"NONE\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_TAG_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_TAG_CHAPTER_ONE \u003d \"chapter1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_ORDER_EIGHT \u003d \"8\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String VALID_ORDER_NINE \u003d \"9\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String GERMAN_DESC_FORGETFULNESS \u003d \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            + PREFIX_GERMAN_PHRASE + VALID_GERMAN_PHRASE_FORGETFULNESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String GERMAN_DESC_TABLE \u003d \" \" + PREFIX_GERMAN_PHRASE + VALID_GERMAN_PHRASE_TABLE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String ENGLISH_DESC_FORGETFULNESS \u003d \" \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            + PREFIX_ENGLISH_PHRASE + VALID_ENGLISH_PHRASE_FORGETFULNESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String ENGLISH_DESC_TABLE \u003d \" \" + PREFIX_ENGLISH_PHRASE + VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String DIFFICULTY_TAG_DESC_HARD \u003d \" \" + PREFIX_DIFFICULTY_TAG + VALID_DIFFICULTY_TAG_HARD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String DIFFICULTY_TAG_DESC_MEDIUM \u003d \" \" + PREFIX_DIFFICULTY_TAG + VALID_DIFFICULTY_TAG_MEDIUM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String GENDER_TAG_DESC_F \u003d \" \" + PREFIX_GENDER_TAG + VALID_GENDER_TAG_F;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String GENDER_TAG_DESC_M \u003d \" \" + PREFIX_GENDER_TAG + VALID_GENDER_TAG_M;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String TAG_DESC_CHAPTER_ONE \u003d \" \" + PREFIX_TAG + VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String TAG_DESC_HARD \u003d \" \" + PREFIX_TAG + VALID_TAG_HARD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String INVALID_GERMAN_PHRASE_DESC \u003d \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            + PREFIX_GERMAN_PHRASE + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in german phrases"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String INVALID_ENGLISH_PHRASE_DESC \u003d \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            + PREFIX_ENGLISH_PHRASE + \"englishphrase@\"; // \u0027@\u0027 not allowed in english phrases"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String INVALID_DIFFICULTY_TAG_DESC \u003d \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_DIFFICULTY_TAG + \"easypeasy\"; // only certain difficulty tags allowed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final String INVALID_GENDER_TAG_DESC \u003d \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            + PREFIX_GENDER_TAG + \"NONbinary\"; // only certain genders tags allowed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"easy*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final EditCommand.EditFlashCardDescriptor DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final EditCommand.EditFlashCardDescriptor DESC_TABLE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        DESC_FORGETFULNESS \u003d new EditFlashCardDescriptorBuilder().withGermanPhrase(VALID_GERMAN_PHRASE_FORGETFULNESS)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_FORGETFULNESS)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withDifficultyTag(VALID_DIFFICULTY_TAG_MEDIUM)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withGenderTag(VALID_GENDER_TAG_NONE)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withTags().withOrder(VALID_ORDER_EIGHT).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        DESC_TABLE \u003d new EditFlashCardDescriptorBuilder().withGermanPhrase(VALID_GERMAN_PHRASE_TABLE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withDifficultyTag(VALID_DIFFICULTY_TAG_MEDIUM)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withGenderTag(VALID_GENDER_TAG_M)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withTags(VALID_TAG_HARD, VALID_TAG_CHAPTER_ONE).withOrder(VALID_ORDER_NINE).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            CommandResult result \u003d command.executeWithChecks(actualModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * - the glossary, filtered flashcard list and selected flashcard in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Glossary expectedGlossary \u003d new Glossary(actualModel.getGlossary());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        List\u003cFlashCard\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.executeWithChecks(actualModel));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(expectedGlossary, actualModel.getGlossary());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the flashcard at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * {@code model}\u0027s glossary."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static void showFlashCardsAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCard \u003d model.getFilteredFlashCardList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        final String[] splitName \u003d flashCard.getGermanPhrase().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.updateFilteredPhraseList(new GermanPhraseContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(1, model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 48,
      "YangJiyu98": 30,
      "zhizhizhizhizhi": 2,
      "rayasamhr": 7,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.showFlashCardsAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCardToDelete \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashCardToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.deleteFlashCard(flashCardToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashCardList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showFlashCardsAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCardToDelete \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FLASHCARD_SUCCESS, flashCardToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.deleteFlashCard(flashCardToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showNoFlashCard(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showFlashCardsAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGlossary().getFlashCardList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FLASHCARD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private void showNoFlashCard(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.updateFilteredPhraseList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertTrue(model.getFilteredFlashCardList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 14,
      "rayasamhr": 22,
      "-": 69,
      "kswk": 5
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.DESC_TABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_TABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.showFlashCardsAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedFlashCard \u003d new FlashCardBuilder().withOrder(1).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder(editedFlashCard).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Glossary(model.getGlossary()), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.setFlashCard(model.getFilteredFlashCardList().get(0), editedFlashCard);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Index indexLastFlashCard \u003d Index.fromOneBased(model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard lastFlashCard \u003d model.getFilteredFlashCardList().get(indexLastFlashCard.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCardBuilder flashCardInList \u003d new FlashCardBuilder(lastFlashCard);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedFlashCard \u003d flashCardInList.withGermanPhrase(VALID_GERMAN_PHRASE_TABLE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE).withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withGermanPhrase(VALID_GERMAN_PHRASE_TABLE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE).withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFlashCard, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Glossary(model.getGlossary()), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.setFlashCard(lastFlashCard, editedFlashCard);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, new EditFlashCardDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard editedFlashCard \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Glossary(model.getGlossary()), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showFlashCardsAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCardInFilteredList \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedFlashCard \u003d new FlashCardBuilder(flashCardInFilteredList)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new EditFlashCardDescriptorBuilder().withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FLASHCARD_SUCCESS, editedFlashCard);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Glossary(model.getGlossary()), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel.setFlashCard(model.getFilteredFlashCardList().get(0), editedFlashCard);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute_duplicateFlashCardUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard firstFlashCard \u003d model.getFilteredFlashCardList().get(INDEX_FIRST_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder(firstFlashCard).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FLASHCARD, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute_duplicateFlashCardFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showFlashCardsAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        // edit flashcard in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCardInList \u003d model.getGlossary().getFlashCardList().get(INDEX_SECOND_FLASHCARD.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                new EditFlashCardDescriptorBuilder(flashCardInList).build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute_invalidFlashCardIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFlashCardList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void execute_invalidFlashCardIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showFlashCardsAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getGlossary().getFlashCardList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new EditFlashCardDescriptorBuilder().withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FLASHCARD, DESC_FORGETFULNESS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditFlashCardDescriptor copyDescriptor \u003d new EditFlashCardDescriptor(DESC_FORGETFULNESS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FLASHCARD, copyDescriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FLASHCARD, DESC_FORGETFULNESS)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FLASHCARD, DESC_TABLE)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 38,
      "rayasamhr": 43,
      "-": 94,
      "kswk": 2
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/EditFlashCardDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.DESC_TABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_DIFFICULTY_TAG_HARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GENDER_TAG_F;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_TABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class EditFlashCardDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditFlashCardDescriptor descriptorWithSameValues \u003d new EditFlashCardDescriptor(DESC_FORGETFULNESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(DESC_FORGETFULNESS.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(DESC_FORGETFULNESS.equals(DESC_FORGETFULNESS));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(DESC_TABLE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // different German phrase -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        EditFlashCardDescriptor editedForgetfulnessPhrase \u003d new EditFlashCardDescriptorBuilder(DESC_FORGETFULNESS)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(editedForgetfulnessPhrase));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // different English phrase -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        editedForgetfulnessPhrase \u003d new EditFlashCardDescriptorBuilder(DESC_FORGETFULNESS)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(editedForgetfulnessPhrase));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // different difficulty tag -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        editedForgetfulnessPhrase \u003d new EditFlashCardDescriptorBuilder(DESC_FORGETFULNESS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withDifficultyTag(VALID_DIFFICULTY_TAG_HARD).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(editedForgetfulnessPhrase));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // different gender tag -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        editedForgetfulnessPhrase \u003d new EditFlashCardDescriptorBuilder(DESC_FORGETFULNESS)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withGenderTag(VALID_GENDER_TAG_F).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(editedForgetfulnessPhrase));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        editedForgetfulnessPhrase \u003d new EditFlashCardDescriptorBuilder(DESC_FORGETFULNESS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DESC_FORGETFULNESS.equals(editedForgetfulnessPhrase));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 42,
      "YangJiyu98": 21
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/EndQuizCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EndQuizCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class EndQuizCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void execute_listIsNotFiltered_showAllEnglishWords() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        for (FlashCard flashCard: model.getFilteredFlashCardList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard changeTo \u003d flashCard.copy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            changeTo.updateShowingEnglish(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            model.setFlashCard(flashCard, changeTo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        assertCommandSuccess(new QuizCommand(), model, QuizCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                + QuizCommand.FIRST_CARD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                + model.getFilteredFlashCardList().get(0).getGermanPhrase().toString(), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "zhizhizhizhizhi": 30,
      "rayasamhr": 3
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Glossary initialData \u003d new Glossary();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ScoreList initialScores \u003d new ScoreList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "rayasamhr": 8,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_PHRASES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.FRIDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.SATURDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.WEDNESDAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void execute_zeroKeywords_noFlashCardFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PHRASES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedModel.updateFilteredPhraseList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void execute_multipleKeywords_multipleFlashCardsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PHRASES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kswk"
        },
        "content": "                preparePredicate(\"Mittwoch Freitag Samstag\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedModel.updateFilteredPhraseList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(Arrays.asList(WEDNESDAY, FRIDAY, SATURDAY), model.getFilteredFlashCardList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private GermanPhraseContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return new GermanPhraseContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 21,
      "rayasamhr": 5,
      "-": 53,
      "kswk": 6
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Glossary initialData \u003d new Glossary();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ScoreList initialScores \u003d new ScoreList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model model \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "rayasamhr": 8,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.showFlashCardsAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_listIsNotFilteredOrSorted_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        showFlashCardsAtIndex(model, INDEX_FIRST_FLASHCARD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_emptyGlossary_sendsEmptyMessage() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.setGlossary(new Glossary());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedModel.setGlossary(new Glossary());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_EMPTY_GLOSSARY, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 17,
      "rayasamhr": 4,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/NextCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for NextCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class NextCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void execute_quizModeReminderCheck() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertCommandSuccess(new NextCommand(), model, NextCommand.QUIZ_MODE_REMINDER, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void execute_indexCheck() throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        new QuizCommand().executeWithChecks(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        Assertions.assertEquals(model.getQuizModeIndex(), 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        model.resetQuiz();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            int i \u003d model.getFilteredFlashCardList().size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            while (i \u003e 1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                new NextCommand().executeWithChecks(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                i--;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            //System.out.println(\"hng: \" + model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            Assertions.assertEquals(model.getQuizModeIndex() + 1, model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            new NextCommand().executeWithChecks(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            Assertions.assertEquals(model.getQuizModeIndex(), model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizScore(), 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizTotalQuestions(), model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "zhizhizhizhizhi": 48,
      "rayasamhr": 3,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/QuizCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for QuizCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class QuizCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void execute_listIsNotFiltered_hideAllEnglishWords() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        for (FlashCard flashCard: expectedModel.getFilteredFlashCardList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            FlashCard changeTo \u003d flashCard.copy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            changeTo.updateShowingEnglish(false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            expectedModel.setFlashCard(flashCard, changeTo);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        assertCommandSuccess(new QuizCommand(), model, QuizCommand.MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                        + QuizCommand.FIRST_CARD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                        + model.getFilteredFlashCardList().get(0).getGermanPhrase().toString(), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "zhizhizhizhizhi": 30,
      "rayasamhr": 3
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/RandomQuizCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Contains integration test (interaction with the Model) and unit test for"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": " * {@code RandomQuizCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class RandomQuizCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void execute_randomNonEmptyList_success() throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String expectedMessage \u003d RandomQuizCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String[] actualMessageArr \u003d new RandomQuizCommand("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "                Index.fromOneBased(getTypicalGlossary().getFlashCardList().size()))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .execute(model)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .getFeedbackToUser()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "                .split(\" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "        String actualMessage \u003d actualMessageArr[0]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "                + \" \" + actualMessageArr[1]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "                + \" \" + actualMessageArr[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void execute_randomEmptyList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        setUp();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": "        model.setGlossary(new Glossary());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "                Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX, () -\u003e new RandomQuizCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "                        Index.fromOneBased(1)).execute(model));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "rayasamhr": 4,
      "kswk": 50
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.SortCommand.MESSAGE_EMPTY_GLOSSARY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.SortCommand.MESSAGE_SORT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TestUtil.checkSortedOrder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.Comparators;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void constructor_invalidString_throwsAssertionError() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new SortCommand(\"invalid string\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new SortCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_stringGerman_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"german\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e expectedList \u003d new ArrayList\u003c\u003e(expectedModel.getGlossary().getFlashCardList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedList.sort(Comparators.GERMAN_COMP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(checkSortedOrder(model.getGlossary().getFlashCardList(), expectedList));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(result, new CommandResult(MESSAGE_SORT_SUCCESS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_stringEnglish_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"english\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e expectedList \u003d new ArrayList\u003c\u003e(expectedModel.getGlossary().getFlashCardList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedList.sort(Comparators.ENGLISH_COMP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(checkSortedOrder(model.getGlossary().getFlashCardList(), expectedList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(result, new CommandResult(MESSAGE_SORT_SUCCESS));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_stringEasyToHard_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"easytohard\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e expectedList \u003d new ArrayList\u003c\u003e(expectedModel.getGlossary().getFlashCardList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedList.sort(Comparators.DIFFICULTY_EASY_COMP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(checkSortedOrder(model.getGlossary().getFlashCardList(), expectedList));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(result, new CommandResult(MESSAGE_SORT_SUCCESS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_stringEarliest_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"earliest\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e expectedList \u003d new ArrayList\u003c\u003e(expectedModel.getGlossary().getFlashCardList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedList.sort(Comparators.CHRONOLOGICAL_EARLIEST_COMP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(checkSortedOrder(model.getGlossary().getFlashCardList(), expectedList));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(result, new CommandResult(MESSAGE_SORT_SUCCESS));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void execute_emptyGlossary_sendsEmptyMessage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand command \u003d new SortCommand(\"german\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        model.setGlossary(new Glossary());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(result, new CommandResult(MESSAGE_EMPTY_GLOSSARY));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 86,
      "rayasamhr": 3
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/commands/TryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "package seedu.forgetfulnus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import seedu.forgetfulnus.model.ScoreList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "public class TryCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        model \u003d new ModelManager(getTypicalGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getGlossary(), new ScoreList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void execute_quizModeTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            CommandResult test \u003d new TryCommand(\"incorrect attempt!\").executeWithChecks(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "            assertEquals(test.toString(), TryCommand.QUIZ_MODE_REMINDER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void execute_indexCheck() throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        new QuizCommand().execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        new QuizCommand().execute(expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            int index \u003d model.getQuizModeIndex();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            int score \u003d model.getQuizScore();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            int total \u003d model.getQuizTotalQuestions();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            CommandResult test \u003d new TryCommand(\"incorrect attempt!\").executeWithChecks(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(test.toString(), TryCommand.INCORRECT_ATTEMPT"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                    + TryCommand.REENTER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                    + model.getFilteredFlashCardList().get(index).getGermanPhrase().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizModeIndex(), index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizScore(), score);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizTotalQuestions(), total);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            String correctAttempt \u003d model.getFilteredFlashCardList().get(0).getEnglishPhrase().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            CommandResult test2 \u003d new TryCommand(correctAttempt).executeWithChecks(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(test2.toString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                    TryCommand.CORRECT_ATTEMPT"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "                            + new NextCommand().executeWithChecks(expectedModel));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizModeIndex(), index + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            assertEquals(model.getQuizScore(), score + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhizhizhizhizhi": 61,
      "rayasamhr": 3,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.DIFFICULTY_TAG_DESC_HARD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.DIFFICULTY_TAG_DESC_MEDIUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.ENGLISH_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.ENGLISH_DESC_TABLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.GENDER_TAG_DESC_F;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.GENDER_TAG_DESC_M;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.GERMAN_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.GERMAN_DESC_TABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_DIFFICULTY_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_ENGLISH_PHRASE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_GENDER_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_GERMAN_PHRASE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.TAG_DESC_CHAPTER_ONE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.TAG_DESC_HARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_TABLE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.FORGETFULNESS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.TABLE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        FlashCard expectedFlashCard \u003d new FlashCardBuilder(TABLE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + TAG_DESC_HARD, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // multiple German phrases - last german phrases accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, GERMAN_DESC_FORGETFULNESS + GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + TAG_DESC_HARD, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // multiple English phrases - last english phrases accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_FORGETFULNESS + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + TAG_DESC_HARD, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // multiple difficulty tags - last difficulty tag accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_HARD + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + TAG_DESC_HARD, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // multiple gender tags - last gender tag accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertParseSuccess(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_F + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + TAG_DESC_HARD, new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard expectedFlashCardMultipleTags \u003d new FlashCardBuilder(TABLE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withTags(VALID_TAG_CHAPTER_ONE, VALID_TAG_HARD)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_HARD + TAG_DESC_CHAPTER_ONE , new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // default predefined tags. For difficulty, Medium tag. For gender, None tag."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard expectedFlashCard \u003d new FlashCardBuilder(FORGETFULNESS).withTags().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, GERMAN_DESC_FORGETFULNESS + ENGLISH_DESC_FORGETFULNESS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new AddCommand(expectedFlashCard));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // missing German phrase prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, VALID_GERMAN_PHRASE_TABLE + ENGLISH_DESC_TABLE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // missing English phrase prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, GERMAN_DESC_TABLE + VALID_ENGLISH_PHRASE_TABLE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, VALID_GERMAN_PHRASE_TABLE + VALID_ENGLISH_PHRASE_TABLE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // invalid german phrase"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, INVALID_GERMAN_PHRASE_DESC + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + TAG_DESC_HARD + TAG_DESC_CHAPTER_ONE, GermanPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // invalid english phrase"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, GERMAN_DESC_TABLE + INVALID_ENGLISH_PHRASE_DESC"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + TAG_DESC_HARD + TAG_DESC_CHAPTER_ONE, EnglishPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // invalid difficulty tag"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertParseFailure(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + INVALID_DIFFICULTY_TAG_DESC + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_HARD + TAG_DESC_CHAPTER_ONE, DifficultyTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // invalid gender tag"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertParseFailure(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + INVALID_GENDER_TAG_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + TAG_DESC_HARD + TAG_DESC_CHAPTER_ONE, GenderTag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                + DIFFICULTY_TAG_DESC_MEDIUM + GENDER_TAG_DESC_M"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_CHAPTER_ONE, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, INVALID_GERMAN_PHRASE_DESC + ENGLISH_DESC_TABLE,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                GermanPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + GERMAN_DESC_TABLE + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        + DIFFICULTY_TAG_DESC_MEDIUM + INVALID_GENDER_TAG_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        + TAG_DESC_HARD + TAG_DESC_CHAPTER_ONE,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 101,
      "YangJiyu98": 46
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        } // use the parser to parse the input, then compare if the result is the same as the expectedCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FLASHCARD));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parse_invalidArgs_throwsParseZeroException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "rayasamhr": 1,
      "-": 24,
      "kswk": 9
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.ENGLISH_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.ENGLISH_DESC_TABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.GERMAN_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_ENGLISH_PHRASE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_GERMAN_PHRASE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.TAG_DESC_CHAPTER_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.TAG_DESC_HARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_FORGETFULNESS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_FORGETFULNESS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, VALID_GERMAN_PHRASE_FORGETFULNESS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"-5\" + GERMAN_DESC_FORGETFULNESS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"0\" + GERMAN_DESC_FORGETFULNESS, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GERMAN_PHRASE_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                GermanPhrase.MESSAGE_CONSTRAINTS); // invalid German phrase"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ENGLISH_PHRASE_DESC,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                EnglishPhrase.MESSAGE_CONSTRAINTS); // invalid English phrase"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + ENGLISH_DESC_TABLE"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + INVALID_ENGLISH_PHRASE_DESC, EnglishPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code FlashCard} being edited,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHAPTER_ONE"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + TAG_DESC_HARD + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_CHAPTER_ONE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + TAG_EMPTY + TAG_DESC_HARD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + TAG_DESC_HARD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GERMAN_PHRASE_DESC + VALID_ENGLISH_PHRASE_FORGETFULNESS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                GermanPhrase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FLASHCARD;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ENGLISH_DESC_TABLE + TAG_DESC_HARD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + GERMAN_DESC_FORGETFULNESS + TAG_DESC_CHAPTER_ONE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withGermanPhrase(VALID_GERMAN_PHRASE_FORGETFULNESS)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withTags(VALID_TAG_CHAPTER_ONE, VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ENGLISH_DESC_TABLE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GERMAN_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withGermanPhrase(VALID_GERMAN_PHRASE_FORGETFULNESS).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ENGLISH_DESC_FORGETFULNESS;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withEnglishPhrase(VALID_ENGLISH_PHRASE_FORGETFULNESS).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_CHAPTER_ONE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + ENGLISH_DESC_FORGETFULNESS"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + TAG_DESC_CHAPTER_ONE + ENGLISH_DESC_FORGETFULNESS + TAG_DESC_CHAPTER_ONE"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + ENGLISH_DESC_TABLE + TAG_DESC_HARD;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withTags(VALID_TAG_HARD, VALID_TAG_CHAPTER_ONE)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_ENGLISH_PHRASE_DESC"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + ENGLISH_DESC_TABLE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_ENGLISH_PHRASE_DESC"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                + ENGLISH_DESC_TABLE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptorBuilder().withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FLASHCARD;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 195
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new FindCommand(new GermanPhraseContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 7,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/GlossaryParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EndQuizCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.NextCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.ScoreCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.EditFlashCardDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class GlossaryParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private final GlossaryParser parser \u003d new GlossaryParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FlashCardUtil.getAddCommand(flashCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(new AddCommand(flashCard), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FLASHCARD.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FLASHCARD), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        FlashCard flashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        EditCommand.EditFlashCardDescriptor descriptor \u003d new EditFlashCardDescriptorBuilder(flashCard).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + INDEX_FIRST_FLASHCARD.getOneBased() + \" \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                + FlashCardUtil.getEditFlashCardDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FLASHCARD, descriptor), command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_end() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertTrue(parser.parseCommand(EndQuizCommand.COMMAND_WORD) instanceof EndQuizCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(new FindCommand(new GermanPhraseContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_next() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertTrue(parser.parseCommand(NextCommand.COMMAND_WORD) instanceof NextCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_scores() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertTrue(parser.parseCommand(ScoreCommand.COMMAND_WORD) instanceof ScoreCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_clearWithArguments_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"clear abc\"));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"clear 123\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"clear abc123\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_endWithArguments_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"end abc\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"end 123\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"end abc123\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_exitWithArguments_throwsParseException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"exit abc\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"exit 123\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"exit abc123\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_helpWithArguments_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"help abc\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"help 123\"));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"help abc123\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_listWithArguments_throwsParseException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"list abc\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"list 123\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"list abc123\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseCommand_nextWithArguments_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"next abc\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"next 123\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"next abc123\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 23,
      "rayasamhr": 10,
      "-": 65,
      "kswk": 60
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIRST_FLASHCARD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseZeroException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_GERMAN_PHRASE \u003d \"Deutschl@nd\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_ENGLISH_PHRASE \u003d \"+Germany\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#country\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_GERMAN_PHRASE \u003d \"Deutschland\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_ENGLISH_PHRASE \u003d \"Germany\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"country\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"name\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseZeroException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(ParseZeroException.class, () -\u003e ParserUtil.parseIndex(\"0\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(INDEX_FIRST_FLASHCARD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseGermanPhrase_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGermanPhrase((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseGermanPhrase_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGermanPhrase(INVALID_GERMAN_PHRASE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseGermanPhrase_validValueWithoutWhitespace_returnsGermanPhrase() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhrase expectedGermanPhrase \u003d new GermanPhrase(VALID_GERMAN_PHRASE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(expectedGermanPhrase, ParserUtil.parseGermanPhrase(VALID_GERMAN_PHRASE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseGermanPhrase_validValueWithWhitespace_returnsTrimmedGermanPhrase() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String germanPhraseWithWhitespace \u003d WHITESPACE + VALID_GERMAN_PHRASE + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhrase expectedGermanPhrase \u003d new GermanPhrase(VALID_GERMAN_PHRASE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(expectedGermanPhrase, ParserUtil.parseGermanPhrase(germanPhraseWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseEnglishPhrase_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEnglishPhrase((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseEnglishPhrase_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEnglishPhrase(INVALID_ENGLISH_PHRASE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseEnglishPhrase_validValueWithoutWhitespace_returnsEnglishPhrase() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EnglishPhrase expectedEnglishPhrase \u003d new EnglishPhrase(VALID_ENGLISH_PHRASE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(expectedEnglishPhrase, ParserUtil.parseEnglishPhrase(VALID_ENGLISH_PHRASE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parseEnglishPhrase_validValueWithWhitespace_returnsTrimmedEnglishPhrase() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String englishPhraseWithWhitespace \u003d WHITESPACE + VALID_ENGLISH_PHRASE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        EnglishPhrase expectedEnglishPhrase \u003d new EnglishPhrase(VALID_ENGLISH_PHRASE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(expectedEnglishPhrase, ParserUtil.parseEnglishPhrase(englishPhraseWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 34,
      "YangJiyu98": 2,
      "rayasamhr": 2,
      "-": 105,
      "kswk": 7
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/RandomQuizCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kswk"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.commons.core.Messages.MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalIndexes.INDEX_FIVE_FLASHCARDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "import seedu.forgetfulnus.logic.commands.RandomQuizCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": " * outside of the RandomQuizCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": " * same path through the RandomQuizCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class RandomQuizCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private RandomQuizCommandParser parser \u003d new RandomQuizCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parse_validArgs_returnsRandomQuizCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertParseSuccess(parser, \"5\", new RandomQuizCommand(INDEX_FIVE_FLASHCARDS));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "                RandomQuizCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void parse_invalidArgs_throwsParseZeroException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "                RandomQuizCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kswk": 40
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_invalidArgs_throwsException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String args \u003d \"invalid argument\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parser.parse(args));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_germanString_success() throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String args \u003d \"german\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        SortCommand command \u003d new SortCommand(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertEquals(command, parser.parse(args));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void parse_null_throwsAssertionException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e parser.parse(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 29
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/GlossaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.MONDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.exceptions.DuplicateFlashCardException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class GlossaryTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private final Glossary glossary \u003d new Glossary();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(Collections.emptyList(), glossary.getFlashCardList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e glossary.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void resetData_withValidReadOnlyGlossary_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary newData \u003d getTypicalGlossary();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "        glossary.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(newData, glossary);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void resetData_withDuplicateFlashCards_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        // Two flashCards with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(MONDAY).withTags(VALID_TAG_CHAPTER_ONE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e newFlashCards \u003d Arrays.asList(MONDAY, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GlossaryStub newData \u003d new GlossaryStub(newFlashCards);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e glossary.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void hasFlashCard_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e glossary.hasFlashCard(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void hasFlashCard_flashCardNotInGlossary_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(glossary.hasFlashCard(MONDAY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void hasFlashCard_flashCardInGlossary_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        glossary.addFlashCard(MONDAY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(glossary.hasFlashCard(MONDAY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void hasFlashCard_flashCardWithSameIdentityFieldsInGlossary_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        glossary.addFlashCard(MONDAY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(MONDAY).withTags(VALID_TAG_CHAPTER_ONE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertTrue(glossary.hasFlashCard(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void getFlashCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e glossary.getFlashCardList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * A stub ReadOnlyAddressBook whose flashCards list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static class GlossaryStub implements ReadOnlyGlossary {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        private final ObservableList\u003cFlashCard\u003e flashCards \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GlossaryStub(Collection\u003cFlashCard\u003e flashCards) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            this.flashCards.setAll(flashCards);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        public ObservableList\u003cFlashCard\u003e getFlashCardList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            return flashCards;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 22,
      "rayasamhr": 13,
      "-": 59,
      "kswk": 7
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.model.Model.PREDICATE_SHOW_ALL_FLASHCARDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.MONDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.TUESDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhraseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.GlossaryBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Glossary initialData \u003d new Glossary();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ScoreList initialScores \u003d new ScoreList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager(initialData, initialScores, userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(new Glossary(), new Glossary(modelManager.getGlossary()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": "        userPrefs.setGlossaryFilePath(Paths.get(\"forgetfulnus/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "        userPrefs.setGlossaryFilePath(Paths.get(\"new/forgetfulnus/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setGlossaryPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGlossaryFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void setGlossaryFilePath_validPath_setsGlossaryFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Path path \u003d Paths.get(\"forgetfulnus/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kswk"
        },
        "content": "        modelManager.setGlossaryFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(path, modelManager.getGlossaryFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void hasFlashCard_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFlashCard(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void hasFlashCard_flashCardNotInGlossary_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(modelManager.hasFlashCard(MONDAY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void hasFlashCard_flashCardInGlossary_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        modelManager.addFlashCard(MONDAY);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(modelManager.hasFlashCard(MONDAY));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void getFilteredFlashCardList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFlashCardList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Glossary glossary \u003d new GlossaryBuilder().withFlashCard(MONDAY).withFlashCard(TUESDAY).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary differentGlossary \u003d new Glossary();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ScoreList scoreList \u003d new ScoreList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        modelManager \u003d new ModelManager(glossary, scoreList, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(glossary, scoreList, userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentGlossary, scoreList, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String[] keywords \u003d MONDAY.getGermanPhrase().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        modelManager.updateFilteredPhraseList(new GermanPhraseContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(glossary, scoreList, userPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kswk"
        },
        "content": "        modelManager.updateFilteredPhraseList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kswk"
        },
        "content": "        differentUserPrefs.setGlossaryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(glossary, scoreList, differentUserPrefs)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 14,
      "rayasamhr": 12,
      "-": 94,
      "kswk": 16
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void setGlossaryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setGlossaryFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 17,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/flashcard/EnglishPhraseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class EnglishPhraseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new EnglishPhrase(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void constructor_invalidEnglishPhrase_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String invalidEnglishPhrase \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new EnglishPhrase(invalidEnglishPhrase));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void isValidEnglishPhrase() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // null English phrase"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e EnglishPhrase.isValidEnglishPhrase(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // invalid English Phrase"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"^\")); // only non-alphabet characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"forgetfulness*\")); // contains non-alphabet characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"forgetfulness1\")); // contains numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // valid English Phrase"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(EnglishPhrase.isValidEnglishPhrase(\"forgetfulness me\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(EnglishPhrase.isValidEnglishPhrase(\"Forgetful Ness\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(EnglishPhrase.isValidEnglishPhrase(\"For get ful ness\")); // long English phrases"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    public void isCorrectAttempt() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(new EnglishPhrase(\"test test\").isCorrectAttempt(\"test test\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(new EnglishPhrase(\"test\").isCorrectAttempt(\"TEST\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(new EnglishPhrase(\"test test\").isCorrectAttempt(\"   test test  \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(new EnglishPhrase(\"test test\").isCorrectAttempt(\"   test    test  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(new EnglishPhrase(\"test\").isCorrectAttempt(\"ashdha\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhizhizhizhizhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "YangJiyu98": 40,
      "zhizhizhizhizhi": 4
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/flashcard/FlashCardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_TABLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.MONDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.TABLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class FlashCardTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard flashCard \u003d new FlashCardBuilder().build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e flashCard.getTags().remove(0));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void isSameFlashCard() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(MONDAY.isSameFlashCard(MONDAY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.isSameFlashCard(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(MONDAY)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.isSameFlashCard(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(MONDAY).withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.isSameFlashCard(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(MONDAY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(MONDAY.isSameFlashCard(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(MONDAY).withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(MONDAY.isSameFlashCard(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard aliceCopy \u003d new FlashCardBuilder(MONDAY).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(MONDAY.equals(aliceCopy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(MONDAY.equals(MONDAY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.equals(5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.equals(TABLE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(MONDAY).withGermanPhrase(VALID_GERMAN_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.equals(editedAlice));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(MONDAY).withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        editedAlice \u003d new FlashCardBuilder(MONDAY).withTags(VALID_TAG_CHAPTER_ONE).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(MONDAY.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 82
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/flashcard/GermanPhraseContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class GermanPhraseContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // different flashcard -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void test_germanPhraseContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(Collections.singletonList(\"Kaffee\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee Tee\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        predicate \u003d new GermanPhraseContainsKeywordsPredicate(Arrays.asList(\"Kaffee\", \"Tee\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee Tee\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        predicate \u003d new GermanPhraseContainsKeywordsPredicate(Arrays.asList(\"Tee\", \"Wasser\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee Wasser\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        predicate \u003d new GermanPhraseContainsKeywordsPredicate(Arrays.asList(\"kAfFeE\", \"tEe\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee Tee\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        GermanPhraseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new GermanPhraseContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        predicate \u003d new GermanPhraseContainsKeywordsPredicate(Arrays.asList(\"Wasser\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee Tee\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        // Keywords match english phrase, but does not match german phrase"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        predicate \u003d new GermanPhraseContainsKeywordsPredicate(Arrays.asList(\"Coffee\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(predicate.test(new FlashCardBuilder().withGermanPhrase(\"Kaffee\").withEnglishPhrase(\"Coffee\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 80
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/flashcard/GermanPhraseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class GermanPhraseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GermanPhrase(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void constructor_invalidGermanPhrase_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String invalidGermanPhrase \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new GermanPhrase(invalidGermanPhrase));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    //TODO change constraints to english alphabets only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    //change examples"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void isValidGermanPhrase() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e GermanPhrase.isValidGermanPhrase(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // invalid German Phrase"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"^\")); // only non-alphabet characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"forgetfulness*\")); // contains non-alphabet characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(EnglishPhrase.isValidEnglishPhrase(\"forgetfulness1\")); // contains numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // valid German Phrase"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(EnglishPhrase.isValidEnglishPhrase(\"forgetfulness me\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(EnglishPhrase.isValidEnglishPhrase(\"Forgetful Ness\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(EnglishPhrase.isValidEnglishPhrase(\"For get ful ness\")); // long English phrases"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "YangJiyu98": 38
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/flashcard/UniqueFlashCardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.MONDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.TABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.exceptions.DuplicateFlashCardException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.exceptions.FlashCardNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.FlashCardBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class UniqueFlashCardListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private final UniqueFlashCardList uniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void contains_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void contains_flashCardNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertFalse(uniqueFlashCardList.contains(MONDAY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void contains_flashCardInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertTrue(uniqueFlashCardList.contains(MONDAY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void contains_flashCardWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(MONDAY).withTags(VALID_TAG_CHAPTER_ONE)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertTrue(uniqueFlashCardList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void add_nullflashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void add_duplicateFlashCard_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e uniqueFlashCardList.add(MONDAY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_nullTargetFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashCard(null, MONDAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_nullEditedFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashCard(MONDAY, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_targetFlashCardNotInList_throwsFlashCardNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(FlashCardNotFoundException.class, () -\u003e uniqueFlashCardList.setFlashCard(MONDAY, MONDAY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_editedFlashCardIsSameFlashCard_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.setFlashCard(MONDAY, MONDAY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedUniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_editedFlashCardHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        FlashCard editedAlice \u003d new FlashCardBuilder(MONDAY).withTags(VALID_TAG_CHAPTER_ONE)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.setFlashCard(MONDAY, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        expectedUniqueFlashCardList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_editedFlashCardHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.setFlashCard(MONDAY, TABLE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedUniqueFlashCardList.add(TABLE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCard_editedFlashCardHasNonUniqueIdentity_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(TABLE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e uniqueFlashCardList.setFlashCard(MONDAY, TABLE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void remove_nullFlashCard_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void remove_flashCardDoesNotExist_throwsFlashCardNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(FlashCardNotFoundException.class, () -\u003e uniqueFlashCardList.remove(MONDAY));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void remove_existingFlashCard_removesFlashCard() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.remove(MONDAY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards_nullUniqueFlashCardList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashCards((UniqueFlashCardList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards_uniqueFlashCardList_replacesOwnListWithProvidedUniqueFlashCardList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedUniqueFlashCardList.add(TABLE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        uniqueFlashCardList.setFlashCards(expectedUniqueFlashCardList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFlashCardList.setFlashCards((List\u003cFlashCard\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        uniqueFlashCardList.add(MONDAY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e flashCardList \u003d Collections.singletonList(TABLE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        uniqueFlashCardList.setFlashCards(flashCardList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        UniqueFlashCardList expectedUniqueFlashCardList \u003d new UniqueFlashCardList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        expectedUniqueFlashCardList.add(TABLE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertEquals(expectedUniqueFlashCardList, uniqueFlashCardList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void setFlashCards_listWithDuplicateFlashCards_throwsDuplicateFlashCardException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cFlashCard\u003e listWithDuplicateFlashCards \u003d Arrays.asList(MONDAY, MONDAY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(DuplicateFlashCardException.class, () -\u003e uniqueFlashCardList"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                .setFlashCards(listWithDuplicateFlashCards));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "            -\u003e uniqueFlashCardList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 39,
      "rayasamhr": 131
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/tag/DifficultyTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class DifficultyTagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DifficultyTag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void constructor_invalidDifficultyTag_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String invalidDifficultyTagName \u003d \"EasyPeasy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DifficultyTag(invalidDifficultyTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void isValidDifficultyTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // null difficulty tag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DifficultyTag.isValidDifficultyTag(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // valid difficulty tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(DifficultyTag.isValidDifficultyTag(\"easy\")); // Easy difficulty tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(DifficultyTag.isValidDifficultyTag(\"medium\")); // Medium difficulty tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(DifficultyTag.isValidDifficultyTag(\"hard\")); // Hard difficulty tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(DifficultyTag.isValidDifficultyTag(\" easy \")); // Easy difficulty tag with whitespace"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        //invalid difficulty tags"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DifficultyTag.isValidDifficultyTag(\"easy peasy\")); // invalid difficulty tag"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(DifficultyTag.isValidDifficultyTag(\"2\")); // invalid difficulty tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 38
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/tag/GenderTagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "public class GenderTagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new GenderTag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void constructor_invalidDifficultyTag_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String invalidGenderTagName \u003d \"NONBINARY\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DifficultyTag(invalidGenderTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void isValidDifficultyTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // null gender tag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e GenderTag.isValidGenderTag(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        // valid gender tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(GenderTag.isValidGenderTag(\"M\")); // M gender tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(GenderTag.isValidGenderTag(\"F\")); // F gender tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(GenderTag.isValidGenderTag(\"NEUTRAL\")); // Neutral gender tag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(GenderTag.isValidGenderTag(\"none\")); // none gender tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertTrue(GenderTag.isValidGenderTag(\" NoNe \")); // none gender tag with whitespace"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        //invalid gender tags"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(GenderTag.isValidGenderTag(\"NONBINARY\")); // invalid gender tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertFalse(GenderTag.isValidGenderTag(\"2\")); // invalid gender tag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "YangJiyu98": 39
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/storage/JsonAdaptedFlashCardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.storage.JsonAdaptedFlashCard.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.TUESDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class JsonAdaptedFlashCardTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_GERMAN_PHRASE \u003d \"Deutschl@nd\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_ENGLISH_PHRASE \u003d \"+Germany\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static final String INVALID_DIFFICULTY_TAG \u003d \"easy peasy\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static final String INVALID_GENDER_TAG \u003d \"IT\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#country\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String INVALID_ORDER \u003d \"-100\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_GERMAN_PHRASE \u003d TUESDAY.getGermanPhrase().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_ENGLISH_PHRASE \u003d TUESDAY.getEnglishPhrase().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static final String VALID_DIFFICULTY_TAG \u003d TUESDAY.getDifficultyTag().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private static final String VALID_GENDER_TAG \u003d TUESDAY.getGenderTag().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TUESDAY.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private static final String VALID_ORDER \u003d \"2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void toModelType_validFlashcardDetails_returnsFlashcard() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d new JsonAdaptedFlashCard(TUESDAY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertEquals(TUESDAY, flashcard.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_invalidGermanPhrase_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                new JsonAdaptedFlashCard(INVALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        VALID_DIFFICULTY_TAG, VALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d GermanPhrase.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_nullGermanPhrase_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d new JsonAdaptedFlashCard(null, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                VALID_DIFFICULTY_TAG, VALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GermanPhrase.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_invalidEnglishPhrase_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, INVALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        VALID_DIFFICULTY_TAG, VALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d EnglishPhrase.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_nullEnglishPhrase_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, null,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                VALID_DIFFICULTY_TAG, VALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EnglishPhrase.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void toModelType_invalidDifficultyTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        INVALID_DIFFICULTY_TAG, VALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String expectedMessage \u003d DifficultyTag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void toModelType_nullDifficultyTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                null, VALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DifficultyTag.class.getSimpleName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void toModelType_invalidGenderTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        VALID_DIFFICULTY_TAG, INVALID_GENDER_TAG, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String expectedMessage \u003d GenderTag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void toModelType_nullGenderTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                VALID_DIFFICULTY_TAG, null, VALID_TAGS, VALID_ORDER);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, GenderTag.class.getSimpleName());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_invalidOrder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE, VALID_DIFFICULTY_TAG,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        VALID_GENDER_TAG, VALID_TAGS, INVALID_ORDER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d Order.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_nullOrder_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                VALID_DIFFICULTY_TAG, VALID_GENDER_TAG, VALID_TAGS, null);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Order.class.getSimpleName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, flashcard::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        JsonAdaptedFlashCard flashcard \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                new JsonAdaptedFlashCard(VALID_GERMAN_PHRASE, VALID_ENGLISH_PHRASE,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        VALID_DIFFICULTY_TAG, VALID_GENDER_TAG, invalidTags, VALID_ORDER);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assertThrows(IllegalValueException.class, flashcard::toModelType);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 74,
      "YangJiyu98": 70
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/storage/JsonGlossaryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kswk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.MONDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.MORNING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.NOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class JsonGlossaryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonGlossaryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void readGlossary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readGlossary(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private java.util.Optional\u003cReadOnlyGlossary\u003e readGlossary(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return new JsonGlossaryStorage(Paths.get(filePath)).readFile(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kswk"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kswk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertFalse(readGlossary(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGlossary(\"notJsonFormatGlossary.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public void readGlossary_invalidFlashCardGlossary_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGlossary(\"invalidFlashCardGlossary.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void readGlossary_invalidAndValidFlashCardGlossary_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readGlossary("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kswk"
        },
        "content": "                \"invalidAndValidFlashCardGlossary.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void readAndSaveGlossary_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempGlossary.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary original \u003d getTypicalGlossary();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kswk"
        },
        "content": "        JsonGlossaryStorage jsonGlossaryStorage \u003d new JsonGlossaryStorage(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kswk"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        jsonGlossaryStorage.saveFile(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        ReadOnlyGlossary readBack \u003d jsonGlossaryStorage.readFile(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(original, new Glossary(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kswk"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        original.addFlashCard(MORNING);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        original.removeFlashCard(MONDAY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        jsonGlossaryStorage.saveFile(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        readBack \u003d jsonGlossaryStorage.readFile(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(original, new Glossary(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kswk"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        original.addFlashCard(NOON);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        jsonGlossaryStorage.saveFile(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        readBack \u003d jsonGlossaryStorage.readFile().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(original, new Glossary(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void saveGlossary_nullGlossary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGlossary(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Saves {@code glossary} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private void saveGlossary(ReadOnlyGlossary glossary, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kswk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kswk"
        },
        "content": "            new JsonGlossaryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                    .saveFile(glossary, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kswk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kswk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kswk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kswk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void saveGlossary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveGlossary(new Glossary(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 14,
      "rayasamhr": 8,
      "kswk": 90
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/storage/JsonSerializableGlossaryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.testutil.TypicalFlashCards;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class JsonSerializableGlossaryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kswk"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableGlossaryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final Path TYPICAL_FLASHCARDS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalFlashCardsGlossary.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final Path INVALID_FLASHCARD_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidFlashCardGlossary.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private static final Path DUPLICATE_FLASHCARD_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateFlashCardGlossary.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public void toModelType_typicalFlashCardsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonSerializableGlossary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FLASHCARDS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": "                JsonSerializableGlossary.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary glossaryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary typicalFlashCardsGlossary \u003d TypicalFlashCards.getTypicalGlossary();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(glossaryFromFile, typicalFlashCardsGlossary);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void toModelType_invalidFlashCardFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonSerializableGlossary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                JsonSerializableGlossary.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public void toModelType_duplicateFlashcard_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonSerializableGlossary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FLASHCARD_FILE,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "                JsonSerializableGlossary.class).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertThrows(IllegalValueException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kswk"
        },
        "content": "                JsonSerializableGlossary.MESSAGE_DUPLICATE_FLASHCARD,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "YangJiyu98": 3,
      "rayasamhr": 6,
      "-": 23,
      "kswk": 16
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kswk"
        },
        "content": "        userPrefs.setGlossaryFilePath(Paths.get(\"glossary.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 5,
      "-": 117,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.TypicalFlashCards.getTypicalGlossary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.ReadOnlyGlossary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kswk"
        },
        "content": "        JsonGlossaryStorage glossaryStorage \u003d new JsonGlossaryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        JsonScoreStorage scoreStorage \u003d new JsonScoreStorage(getTempFilePath(\"sc\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        storageManager \u003d new StorageManager(glossaryStorage, scoreStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void glossaryReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kswk"
        },
        "content": "         * {@link JsonGlossaryStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kswk"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonGlossaryStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kswk"
        },
        "content": "        Glossary original \u003d getTypicalGlossary();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kswk"
        },
        "content": "        storageManager.saveGlossary(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kswk"
        },
        "content": "        ReadOnlyGlossary retrieved \u003d storageManager.readGlossary().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertEquals(original, new Glossary(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public void getGlossaryFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kswk"
        },
        "content": "        assertNotNull(storageManager.getGlossaryFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 6,
      "rayasamhr": 2,
      "-": 51,
      "kswk": 10
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/EditFlashCardDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand.EditFlashCardDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * A utility class to help with building EditFlashCardDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class EditFlashCardDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private EditFlashCardDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EditFlashCardDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EditFlashCardDescriptorBuilder(EditFlashCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.descriptor \u003d new EditFlashCardDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns an {@code EditFlashCardDescriptor} with fields containing {@code flashCard}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EditFlashCardDescriptorBuilder(FlashCard flashCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        descriptor \u003d new EditFlashCardDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        descriptor.setGermanPhrase(flashCard.getGermanPhrase());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        descriptor.setEnglishPhrase(flashCard.getEnglishPhrase());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.setDifficultyTag(flashCard.getDifficultyTag());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.setGenderTag(flashCard.getGenderTag());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        descriptor.setTags(flashCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor.setOrder(flashCard.getOrder());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Sets the {@code German Phrase} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public EditFlashCardDescriptorBuilder withGermanPhrase(String germanPhrase) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor.setGermanPhrase(new GermanPhrase(germanPhrase));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Sets the {@code English Phrase} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public EditFlashCardDescriptorBuilder withEnglishPhrase(String englishPhrase) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor.setEnglishPhrase(new EnglishPhrase(englishPhrase));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Sets the {@code Difficulty Tag} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public EditFlashCardDescriptorBuilder withDifficultyTag(String difficultyTag) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.setDifficultyTag(new DifficultyTag(difficultyTag));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Sets the {@code Gender Tag} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public EditFlashCardDescriptorBuilder withGenderTag(String genderTag) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.setGenderTag(new GenderTag(genderTag));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFlashCardDescriptor}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EditFlashCardDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Sets the {@code Order} of the {@code EditFlashCardDescriptor} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public EditFlashCardDescriptorBuilder withOrder(String order) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        descriptor.setOrder(new Order(Integer.parseInt(order)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public EditFlashCardDescriptor build() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 22,
      "YangJiyu98": 20,
      "rayasamhr": 16,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/FlashCardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.EnglishPhrase;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.GermanPhrase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.DifficultyTag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import seedu.forgetfulnus.model.tag.GenderTag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * A utility class to help with building FlashCard objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class FlashCardBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String DEFAULT_GERMAN_PHRASE \u003d \"Vergesslichkeit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String DEFAULT_ENGLISH_PHRASE \u003d \"Forgetfulness\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String DEFAULT_ORDER \u003d \"8\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private GermanPhrase germanPhrase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private EnglishPhrase englishPhrase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private DifficultyTag difficultyTag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    private GenderTag genderTag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private Order order;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Creates a {@code FlashCardBuilder} with the default details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public FlashCardBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        germanPhrase \u003d new GermanPhrase(DEFAULT_GERMAN_PHRASE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        englishPhrase \u003d new EnglishPhrase(DEFAULT_ENGLISH_PHRASE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        difficultyTag \u003d new DifficultyTag(DifficultyTag.MEDIUM_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        genderTag \u003d new GenderTag(GenderTag.NEUTRAL_GENDER_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        order \u003d new Order(Integer.parseInt(DEFAULT_ORDER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Initializes the FlashCardBuilder with the data of {@code flashCardToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public FlashCardBuilder(FlashCard flashCardToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        germanPhrase \u003d flashCardToCopy.getGermanPhrase();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        englishPhrase \u003d flashCardToCopy.getEnglishPhrase();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        difficultyTag \u003d flashCardToCopy.getDifficultyTag();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        genderTag \u003d flashCardToCopy.getGenderTag();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assert GenderTag.isValidGenderTag(genderTag.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        assert DifficultyTag.isValidDifficultyTag(difficultyTag.toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(flashCardToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        order \u003d flashCardToCopy.getOrder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Sets the {@code germanPhrase} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FlashCardBuilder withGermanPhrase(String germanPhrase) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.germanPhrase \u003d new GermanPhrase(germanPhrase);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public FlashCardBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Sets the {@code ephrase} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FlashCardBuilder withEnglishPhrase(String englishPhrase) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.englishPhrase \u003d new EnglishPhrase(englishPhrase);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Sets the {@code difficultyTag} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public FlashCardBuilder withDifficultyTag(String difficultyTag) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.difficultyTag \u003d new DifficultyTag(difficultyTag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     * Sets the {@code genderTag} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public FlashCardBuilder withGenderTag(String genderTag) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        this.genderTag \u003d new GenderTag(genderTag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Sets the {@code Order} of the {@code FlashCard} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FlashCardBuilder withOrder(int value) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        this.order \u003d new Order(value);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public FlashCard build() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new FlashCard(germanPhrase, englishPhrase, difficultyTag, genderTag, tags, order);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 28,
      "YangJiyu98": 29,
      "rayasamhr": 51
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/FlashCardUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_DIFFICULTY_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_ENGLISH_PHRASE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GENDER_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_GERMAN_PHRASE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": " * A utility class for FlashCard."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "public class FlashCardUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns an add command string for adding the {@code flashCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static String getAddCommand(FlashCard flashCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getFlashCardDetails(flashCard);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the part of command string for the given {@code flashCard}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static String getFlashCardDetails(FlashCard flashCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        sb.append(PREFIX_GERMAN_PHRASE + flashCard.getGermanPhrase().toString() + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        sb.append(PREFIX_ENGLISH_PHRASE + flashCard.getEnglishPhrase().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        sb.append(PREFIX_DIFFICULTY_TAG + flashCard.getDifficultyTag().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        sb.append(PREFIX_GENDER_TAG + flashCard.getGenderTag().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        flashCard.getTags().stream().forEach("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the part of command string for the given {@code EditFlashCardDescriptor}\u0027s details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static String getEditFlashCardDescriptorDetails(EditCommand.EditFlashCardDescriptor descriptor) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.getGermanPhrase()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .ifPresent(germanPhrase -\u003e sb.append(PREFIX_GERMAN_PHRASE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        .append(germanPhrase.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.getEnglishPhrase()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .ifPresent(englishPhrase -\u003e sb.append(PREFIX_ENGLISH_PHRASE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        .append(englishPhrase.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.getDifficultyTag()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .ifPresent(difficultyTag -\u003e sb.append(PREFIX_DIFFICULTY_TAG)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                        .append(difficultyTag.toString()).append((\" \")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        descriptor.getGenderTag()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                .ifPresent(genderTag -\u003e sb.append(PREFIX_GENDER_TAG)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "                        .append(genderTag.toString()).append((\" \")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 13,
      "YangJiyu98": 15,
      "rayasamhr": 10,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/GlossaryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kswk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kswk"
        },
        "content": " * A utility class to help with building Glossary objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kswk"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kswk"
        },
        "content": " *     {@code Glossary ab \u003d new GlossaryBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kswk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kswk"
        },
        "content": "public class GlossaryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kswk"
        },
        "content": "    private Glossary glossary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public GlossaryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kswk"
        },
        "content": "        glossary \u003d new Glossary();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public GlossaryBuilder(Glossary glossary) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kswk"
        },
        "content": "        this.glossary \u003d glossary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kswk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kswk"
        },
        "content": "     * Adds a new {@code FlashCard} to the {@code Glossary} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kswk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public GlossaryBuilder withFlashCard(FlashCard flashCard) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        glossary.addFlashCard(flashCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kswk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public Glossary build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kswk"
        },
        "content": "        return glossary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kswk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kswk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "rayasamhr": 3,
      "kswk": 28
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the middle index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashCardList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the last index of the flashcard in the {@code model}\u0027s flashcard list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFlashCardList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "     * Returns the flashcard in the {@code model}\u0027s flashcard list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static FlashCard getFlashCard(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "        return model.getFilteredFlashCardList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Checks whether the order in two {$code FlashCard} lists are exactly the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param list1 first list to compare."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @param list2 second list to compare"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * @return true if the orders of the lists are the same, false otherwise."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static boolean checkSortedOrder(List\u003cFlashCard\u003e list1, List\u003cFlashCard\u003e list2) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        if (list1.size() !\u003d list2.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        for (int i \u003d 0; i \u003c list1.size(); i++) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            if (!list1.get(i).equals(list2.get(i))) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 23,
      "rayasamhr": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/TypicalFlashCards.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_DIFFICULTY_TAG_MEDIUM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_FORGETFULNESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_ENGLISH_PHRASE_TABLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GENDER_TAG_M;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GENDER_TAG_NONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_FORGETFULNESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_GERMAN_PHRASE_TABLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_CHAPTER_ONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.Glossary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.model.flashcard.FlashCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " * A utility class containing a list of {@code FlashCard} objects to be used in tests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "public class TypicalFlashCards {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard MONDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Montag\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withEnglishPhrase(\"Monday\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"EASY\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withTags(\"day\").withOrder(1).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard TUESDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Dienstag\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withEnglishPhrase(\"Tuesday\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"EASY\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withTags(\"day\").withOrder(2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard WEDNESDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Mittwoch\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withEnglishPhrase(\"Wednesday\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"MEDIUM\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\").withOrder(3)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final FlashCard THURSDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Donnerstag\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withEnglishPhrase(\"Thursday\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"MEDIUM\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\").withOrder(4)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withTags(\"day\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard FRIDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Freitag\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withEnglishPhrase(\"Friday\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"MEDIUM\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\").withOrder(5)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard SATURDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Samstag\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withEnglishPhrase(\"Saturday\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"HARD\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\").withOrder(6)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard SUNDAY \u003d new FlashCardBuilder().withGermanPhrase(\"Sonntag\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withEnglishPhrase(\"Sunday\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"HARD\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\").withOrder(7)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard MORNING \u003d new FlashCardBuilder().withGermanPhrase(\"Morgen\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withEnglishPhrase(\"Morning\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"MEDIUM\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withOrder(8).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard NOON \u003d new FlashCardBuilder().withGermanPhrase(\"Mittag\").withEnglishPhrase(\"Noon\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(\"MEDIUM\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(\"M\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withOrder(9).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    // Manually added - FlashCard\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final FlashCard FORGETFULNESS \u003d new FlashCardBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withGermanPhrase(VALID_GERMAN_PHRASE_FORGETFULNESS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withEnglishPhrase(VALID_ENGLISH_PHRASE_FORGETFULNESS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(VALID_DIFFICULTY_TAG_MEDIUM)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(VALID_GENDER_TAG_NONE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withTags().withOrder(8).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "    public static final FlashCard TABLE \u003d new FlashCardBuilder()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGermanPhrase(VALID_GERMAN_PHRASE_TABLE)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withEnglishPhrase(VALID_ENGLISH_PHRASE_TABLE)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withDifficultyTag(VALID_DIFFICULTY_TAG_MEDIUM)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "            .withGenderTag(VALID_GENDER_TAG_M)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            .withTags(VALID_TAG_CHAPTER_ONE, VALID_TAG_HARD).withOrder(9).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    private TypicalFlashCards() {} // prevents instantiation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Returns a {@code Glossary} with all the typical flashcards."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static Glossary getTypicalGlossary() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Glossary g \u003d new Glossary();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        for (FlashCard flashCard : getTypicalFlashCards()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            g.addFlashCard(flashCard);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return g;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * Returns a sorted {@code Glossary} with all the typical flashcards."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static Glossary getTypicalSortedGlossary() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        Glossary g \u003d new Glossary();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        for (FlashCard flashCard : getTypicalGermanSortedFlashCards()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "            g.addFlashCard(flashCard);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return g;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * A List of FlashCards sorted by chronological order."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static List\u003cFlashCard\u003e getTypicalFlashCards() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YangJiyu98"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     * A List of FlashCards sorted by alphabetical order of their German Phrases."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    public static List\u003cFlashCard\u003e getTypicalGermanSortedFlashCards() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TUESDAY, THURSDAY, FRIDAY, WEDNESDAY, MONDAY, SATURDAY, SUNDAY));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 83,
      "YangJiyu98": 41
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final Index INDEX_FIRST_FLASHCARD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final Index INDEX_SECOND_FLASHCARD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rayasamhr"
        },
        "content": "    public static final Index INDEX_THIRD_FLASHCARD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kswk"
        },
        "content": "    public static final Index INDEX_FIVE_FLASHCARDS \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 2,
      "rayasamhr": 3,
      "-": 7,
      "kswk": 1
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/forgetfulnus/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "package seedu.forgetfulnus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import static seedu.forgetfulnus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "import seedu.forgetfulnus.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "\u003c?import seedu.forgetfulnus.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tjwjoe"
        },
        "content": "\u003cfx:root type\u003d\"seedu.forgetfulnus.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tjwjoe": 1,
      "-": 5
    }
  }
]
