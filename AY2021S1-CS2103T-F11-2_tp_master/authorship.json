[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "# Productiv"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-F11-2/tp/actions)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "Want to be **productive** in managing your **product**?"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "If yes, **Productiv** is the way to go!"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "**Productiv** can help you:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* Manage your contacts, meetings, and deliverables"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* View your meetings and deliverables on a calendar"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* Keep track of your product\u0027s progress"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "## Site Map"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* [User Guide](https://github.com/AY2021S1-CS2103T-F11-2/tp/blob/master/docs/UserGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* [Developer Guide](https://github.com/AY2021S1-CS2103T-F11-2/tp/blob/master/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "* [About Us](https://github.com/AY2021S1-CS2103T-F11-2/tp/blob/master/docs/AboutUs.md)"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "claraadora": 15
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "### Cao Wenjie"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cimg src\u003d\"images/shadowezz.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "[[github](https://github.com/shadowezz)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Deliverable\" features and Quality Assurance (Testing)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "### Clara Adora"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cimg src\u003d\"images/claraadora.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "[[github](https://github.com/claraadora)]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Meeting\" features and Product Management"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "### Chrystal Quek"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cimg src\u003d\"images/chrystalquek.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "[[github](http://github.com/chrystalquek)] [[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Contact\" and \"Mode\" features, as well as Quality Assurance (Testing)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Gabriel Tan"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cimg src\u003d\"images/gabztcr.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "[[github](http://github.com/gabztcr)]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Deliverable\" features and Documentation"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### Merlin Lim"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "\u003cimg src\u003d\"images/merlinlim.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "[[github](https://github.com/MerlinLim)]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[[portfolio](team/johndoe.md)]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "* Responsibilities: In charge of \"Meeting\" features and Documentation"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "shadowezz": 13,
      "-": 37,
      "chrystalquek": 3,
      "MerlinLim": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* [**`Model`**](#modelPerson-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "* [**`Storage`**](#storagePerson-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/modelPerson/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) modelPerson is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storagePerson/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* has a need to manage a meeting schedule"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* has a need to oversee the development of the product"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Value proposition**: Used in a corporate setting, our application integrates both a meeting schedule and a contact list for the user to "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "manage their product’s development more comprehensively and conveniently."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "### EPIC"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| No | EPIC                                                                                                                                        | "
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|----|---------------------------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|A   | As a Product Manager, I can track my product’s development so that I can work better towards production deadlines.                          |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|B   | As a Product Manager, I can manage my stakeholder/dev team contacts.                                                                        |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|C   | As a Product Manager, I can organise my meetings with stakeholders.                                                                         |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|D   | As an inexperienced or forgetful Product Manager, I can refer to a user guide as I’m using the app so that I am able to use it as intended. |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "|E   | As a bridge between Dev Team and Stakeholders, I can communicate better.                                                                    |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "Priorities: "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `* * *` - High (must have)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `* *` - Medium (nice to have)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* `*` - Low (unlikely to have) "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                               | I want to …​                                                             | So that I can…​                 |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| -------- | ---------------------------------------- | --------------------------------------------------------------------------- | ---------------------------------- |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC A** |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | add deliverables                                                            | keep track of them                 |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | change the description of the deliverables                                  | keep them up to date               |"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | mark deliverables as completed                                              | refer back to them when needed     |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | delete deliverables that are no longer relevant                             | focus on current deliverables      |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | tag deliverables as delayed and change the deadlines                        |                                    |"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | change the person-in-charge of deliverables                                 | locate the right person easily     |"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | undo my action / be prompted before any action                              | minimise mistakes made             |"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view the overall completion percentage of the project                       | know whether we are on track (e.g _`completed deliverables` out of `total deliverables`_) |"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | package deliverables into different iterations                              | retrieve the relevant deliverables easily |"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | easily know who and how to contact the person-in-charge                     | contact the person when the progress of a deliverable is behind schedule |"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | flag problematic deliverables in the app                                    | know that these tasks require further attention |"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | be notified when my product’s development is close to tagline / past deadline / too slow |                       |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | pin different parts of the project according to their urgency               |                                    |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `*`      | Product Manager                          | see the previous products I have handled and their reviews                  |                                    |"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC B** |"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | add a contact                                                               | store their details for future communication |"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | view my contacts and their relevant details                                 | remember and retrieve important information  |"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | edit my contacts                                                            | keep them up-to-date               |"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | customise fields of information                                             | keep any data that I want          |"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | pin contacts which I frequent                                               | easily search through my long list of contacts |"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | search for contacts based on a certain field of information                 | easily navigate through different groups |"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC C** |"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | schedule new meetings with my stakeholders                                  | keep track of them                 |"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | edit existing meeting details with my stakeholders                          | update them accordingly            |"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | delete scheduled meetings with my stakeholders                              | remove outdated or cancelled meetings |"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | be notified if I have conflicting meetings before adding new ones           | reschedule the meetings            |"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | see a calendar view of my meetings                                          | know my available slots to schedule new meetings |"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | toggle between daily, weekly and monthly view                               | have both a macro and micro view of my schedule |"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC D** |"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view a helpful popup                                                        | easily access the relevant instructions |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | receive feedback from the app                                               | know the system has registered my action correctly or not |"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* *`    | Product Manager                          | view and easily navigate within the shortcut reference                      | locate technical solutions quickly |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| **EPIC E** |"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `* * *`  | Product Manager                          | distinguish between the developers and the stakeholders in a project easily | remember the different roles       |"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `*`      | Product Manager                          | view contacts of people involved in a product                               | communicate with relevant people   |"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "| `*`      | Product Manager                          | check the product’s completion stage                                        | quickly communicate any needs to the Dev Team and/or stakeholders |"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "(For all use cases below, the **System** is the `Productiv` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### Mode"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC01 - Switch Mode`**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to switch the mode."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "2. User enters the command to switch mode into the input box."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "3. Productiv switches to the expected mode."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * 2a1. Productiv displays an error message"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * 2a2. User enters the command again."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * 2a3. Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "       Use case resumes from step 3."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### CONTACT"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC10 - Add a contact`**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Contact mode`**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User adds contact."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 1a. Invalid input."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 1a1. Productiv shows an error message."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC11 - Edit a contact`**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Contact mode`**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Contact to edit exists`**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list contacts."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of contacts."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User edits a specific contact in the list."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv edits contact details."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 4a. The given input is invalid."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 4a1 Productiv shows an error message."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC12 - Delete a contact`**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Contact mode`** "
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Contact to delete exists`**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Guarantee(s):** "
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted contacts will not have its data in Productiv`**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted contacts cannot be retrieved back`**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list contacts."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of contacts."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to delete a specific contact in the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv deletes the contact."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   User case ends."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### DELIVERABLES"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC20 - Add Deliverable`**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to add a deliverable."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to add a deliverable into the input box."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv adds the deliverable for tracking."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC21 - Edit Deliverable`**"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deliverable to edit exists`**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to edit a deliverable."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to edit a deliverable into the input box."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv edits the deliverable."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   "
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC22 - Mark Deliverable Completed`**"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deliverable to mark complete exists`**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to mark a deliverable as completed."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to mark a deliverable as complete into the input box."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv marks the deliverable as done."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC23 - Delete Deliverable`**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the Deliverable mode`** "
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deliverable to delete exists`**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Guarantee(s):** "
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted deliverables will not have its data in Productiv`**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted deliverables cannot be retrieved back`**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User chooses to delete a deliverable."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User enters the command to delete a deliverable into the input box."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv prompts the user to confirm deletion."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User accepts confirmation."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv deletes the deliverable."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. Produtiv detects an error in the command."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a1. Productiv displays an error message."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 2a2. User enters the command again."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * Steps 2a1-2a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes from step 3."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 4a. User declines confirmation."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 4a1. Productiv cancels the deletion process."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "#### MEETING"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC30 - Add a meeting`**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the meeting mode`**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User adds meeting."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 1a. Invalid input."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 1a1. Productiv shows an error message."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC31 - Edit a meeting`**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the meeting mode`** "
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Meeting to edit exists`**"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list meetings."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of meetings."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User edits a specific meeting in the list."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv edits meeting details."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 4a. The given input is invalid."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    "
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 4a1 Productiv shows an error message."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      "
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Use case: `UC32 - Delete a meeting`**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Precondition(s):**"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`User is in the meeting mode`** "
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Meeting to delete exists`**"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Guarantee(s):** "
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted meeting will not have its data in Productiv`**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **`Deleted meeting cannot be retrieved back`**"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to list meetings."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv shows list of meetings."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. User requests to delete a specific meeting in the list."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Productiv deletes the meeting."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "   User case ends."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  "
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "  * Use case ends."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     "
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    * 3a1. Productiv shows an error message."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should be able to hold up to 1000 contacts without any negative effects."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should be able to hold up to 1000 deliverables without any negative effects."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. Should be able to schedule meetings up to 2 years in advance."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "1. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **Deliverable**: a thing able to be provided, especially as a product of a development process."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "* **CRUD**: Create, Read, Update and delete."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "-": 346,
      "chrystalquek": 5,
      "MerlinLim": 353
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   e.g. `seedu.address.storage.StoragePersonManagerTesterTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   e.g. `seedu.address.logic.LogicPersonManagerTest`"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "chrystalquek": 2
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Productiv is a **desktop app for product owners/managers to oversee the development "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "of their product, optimized for use via a Command Line Interface** (CLI) while still "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "having the benefits of a Graphical User Interface (GUI). If you can type fast, Productiv "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "can get your product management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick start"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Download the latest `Productiv.jar` from [Coming Soon]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for Productiv."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "   ![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. e.g. typing **`switch contact`** and pressing Enter will switch to the Contact mode.\u003cbr\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "   Some example commands you can try:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   * **`switch deliverable`** : Switches to `deliverable` mode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   * **`add`**`stk n/Betty Clarke p/98765432` : Adds a contact named `Betty Clarke` to Productiv."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "   * **`delete`**`1` : If in Contact mode, deletes the 1st contact shown."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Refer to the [Features](#features) below for details of each command."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### General"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### [Coming Soon] Viewing help: `help`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Shows a message that explains how to access the help page."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Switching modes: `switch`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Switches to either `contact`, `meeting` or `deliverable` mode."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `switch MODE`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Subsequent commands will be with respect to managing the mode."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `switch contact`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `switch meeting`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Contact"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Adding a contact: `add`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a developer or stakeholder to the contact list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `add ROLE n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `ROLE` is the type of contact - developer (`dev`) or stakeholder (`stk`)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `NAME` is the name of the contact."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `PHONE_NUMBER` is the phone number of the contact."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `EMAIL` is the email address of the contact."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `ADDRESS` is the home address of the contact."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TAG` is the job position of the contact."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add dev n/John Doe p/81234567 e/johndoe@gutter.com a/John street`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a developer with the name `John Doe`, phone number `81234567`,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "email `johndoe@gutter.com`, and address `John street`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add stk n/Betsy Crowe p/87654321`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a stakeholder with the name `Betsy Crowe` and phone number `87654321`."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Editing a contact: `edit`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits an existing developer or stakeholder in the contact list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Edits the contact at the specified `INDEX`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the contact in the displayed contact list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* The existing values of the specified contact will be updated to the input values."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 1 p/81234567 a/Fifth Avenue`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits the phone number and home address of the 1st person to be `81234567` and `Fifth Avenue` respectively."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 2 e/` "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits the email address of the 2nd contact to be empty, thus clearing the email address field."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Deleting a contact: `delete`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Deletes the specified developer or stakeholder from the contact list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Deletes the contact at the specified `INDEX`."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the contact in the displayed contact list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `delete 3` deletes the 3rd contact in the contact list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Deliverable"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Adding a deliverable `add`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a deliverable to the deliverable list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `add t/TITLE [desc/DESCRIPTION] [dead/DEADLINE] [c/CONTACT]…`​`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TITLE` is the main heading of the deliverable."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `DESCRIPTION` is the additional details of the deliverable (e.g. sub-requirements). "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `DEADLINE` is the due date time of the deliverable in DD-MM-YYYY HH:MM format."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `CONTACTS` represents the contact(s) involved in meeting the deliverable."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `CONTACTS` is a comma-separated list of the index numbers of these contacts, as specified in the contact list."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add t/Login screen desc/Must include username and password fields dead/12-12-2020 23:59 c/2,4` "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a deliverable with the title `Login screen`, description `Must include username and password fields`,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "deadline `12-12-2020 23:59` and contacts with index `2` and `4` in the contact list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Editing a deliverable: `edit`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits an existing deliverable in the deliverable list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `edit INDEX [t/TITLE] [desc/DESCRIPTION] [dead/DEADLINE] [c/CONTACTS]`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Edits the deliverable at the specified `INDEX`."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the deliverable in the displayed deliverable list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* The existing values of the specified deliverable will be updated to the input values."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 1 desc/Must include username, email and password fields dead/19-12-2020 23:59`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits the description of the 1st deliverable to be `Must include username, email and password fields`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "and pushes back the deadline of the deliverable by one week to `19-12-2020 23:59`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "*  `edit 2 desc/` Clears the description of the 2nd deliverable."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Marking a deliverable as completed: `done`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Marks the specified deliverable from the deliverable list as done."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Marks the deliverable at the specified `INDEX` as done."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the deliverable in the displayed deliverable list."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Deliverable at `INDEX` must be currently not marked as completed."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `done 1` marks the 1st deliverable in the deliverable list as done."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Deleting a deliverable: `delete`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Deletes the specified deliverable from the deliverable list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Deletes the deliverable at the specified `INDEX`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the deliverable in the displayed deliverable list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `delete 2` deletes the 2nd deliverable in the deliverable list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Meeting"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "#### Adding a meeting: `add`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a meeting to the meeting list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `add t/TITLE [desc/DESCRIPTION] from/FROM [to/TO] [c/CONTACTS] [l/LOCATION]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TITLE` is the main heading of the meeting."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `DESCRIPTION` is the additional details of the meeting (e.g. agenda). "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `FROM` is the start date time of the meeting in DD-MM-YYYY HH:MM format."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `TO` is the end date time of the meeting in DD-MM-YYYY HH:MM format."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `CONTACTS` represents the contact(s) involved in the meeting."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `CONTACTS` is a comma-separated list of the index numbers of these contacts, as specified in the contact list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "A meeting can have no specific end time."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `add t/Discuss app requirements desc/Refine functional requirements with "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "business associates from/12-12-2020 08:00 to/12-12-2020 09:00 c/3,6,9`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Adds a meeting with the title `Discuss app requirements`, description `Refine functional requirements "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "with business associates`, start date time `12-12-2020 08:00`, end date time `12-12-2020 09:00` and "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "the attendees are contacts with index `3`, `6` and `9` in the contact list."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Editing a meeting: `edit`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits an existing meeting in the meeting list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `edit INDEX [t/TITLE] [desc/DESCRIPTION] [from/FROM] [to/TO] [c/CONTACTS] [l/LOCATION]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Edits the meeting at the specified `INDEX`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the meeting in the displayed meeting list."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* The existing values of the specified meeting will be updated to the input values."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `edit 3 t/Discuss final release features desc/Finalize dashboard functions`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Edits the 3rd meeting by replacing its title with `Discuss final release features` "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "and description `Finalize dashboard functions`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "### Deleting a meeting: `delete`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Deletes the specified meeting from the meeting list."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* Deletes the meeting at the specified `INDEX`."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` is the index number of the meeting in the displayed meeting list."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `INDEX` **must be a positive integer** 1, 2, 3, ..."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "* `delete 4` deletes the 4th meeting in the meeting list."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "Productiv data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "creates with the file that contains the data of your previous Productiv home folder."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "## Command summary"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Mode** | `mode`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Add (Contact)** | `add ROLE n/NAME p/PHONE_NUMBER [e/EMAIL] [a/ADDRESS] [t/TAG]` \u003cbr\u003e e.g., `add stk n/Jenny Ho p/98981212 e/jennyho@pmail.com`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Edit (Meeting)** | `edit INDEX [t/TITLE] [desc/DESCRIPTION] [from/FROM] [to/TO] [c/CONTACTS] [l/LOCATION]` \u003cbr\u003e e.g., `edit 2 l/Blk C Level 8 Meeting Room 1`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Mark Deliverable as Done** | `done INDEX` \u003cbr\u003e e.g., `done 2`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "**Delete** | `delete INDEX` \u003cbr\u003e e.g., `delete 3`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "**Exit** | `exit`"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 164,
      "-": 110
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "title: Productiv AddressBook Level-3"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 18
    }
  },
  {
    "path": "docs/tutorials/AddRemark.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Adding a command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s walk you through the implementation of a new command — `remark`."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Create a new `remark` command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "### Run the application"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "![Output displayed](../images/add-remark/RemarkHello.png)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "## Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "### Make the command accept parameters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "### Parse user input"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentTokenizer.java`:**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "**`ArgumentMultimap.java`:**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "**`DeleteCommandParser.java`:**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommandParser.java`:**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "## Add `Remark` to the modelPerson"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storagePerson of person data. We achieve that by working with the `Person` modelPerson. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "### Add a new `Remark` class"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "Create a new `Remark` in `seedu.address.modelPerson.person.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "validation."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "### Make use of `Remark`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "## Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonListCard.fxml`:**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "That’s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "![$remark shows up in each entry](../images/add-remark/$Remark.png)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "## Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "### Modify `Person`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "### Update other usages of `Person`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "## Updating Storage"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ":exclamation: You must delete AddressBook’s storagePerson file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "to see what the changes entail."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "## Finalizing the UI"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`:**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "## Putting everything together"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "### Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**`RemarkCommand.java`:**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "![Congratulations!](../images/add-remark/RemarkComplete.png)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "## Writing tests"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "### Automatically generating tests"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is `methodName_testScenario_expectedResult`. An example would be"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`execute_filteredList_success`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      }
    ],
    "authorContributionMap": {
      "-": 382,
      "chrystalquek": 11,
      "claraadora": 1
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Removing Fields\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Antoine de Saint-Exupery"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` modelPerson to suit your use case."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "## Safely deleting `Address`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "### Assisted refactoring"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.modelPerson.person.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "![Usages detected](../images/remove/UnsafeDelete.png)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "![List of conflicts](../images/remove/SafeDeleteConflicts.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Let’s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Safe delete the field `address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Yes` when prompted to remove getters and setters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `View Usages` again.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "1. Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "### Manual refactoring"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![$address](../images/remove/$address.png)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.java`**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "**`PersonCard.fxml`**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "``` xml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## Tidying up"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "**`invalidPersonAddressBook.json`:**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "chrystalquek": 2
    }
  },
  {
    "path": "docs/tutorials/TracingCode.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: \"Tutorial: Tracing code\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Before we start"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "![ArchitectureDiagram](../images/ArchitectureDiagram.png)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "![Architecture sequence diagram from the developer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "guide](../images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting a break point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " ![LeftGutter](../images/tracing/LeftGutter.png)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Tracing the execution path"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ![StepInto](../images/tracing/StepInto.png)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   **LogicManager\\#execute().**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "   public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "           throws CommandException, ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Logging, safe to ignore"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        //Parse user input from String to a Command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        //Executes the Command and stores the result"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        commandResult \u003d command.execute(modelPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            //We can deduce that the previous line of code modifies modelPerson in some way"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // since it\u0027s being stored here."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            storagePerson.saveAddressBook(modelPerson.getAddressBook());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    **`AddressBookParser\\#parseCommand()`**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "       final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "       final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Variables](../images/tracing/Variables.png)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "   ![EditCommand](../images/tracing/EditCommand.png)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. Let’s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Now let’s see what happens when we call `command#execute()`\\!"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "   **`EditCommand\\#execute()`:**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "   @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "   public CommandResult execute(Model modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "       ..."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "       Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 modelPerson.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "       modelPerson.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "       modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. As suspected, `command#execute()` does indeed make changes to `modelPerson`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "1. We can a closer look at how storagePerson works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    `JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "   ``` java"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "   /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "       persons.addAll("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "           source.getPersonList()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                 .stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                 .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                 .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "   }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "   ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "1. We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    **`ResultDisplay\\#setFeedbackToUser()`**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "1. Finally, we step through until we reach the end of"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "## Conclusion"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "the result being displayed to the user. From this tutorial, you learned"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "more about the inner workings of AddressBook and how the various"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "components mesh together to form one cohesive product."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "execution path tracing. In some cases, you can do further tracing for"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "the given commands to find exactly what happens."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    instead? What exceptions do you think will be thrown(if any), where"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    will the exceptions be thrown and where will they be handled?"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  `edit 1`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "2.  What components will you have to modify to perform the following"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    enhancements to the application?"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    1.  Make command words case-insensitive"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    2.  Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    3.  Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    4.  Add a new command"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    5.  Add a new field to `Person`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    6.  Add a new entity to the address book"
      }
    ],
    "authorContributionMap": {
      "-": 241,
      "chrystalquek": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverableManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeetingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicModeManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPersonManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverableManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.DeliverableBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.JsonDeliverableBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.StorageDeliverable;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.StorageDeliverableManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.JsonMeetingBookStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.MeetingBookStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.StorageMeeting;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.StorageMeetingManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.AddressBookStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.person.StoragePerson;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected LogicPerson logicPerson;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected StoragePerson storagePerson;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected ModelPerson modelPerson;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected ModelDeliverable modelDeliverable;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected StorageDeliverable storageDeliverable;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    protected LogicDeliverable logicDeliverable;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    protected LogicMeeting logicMeeting;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    protected StorageMeeting storageMeeting;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    protected ModelMeeting modelMeeting;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    protected LogicMode logicMode;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableBookStorage deliverableBookStorage \u003d new JsonDeliverableBookStorage("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                userPrefs.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingBookStorage meetingBookStorage \u003d new JsonMeetingBookStorage("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                userPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storagePerson \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        storageDeliverable \u003d new StorageDeliverableManager(deliverableBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        storageMeeting \u003d new StorageMeetingManager(meetingBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson \u003d initModelManager(storagePerson, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable \u003d initDeliverableModelManager(storageDeliverable, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting \u003d initMeetingModelManager(storageMeeting, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicPerson \u003d new LogicPersonManager(modelPerson, storagePerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logicDeliverable \u003d new LogicDeliverableManager(modelDeliverable, storageDeliverable);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logicMeeting \u003d new LogicMeetingManager(modelMeeting, storageMeeting);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicMode \u003d new LogicModeManager();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ui \u003d new UiManager(logicMode, logicPerson, logicDeliverable, logicMeeting);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson initModelManager(StoragePerson storagePerson, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            addressBookOptional \u003d storagePerson.readAddressBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new ModelPersonManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private ModelDeliverable initDeliverableModelManager(StorageDeliverable storageDeliverable,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                                                         ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Optional\u003cReadOnlyDeliverableBook\u003e deliverableBookOptional;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ReadOnlyDeliverableBook initialData;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            deliverableBookOptional \u003d storageDeliverable.readDeliverableBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (!deliverableBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                logger.info(\"Data file for deliverable not found. Will be starting with a sample DeliverableBook\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            initialData \u003d deliverableBookOptional.orElseGet(SampleDataUtil::getSampleDeliverableBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            logger.warning(\"Data file for deliverable not in the correct format. \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    + \"Will be starting with an empty DeliverableBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            initialData \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            logger.warning(\"Problem while reading from the deliverable file. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    + \"Will be starting with an empty DeliverableBook\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            initialData \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new ModelDeliverableManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s meeting book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The data from the sample meeting book will be used instead if {@code storage}\u0027s meeting book is not found,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * or an empty meeting book will be used instead if errors occur when reading {@code storage}\u0027s meeting book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ModelMeeting initMeetingModelManager(StorageMeeting storageMeeting,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                                                 ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Optional\u003cReadOnlyMeetingBook\u003e meetingBookOptional;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ReadOnlyMeetingBook initialData;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            meetingBookOptional \u003d storageMeeting.readMeetingBook();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (!meetingBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                logger.info(\"Data file for meeting not found. Will be starting with a sample MeetingBook\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            initialData \u003d meetingBookOptional.orElseGet(SampleDataUtil::getSampleMeetingBook);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            logger.warning(\"Data file for meeting not in the correct format. \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Will be starting with an empty MeetingBook\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            initialData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            logger.warning(\"Problem while reading from the meeting file. \""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Will be starting with an empty MeetingBook\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            initialData \u003d new MeetingBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new ModelMeetingManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            storagePerson.saveUserPrefs(modelPerson.getUserPrefs());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            // for testing"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storageDeliverable.saveDeliverableBook(modelDeliverable.getDeliverableBook());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            storageMeeting.saveMeetingBook(modelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 56,
      "-": 165,
      "chrystalquek": 19,
      "claraadora": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/ModeEnum.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.StringUtil.getStringJoinedBySeparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum ModeEnum {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DASHBOARD(\"Dashboard\", \"dashboard\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DELIVERABLE(\"Deliverable\", \"deliverable\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    MEETING(\"Meeting\", \"meeting\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    PERSON(\"Contact\", \"contact\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModeEnum(String name, String argument) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static ModeEnum getEnumByArgument(String argument) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (ModeEnum modeEnum : ModeEnum.values()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (modeEnum.argument.equals(argument)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return modeEnum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String getModeOptions() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return getStringJoinedBySeparator(Arrays.stream(ModeEnum.values()).map(role -\u003e role.getArgument()),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \" or \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getArgument() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX \u003d \"Invalid deliverable index!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns a String with elements in stream joined by separator."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Use for validation regex, options, etc."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param stream Stream with elements of type String"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return String with elements in stream joined by separator"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String getStringJoinedBySeparator(Stream\u003cString\u003e stream, String separator) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return stream.collect(Collectors.joining(separator));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "chrystalquek": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * API of logic component for deliverable (should only have one interface for logic, change later)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface LogicDeliverable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the DeliverableBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see ModelDeliverable#getDeliverableBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ReadOnlyDeliverableBook getDeliverableBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of deliverables */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ObservableList\u003cDeliverable\u003e getFilteredDeliverableList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicDeliverableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.deliverable.DeliverableBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.deliverable.StorageDeliverable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Logic manager for deliverables"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class LogicDeliverableManager implements LogicDeliverable {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to deliverable file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicDeliverableManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ModelDeliverable modelDeliverable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final StorageDeliverable storageDeliverable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final DeliverableBookParser deliverableBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code LogicDeliverableManager} with the given {@code ModelDeliverable}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and {@code StorageDeliverable}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public LogicDeliverableManager(ModelDeliverable modelDeliverable, StorageDeliverable storageDeliverable) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.modelDeliverable \u003d modelDeliverable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.storageDeliverable \u003d storageDeliverable;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBookParser \u003d new DeliverableBookParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Command command \u003d deliverableBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        commandResult \u003d command.execute(modelDeliverable);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            storageDeliverable.saveDeliverableBook(modelDeliverable.getDeliverableBook());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ReadOnlyDeliverableBook getDeliverableBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getDeliverableBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e getFilteredDeliverableList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return modelDeliverable.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * API of logic component for meeting"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface LogicMeeting {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the MeetingBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see ModelMeeting#getMeetingBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ReadOnlyMeetingBook getMeetingBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of Meetings */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 Meeting book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.meeting.MeetingBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.meeting.StorageMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Manages the logic for the meeting feature."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class LogicMeetingManager implements LogicMeeting {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to meeting file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicMeetingManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final ModelMeeting modelMeeting;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final StorageMeeting storageMeeting;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final MeetingBookParser meetingBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code LogicMeetingManager} with the given {@code ModelMeeting} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public LogicMeetingManager(ModelMeeting modelMeeting, StorageMeeting storageMeeting) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.modelMeeting \u003d modelMeeting;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.storageMeeting \u003d storageMeeting;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBookParser \u003d new MeetingBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Command command \u003d meetingBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        commandResult \u003d command.execute(modelMeeting);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            storageMeeting.saveMeetingBook(modelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getMeetingBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return modelMeeting.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicMode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface LogicMode {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isModeCommand(String commandText);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicModeManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.mode.ModeParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class LogicModeManager implements LogicMode {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicModeManager.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeParser modeParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public LogicModeManager() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.modeParser \u003d new ModeParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Command command \u003d modeParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isModeCommand(String commandText) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modeParser.isModeCommand(commandText);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface LogicPerson {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see ModelPerson#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "chrystalquek": 4,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicPersonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.person.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.person.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class LogicPersonManager implements LogicPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicPersonManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModelPerson modelPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final StoragePerson storagePerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public LogicPersonManager(ModelPerson modelPerson, StoragePerson storagePerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.modelPerson \u003d modelPerson;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.storagePerson \u003d storagePerson;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        commandResult \u003d command.execute(modelPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            storagePerson.saveAddressBook(modelPerson.getAddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getAddressBookFilePath();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "chrystalquek": 17,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeEnum mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, ModeEnum mode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this(feedbackToUser, false, false, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ModeEnum getMode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 mode \u003d\u003d otherCommandResult.mode;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, mode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "chrystalquek": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Adds a deliverable to the deliverable book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deliverable to the deliverable book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_DEADLINE + \"DEADLINE] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"[\" + PREFIX_CONTACTS + \"CONTACTS]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_TITLE + \"Login screen \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Must include username and password fields \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_DEADLINE + \"12-12-2020 23:59 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + PREFIX_CONTACTS + \"2,4\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deliverable added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \"This deliverable already exists in the deliverable book\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Deliverable toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deliverable}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public AddCommand(Deliverable deliverable) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverable);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        toAdd \u003d deliverable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (modelDeliverable.hasDeliverable(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.addDeliverable(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 14,
      "shadowezz": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a command for deliverable with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param modelDeliverable {@code ModelDeliverable} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public abstract CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Deletes a deliverable identified using it\u0027s displayed index from the deliverable book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \": Deletes the deliverable identified by the index number used in the displayed deliverable list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_DELETE_DELIVERABLE_SUCCESS \u003d \"Deleted deliverable: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        List\u003cDeliverable\u003e lastShownList \u003d modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverableToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        modelDeliverable.deleteDeliverable(deliverableToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DELIVERABLE_SUCCESS, deliverableToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.model.deliverable.ModelDeliverable.PREDICATE_SHOW_ALL_DELIVERABLES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ModelDeliverable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Completes a deliverable"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final boolean COMPLETED \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_DONE_DELIVERABLE_SUCCESS \u003d \"Marked deliverable as done: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \": Marks as done the deliverable identified by the index number used in the displayed deliverable list\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Construct command given index of deliverable to complete."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param targetIndex specified index of deliverable to complete."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public CommandResult execute(ModelDeliverable modelDeliverable) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(modelDeliverable);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        List\u003cDeliverable\u003e lastShownList \u003d modelDeliverable.getFilteredDeliverableList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DELIVERABLE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable deliverableToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable completedDeliverable \u003d createCompletedDeliverable(deliverableToComplete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.setDeliverable(deliverableToComplete, completedDeliverable);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        modelDeliverable.updateFilteredDeliverableList(PREDICATE_SHOW_ALL_DELIVERABLES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_DELIVERABLE_SUCCESS, deliverableToComplete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Deliverable createCompletedDeliverable(Deliverable deliverableToComplete) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Title title \u003d deliverableToComplete.getTitle();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Description description \u003d deliverableToComplete.getDescription();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deadline deadline \u003d deliverableToComplete.getDeadline();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String contacts \u003d deliverableToComplete.getContacts();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable(title, description, deadline, COMPLETED, contacts);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deliverable/EditDeliverableDescriptor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.commands.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Stores the details to edit the deliverable with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * corresponding field value of the deliverable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class EditDeliverableDescriptor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private String contacts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public EditDeliverableDescriptor() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Copy constructor."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public EditDeliverableDescriptor(EditDeliverableDescriptor toCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setTitle(toCopy.title);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDescription(toCopy.description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeadline(toCopy.deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setContacts(toCopy.contacts);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setIsComplete(toCopy.isComplete);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return CollectionUtil.isAnyNonNull(title, description, deadline, contacts, isComplete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setTitle(Title title) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDescription(Description description) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeadline(Deadline deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cDeadline\u003e getDeadline() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Optional.ofNullable(deadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setContacts(String contacts) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cString\u003e getContacts() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Optional.ofNullable(contacts);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setIsComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cBoolean\u003e getCompletionStatus() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Optional.ofNullable(isComplete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(other instanceof EditDeliverableDescriptor)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        EditDeliverableDescriptor e \u003d (EditDeliverableDescriptor) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 getDeadline().equals(e.getDeadline())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 getContacts().equals(e.getContacts())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 getCompletionStatus().equals(e.getCompletionStatus());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a meeting to the meeting book.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_FROM + \"FROM \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TO + \"TO \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_CONTACTS + \"CONTACTS\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TITLE + \"Discuss user requirements with biz associates \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Refer to the reviewed user stories during discussion \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_FROM + \"2020-12-31 12:00\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_TO + \"2020-12-31 14:00 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + PREFIX_CONTACTS + \"1 3 5 \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New meeting added: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This meeting already exists in the meeting book\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Meeting toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a MeetingCommand to add the specified {@code Meeting}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public AddCommand(Meeting meeting) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        toAdd \u003d meeting;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (modelMeeting.hasMeeting(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        modelMeeting.addMeeting(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof AddCommand"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a meeting command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"meeting\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param modelMeeting {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public abstract CommandResult execute(ModelMeeting modelMeeting) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Deletes a meeting given the specified index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_DELETE_MEETING_SUCCESS \u003d \"Meeting Deleted: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a meeting.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_MEETING_DISPLAYED_INDEX \u003d \"The meeting index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Construct command given index of meeting to delete."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param targetIndex specified index of meeting to delete."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new CommandException(MESSAGE_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof DeleteCommand) // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/meeting/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the meeting.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_EDIT_MEETING_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEETING \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_INVALID_MEETING_DISPLAYED_INDEX \u003d \"Invalid Meeting index.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final EditMeetingDescriptor editMeetingDescriptor;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param index                 of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param editMeetingDescriptor details to edit the person with"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditCommand(Index index, EditMeetingDescriptor editMeetingDescriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(editMeetingDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.editMeetingDescriptor \u003d new EditMeetingDescriptor(editMeetingDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public CommandResult execute(ModelMeeting modelMeeting) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(modelMeeting);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //TODO: Add getFilteredMeetingList"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //List\u003cMeeting\u003e lastShownList \u003d modelMeeting.getFilteredMeetingList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e lastShownList \u003d new ArrayList\u003cMeeting\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting editedMeeting \u003d createEditedMeeting(meetingToEdit, editMeetingDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //TODO: throw exception if meetingToEdit.isSameMeeting(editedMeeting) makes no changes"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (modelMeeting.hasMeeting(editedMeeting)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEETING);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //TODO: implement setMeeting and updateFilteredMeetingList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //modelMeeting.setMeeting(meetingToEdit, editedMeeting);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //modelMeeting.updateFilteredMeetingList(PREDICATE_SHOW_ALL_Meeting);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEETING_SUCCESS, editedMeeting));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private static Meeting createEditedMeeting(Meeting meetingToEdit, EditMeetingDescriptor editMeetingDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assert meetingToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // String updatedTitle \u003d editMeetingDescriptor.getTitle().orElse(meetingToEdit.getTitle());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // String updatedDesc \u003d editMeetingDescriptor.getDescription().orElse(meetingToEdit.getDescription());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // String updatedFrom \u003d editMeetingDescriptor.getFrom().orElse(meetingToEdit.getFrom());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // String updatedTo \u003d editMeetingDescriptor.getTo().orElse(meetingToEdit.getTo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // String updatedContacts \u003d editMeetingDescriptor.getContacts().orElse(meetingToEdit.getContacts());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // String updatedLocation \u003d editMeetingDescriptor.getLocation().orElse(meetingToEdit.getLocation());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // return new Meeting(updatedTitle, updatedDesc, updatedFrom, updatedTo, updatedContacts, updatedLocation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Meeting(new Title(\"A\"), new OptionalDescription(\"B\"), new From(\"2\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"3\"), new Contacts(\"1,2,3\"), new Location(\"SG\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 editMeetingDescriptor.equals(e.editMeetingDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static class EditMeetingDescriptor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private String title;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private String from;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private String to;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private String contacts;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private String location;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public EditMeetingDescriptor() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         * Copy attributes from meeting to be edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         * @param toCopy meeting to be edited."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public EditMeetingDescriptor(EditMeetingDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setFrom(toCopy.from);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setTo(toCopy.to);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setContacts(toCopy.contacts);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setTitle(String title) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cString\u003e getTitle() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.title);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.description);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setFrom(String from) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.from \u003d from;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cString\u003e getFrom() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.from);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setTo(String to) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.to \u003d to;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cString\u003e getTo() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.to);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setContacts(String contact) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.contacts \u003d contact;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cString\u003e getContacts() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.contacts);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setLocation(String location) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Optional\u003cString\u003e getLocation() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return Optional.ofNullable(this.location);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            if (!(other instanceof EditMeetingDescriptor)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            EditMeetingDescriptor e \u003d (EditMeetingDescriptor) other;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getFrom().equals(e.getFrom())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getTo().equals(e.getTo())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getContacts().equals(e.getContacts())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "MerlinLim": 207,
      "claraadora": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public abstract CommandResult execute();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 15,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 17,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/mode/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Switches the mode of the application."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches mode. Parameters: \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + ModeEnum.getModeOptions()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \" \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" contact\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mode switched to: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeEnum mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Creates a SwitchCommand to switch the specified {@code ModeEnum}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public SwitchCommand(ModeEnum mode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, mode), false, false, mode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 mode.equals(((SwitchCommand) other).mode)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "chrystalquek": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + PREFIX_ROLE + \"stk \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + PREFIX_DESCRIPTION + \"End user\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (modelPerson.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "chrystalquek": 12,
      "claraadora": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "chrystalquek": 3,
      "claraadora": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param modelPerson {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public abstract CommandResult execute(ModelPerson modelPerson) throws CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 16,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "chrystalquek": 5,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.model.person.ModelPerson.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d modelPerson.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 modelPerson.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        OptionalDescription updatedDescription \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                editPersonDescriptor.getDescription().orElse(personToEdit.getDescription());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role updatedRole \u003d personToEdit.getRole();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedRole, updatedDescription);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        private OptionalDescription description;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, description);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public void setDescription(OptionalDescription description) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        public Optional\u003cOptionalDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 170,
      "chrystalquek": 26,
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, modelPerson.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "chrystalquek": 5,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/person/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.model.person.ModelPerson.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public CommandResult execute(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(modelPerson);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "chrystalquek": 3,
      "claraadora": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DateParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Parser that is able to parse Date."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class DateParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DATE_INVALID_FORMAT \u003d \"Date format should be either MM/DD/YYYY or MM/DD/YYYY HH:mm.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"Note: Single digit (except for year) can start with leading zero.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses the given {@code String} to Date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected date format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Date parseDate(String strDate) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String formatWithMin \u003d \"y-M-d HH:mm\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String formatWithoutMin \u003d \"y-M-d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new SimpleDateFormat(strDate.length() \u003e 11 ? formatWithMin : formatWithoutMin).parse(strDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (java.text.ParseException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(DATE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface Parser\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TokenizedUserInput.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class TokenizedUserInput {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String arguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    TokenizedUserInput(String commandWord, String arguments) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.arguments \u003d arguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static TokenizedUserInput getCommandWordArgumentsFromUserInput(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new TokenizedUserInput(commandWord, arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return commandWord;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getArguments() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return arguments;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for deliverable"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_DEADLINE, PREFIX_CONTACTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Description description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).isEmpty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                ? Description.createEmptyDescription()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                : ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deadline deadline \u003d argMultimap.getValue(PREFIX_DEADLINE).isEmpty()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                ? Deadline.createEmptyDeadline()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                : ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_DEADLINE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        String contacts \u003d argMultimap.getValue(PREFIX_CONTACTS).isEmpty()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                ? \"NIL\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                : ParserUtil.parseContacts(argMultimap.getValue(PREFIX_CONTACTS).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        Deliverable deliverable \u003d new Deliverable(title, description, deadline, contacts);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new AddCommand(deliverable);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 11,
      "shadowezz": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to deliverable commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE \u003d new Prefix(\"dead/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final Prefix PREFIX_CONTACTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 6,
      "shadowezz": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.deliverable.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/DeliverableBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.DoneCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses user input for deliverable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableBookParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 3,
      "shadowezz": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.deliverable.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deliverable/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.logic.parser.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (description.equals(\"NIL\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new Description(description);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Parses a {@code String deadline} into a {@code Deadline}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws ParseException if the given {@code deadline} is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static Deadline parseDeadline(String deadline) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (deadline.equals(\"NIL\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return new Deadline(deadline);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        String trimmedDeadline \u003d deadline.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Deadline.isValidDeadline(trimmedDeadline)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return new Deadline(trimmedDeadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Trims leading and trailing whitespaces."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String parseContacts(String contacts) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(contacts);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return contacts.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 89,
      "shadowezz": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TO, PREFIX_FROM,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        PREFIX_CONTACTS, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_FROM)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        OptionalDescription description \u003d ParserCommon.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        From from \u003d ParserUtil.parseFrom(argMultimap.getValue(PREFIX_FROM).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        To to \u003d ParserUtil.parseTo(argMultimap.getValue(PREFIX_TO).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Contacts contacts \u003d ParserCommon.parseContacts(argMultimap.getValue(PREFIX_CONTACTS));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Meeting meeting \u003d new Meeting(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new AddCommand(meeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // TODO: Move the function up the hierarchy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "claraadora": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_CONTACTS \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.EditCommand.EditMeetingDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_DESCRIPTION, PREFIX_TO, PREFIX_FROM,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                        PREFIX_CONTACTS, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        EditMeetingDescriptor editMeetingDescriptor \u003d new EditMeetingDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            editMeetingDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            editMeetingDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_FROM).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            editMeetingDescriptor.setFrom(ParserUtil.parseFrom(argMultimap.getValue(PREFIX_FROM).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_TO).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            editMeetingDescriptor.setTo(ParserUtil.parseTo(argMultimap.getValue(PREFIX_TO).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_CONTACTS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            editMeetingDescriptor.setContacts(ParserUtil.parseContacts(argMultimap."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            getValue(PREFIX_CONTACTS).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            editMeetingDescriptor.setLocation(ParserUtil.parseLocation(argMultimap."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        if (!editMeetingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new EditCommand(index, editMeetingDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 48,
      "claraadora": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/MeetingBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.meeting.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Parses user input for meeting."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingBookParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Checks if user input is a mode command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @return whether the user input is a mode command"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean isMeetingCommand(String userInput) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userInput.startsWith(Command.COMMAND_WORD);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "claraadora": 18,
      "MerlinLim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/meeting/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static To parseTo(String to) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(to);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedTo \u003d to.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!To.isValidTo(trimmedTo)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new To(trimmedTo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static From parseFrom(String from) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(from);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedFrom \u003d from.trim();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!From.isValidFrom(trimmedFrom)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(From.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new From(trimmedFrom);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Location parseLocation(Optional\u003cString\u003e location) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (location.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new Location(location);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedLocation \u003d location.get().trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mode/ModeParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.TokenizedUserInput;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModeParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        TokenizedUserInput tokenizedUserInput \u003d TokenizedUserInput.getCommandWordArgumentsFromUserInput(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String commandWord \u003d tokenizedUserInput.getCommandWord();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String arguments \u003d tokenizedUserInput.getArguments();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Checks if user input is a mode command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @return whether the user input is a mode command"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public boolean isModeCommand(String userInput) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return userInput.startsWith(SwitchCommand.COMMAND_WORD) || userInput.startsWith(ExitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || userInput.startsWith(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/mode/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SwitchCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * and returns a SwitchCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModeEnum mode \u003d ModeEnum.getEnumByArgument(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (mode \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new SwitchCommand(mode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Parses input arguments and creates a new AddCommand object for person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ROLE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ROLE, PREFIX_NAME, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        OptionalDescription description \u003d ParserCommon.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person person \u003d new Person(name, phone, email, role, description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 1,
      "-": 38,
      "chrystalquek": 17,
      "claraadora": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.person.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.TokenizedUserInput;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        TokenizedUserInput tokenizedUserInput \u003d TokenizedUserInput.getCommandWordArgumentsFromUserInput(userInput);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String commandWord \u003d tokenizedUserInput.getCommandWord();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String arguments \u003d tokenizedUserInput.getArguments();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "chrystalquek": 5,
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "chrystalquek": 2,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.util.ParserCommon;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            editPersonDescriptor.setDescription(ParserCommon.parseDescription("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "chrystalquek": 7,
      "claraadora": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "chrystalquek": 1,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/person/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Phone parsePhone(Optional\u003cString\u003e phone) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (phone.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            return new Phone(phone);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String trimmedPhone \u003d phone.get().trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return parsePhone(Optional.of(phone));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Parses a {@code String role} into a {@code Role}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Role.getRole(trimmedRole);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "chrystalquek": 22,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/util/ParserCommon.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ParserCommon {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e description} into a {@code Description}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static OptionalDescription parseDescription(Optional\u003cString\u003e description) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new OptionalDescription(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedDescription \u003d description.get().trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!OptionalDescription.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new ParseException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new OptionalDescription(trimmedDescription);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e contacts} into an {@code Contacts}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws ParseException if the given {@code contacts} is invalid."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Contacts parseContacts(Optional\u003cString\u003e contacts) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (contacts.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return new Contacts(contacts);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        String trimmedContacts \u003d contacts.get().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Contacts.isValidContacts(trimmedContacts)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new ParseException(Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Contacts(trimmedContacts);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "claraadora": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "-": 16,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Path deliverableBookFilePath \u003d Paths.get(\"data\", \"deliverablebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Path meetingBookFilePath \u003d Paths.get(\"data\", \"meetingbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverableBookFilePath(newUserPrefs.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        setMeetingBookFilePath(newUserPrefs.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBookFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableBookFilePath(Path deliverableBookFilePath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverableBookFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBookFilePath \u003d deliverableBookFilePath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBookFilePath \u003d meetingBookFilePath;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 deliverableBookFilePath.equals(o.deliverableBookFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 meetingBookFilePath.equals(o.meetingBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                deliverableBookFilePath, meetingBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(\"\\nLocal data address file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(\"\\nLocal data deliverable file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        sb.append(\"\\nLocal data meeting file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 14,
      "-": 84,
      "claraadora": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/DeliverableBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.UniqueDeliverableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Wraps all data at the deliverable-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Duplicates are not allowed (by .isSameDeliverable comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableBook implements ReadOnlyDeliverableBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final UniqueDeliverableList deliverables;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables \u003d new UniqueDeliverableList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBook() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates an DeliverableBook using the Deliverables in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBook(ReadOnlyDeliverableBook toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the contents of the deliverable list with {@code deliverables}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code deliverables} must not contain duplicate deliverables."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverables(List\u003cDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverables.setDeliverables(deliverables);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Resets the existing data of this {@code DeliverableBook} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void resetData(ReadOnlyDeliverableBook newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        setDeliverables(newData.getDeliverableList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //// deliverable-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if a deliverable with the same identity as {@code deliverable} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverable);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.contains(deliverable);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a deliverable to the deliverable book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must not already exist in the deliverable book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void addDeliverable(Deliverable p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.add(p);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the given deliverable {@code target} in the list with {@code editedDeliverable}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code target} must exist in the deliverable book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable identity of {@code editedDeliverable} must not be the same as"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * another existing deliverable in the deliverable book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(editedDeliverable);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.setDeliverable(target, editedDeliverable);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Removes {@code key} from this {@code DeliverableBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code key} must exist in the deliverable book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void removeDeliverable(Deliverable key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.asUnmodifiableObservableList().size() + \" deliverables\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e getDeliverableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof DeliverableBook // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 deliverables.equals(((DeliverableBook) other).deliverables));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverables.hashCode();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 118
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/ModelDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Api of Model component of Deliverable"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface ModelDeliverable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Predicate\u003cDeliverable\u003e PREDICATE_SHOW_ALL_DELIVERABLES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverableBookFilePath(Path deliverableBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces deliverable book data with the data in {@code deliverableBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverableBook(ReadOnlyDeliverableBook deliverableBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns the DeliverableBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ReadOnlyDeliverableBook getDeliverableBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if a deliverable with the same identity as {@code deliverable} exists in the deliverable book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    boolean hasDeliverable(Deliverable deliverable);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Deletes the given deliverable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must exist in the deliverable book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void deleteDeliverable(Deliverable target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds the given deliverable."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code deliverable} must not already exist in the deliverable book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void addDeliverable(Deliverable deliverable);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the given deliverable {@code target} with {@code editedDeliverable}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code target} must exist in the deliverable book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable identity of {@code editedDeliverable} must not be the same as"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * another existing deliverable in the deliverable book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void setDeliverable(Deliverable target, Deliverable editedDeliverable);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Completes the given deliverable."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must exist in the deliverable book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void completeDeliverable(Deliverable target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deliverable list */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ObservableList\u003cDeliverable\u003e getFilteredDeliverableList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Updates the filter of the filtered deliverable list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void updateFilteredDeliverableList(Predicate\u003cDeliverable\u003e predicate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/ModelDeliverableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents the in-memory model of the meeting book data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class ModelDeliverableManager implements ModelDeliverable {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelDeliverableManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final DeliverableBook deliverableBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final FilteredList\u003cDeliverable\u003e filteredDeliverables;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Initializes a ModelDeliverableManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ModelDeliverableManager(ReadOnlyDeliverableBook deliverableBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(deliverableBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.fine(\"Initializing with deliverable book: \" + deliverableBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBook \u003d new DeliverableBook(deliverableBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        filteredDeliverables \u003d new FilteredList\u003c\u003e(this.deliverableBook.getDeliverableList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ModelDeliverableManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this(new DeliverableBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefs.getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableBookFilePath(Path deliverableBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverableBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        userPrefs.setDeliverableBookFilePath(deliverableBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverableBook(ReadOnlyDeliverableBook deliverableBook) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBook.resetData(deliverableBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ReadOnlyDeliverableBook getDeliverableBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean hasDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverable);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook.hasDeliverable(deliverable);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void deleteDeliverable(Deliverable target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBook.removeDeliverable(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void addDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBook.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        updateFilteredDeliverableList(PREDICATE_SHOW_ALL_DELIVERABLES);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(target, editedDeliverable);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBook.setDeliverable(target, editedDeliverable);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void completeDeliverable(Deliverable target) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deliverable List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e getFilteredDeliverableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return filteredDeliverables;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void updateFilteredDeliverableList(Predicate\u003cDeliverable\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        filteredDeliverables.setPredicate(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(obj instanceof ModelDeliverableManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        ModelDeliverableManager other \u003d (ModelDeliverableManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook.equals(other.deliverableBook)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 filteredDeliverables.equals(other.filteredDeliverables);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/ReadOnlyDeliverableBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Unmodifiable view of an deliverable book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface ReadOnlyDeliverableBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns an unmodifiable view of the deliverables list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * This list will not contain any duplicate deliverables."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    ObservableList\u003cDeliverable\u003e getDeliverableList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Deliverable\u0027s deadline in the deliverable book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDeadline(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Deadlines must be in DD-MM-YYYY HH:MM format\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public final LocalDateTime dateTimeValue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a {@code Deadline}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param deadline A valid deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deadline(String deadline) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (deadline.equals(\"NIL\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            dateTimeValue \u003d LocalDateTime.MAX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            checkArgument(isValidDeadline(deadline), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            dateTimeValue \u003d LocalDateTime.parse(deadline, formatter);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        value \u003d deadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs an empty deadline."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Deadline createEmptyDeadline() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deadline(\"NIL\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static boolean isValidDeadline(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        //TODO Filter out more invalid dates, e.g. 30 Feb, 31 Sep, etc."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(test, formatter);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                || (other instanceof Deadline) // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 value.equals((((Deadline) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "gabztcr": 71,
      "shadowezz": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/Deliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Deliverable in the deliverable book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class Deliverable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final Deadline deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final boolean isComplete;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // TODO: Amend this to Person[] and point to respective contacts."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String contacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Only title field must be present. Used when adding new deliverable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deliverable(Title title, Description description, Deadline deadline, String contacts) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireAllNonNull(title);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Used when editing or completing existing deliverable."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable(Title title, Description description, Deadline deadline,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                       boolean isComplete, String contacts) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(title);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Deadline getDeadline() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean getIsComplete() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String getContacts() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if both deliverables share the same title."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * This defines a weaker notion of equality between two deliverables."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean isSameDeliverable(Deliverable otherDeliverable) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (otherDeliverable \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return otherDeliverable !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 otherDeliverable.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if both deliverables have the same identity and data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * This defines a stronger notion of equality between two deliverables."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(other instanceof Deliverable)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable otherDeliverable \u003d (Deliverable) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return otherDeliverable.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 otherDeliverable.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u0026\u0026 otherDeliverable.getDeadline().equals(getDeadline())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 otherDeliverable.getContacts().equals(getContacts())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 otherDeliverable.getIsComplete() \u003d\u003d getIsComplete();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return Objects.hash(title, description, deadline, contacts, isComplete);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(\" Deadline: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(getDeadline())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(\" Contacts: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                .append(getContacts());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 48,
      "shadowezz": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/UniqueDeliverableList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.exceptions.DeliverableNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.exceptions.DuplicateDeliverableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class UniqueDeliverableList implements Iterable\u003cDeliverable\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ObservableList\u003cDeliverable\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final ObservableList\u003cDeliverable\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if the list contains an equivalent deliverable as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean contains(Deliverable toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeliverable);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Adds a deliverable to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void add(Deliverable toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DuplicateDeliverableException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the deliverable {@code target} in the list with {@code editedDeliverable}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable identity of {@code editedDeliverable} must not be the same as"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * another existing deliverable in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverable(Deliverable target, Deliverable editedDeliverable) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(target, editedDeliverable);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DeliverableNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!target.isSameDeliverable(editedDeliverable) \u0026\u0026 contains(editedDeliverable)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DuplicateDeliverableException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.set(index, editedDeliverable);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Removes the equivalent deliverable from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * The deliverable must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void remove(Deliverable toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DeliverableNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverables(UniqueDeliverableList replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Replaces the contents of this list with {@code deliverables}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code deliverables} must not contain duplicate deliverables."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void setDeliverables(List\u003cDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireAllNonNull(deliverables);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!deliverablesAreUnique(deliverables)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DuplicateDeliverableException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        internalList.setAll(deliverables);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public ObservableList\u003cDeliverable\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Iterator\u003cDeliverable\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                || (other instanceof UniqueDeliverableList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeliverableList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns true if {@code deliverables} contains only unique deliverables."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private boolean deliverablesAreUnique(List\u003cDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (int i \u003d 0; i \u003c deliverables.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            for (int j \u003d i + 1; j \u003c deliverables.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                if (deliverables.get(i).isSameDeliverable(deliverables.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/exceptions/DeliverableNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Signals that the operation is unable to find the specified deliverable."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deliverable/deliverable/exceptions/DuplicateDeliverableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Signals that the operation will result in duplicate Deliverables"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * (Deliverables are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DuplicateDeliverableException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DuplicateDeliverableException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(\"Operation would result in duplicate deliverables\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/MeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.UniqueMeetingList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Wraps all data at the meeting-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Duplicates are not allowed (by .isSameMeeting comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingBook implements ReadOnlyMeetingBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final UniqueMeetingList meetings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings \u003d new UniqueMeetingList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingBook() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates an MeetingBook using the Meetings in the {@code toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingBook(ReadOnlyMeetingBook toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the contents of the meeting list with {@code meetings}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetings.setMeetings(meetings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Resets the existing data of this {@code MeetingBook} with {@code newData}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void resetData(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        setMeetings(newData.getMeetingList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Adds a meeting to the meeting book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting must not already exist in the meeting book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void addMeeting(Meeting m) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.add(m);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a meeting with the same identity as {@code meeting} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.contains(meeting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the given meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code target} must exist in the meeting book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * another existing meeting in the meeting book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(editedMeeting);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Removes {@code key} from this {@code MeetingBook}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code key} must exist in the meeting book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void removeMeeting(Meeting key) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.remove(key);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.asUnmodifiableObservableList().size() + \" meetings\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getMeetingList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof MeetingBook"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 meetings.equals(((MeetingBook) other).meetings));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetings.hashCode();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "claraadora": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/ModelMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * The API of the Model component of Meeting."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface ModelMeeting {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Predicate\u003cMeeting\u003e PREDICATE_SHOW_ALL_MEETINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Sets the user prefs\u0027 deliverable book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setMeetingBookFilePath(Path deliverableBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces deliverable book data with the data in {@code deliverableBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setMeetingBook(ReadOnlyMeetingBook deliverableBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /** Returns the MeetingBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ReadOnlyMeetingBook getMeetingBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a deliverable with the same identity as {@code deliverable} exists in the deliverable book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    boolean hasMeeting(Meeting deliverable);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Deletes the given deliverable."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The deliverable must exist in the deliverable book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void deleteMeeting(Meeting target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Adds the given deliverable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code deliverable} must not already exist in the deliverable book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void addMeeting(Meeting deliverable);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the given deliverable {@code target} with {@code editedMeeting}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code target} must exist in the deliverable book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The deliverable identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * another existing deliverable in the deliverable book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void setMeeting(Meeting target, Meeting editedMeeting);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deliverable list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ObservableList\u003cMeeting\u003e getFilteredMeetingList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Updates the filter of the filtered deliverable list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 2,
      "claraadora": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/ModelMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents the in-memory model of the meeting book data"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class ModelMeetingManager implements ModelMeeting {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelMeetingManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final MeetingBook meetingBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final FilteredList\u003cMeeting\u003e filteredMeetings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Initializes a ModelMeetingManager with the given meetingBook WITHOUT userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ModelMeetingManager(ReadOnlyMeetingBook meetingBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(meetingBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.fine(\"Initializing with meeting book: \" + meetingBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBook \u003d new MeetingBook(meetingBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        filteredMeetings \u003d new FilteredList\u003c\u003e(this.meetingBook.getMeetingList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ModelMeetingManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this(new MeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefs.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetingBookFilePath(Path meetingBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meetingBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        userPrefs.setMeetingBookFilePath(meetingBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetingBook(ReadOnlyMeetingBook meetingBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBook.resetData(meetingBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        updateFilteredMeetingList(PREDICATE_SHOW_ALL_MEETINGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBook.removeMeeting(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meeting);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook.hasMeeting(meeting);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBook.setMeeting(target, editedMeeting);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Meeting List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return filteredMeetings;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        filteredMeetings.setPredicate(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!(obj instanceof ModelMeetingManager)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelMeetingManager other \u003d (ModelMeetingManager) obj;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook.equals(other.meetingBook)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 filteredMeetings.equals(other.filteredMeetings);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/ReadOnlyMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Unmodifiable view of a meeting book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface ReadOnlyMeetingBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns an unmodifiable view of the meeting list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * This list will not contain any duplicate meeting."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    ObservableList\u003cMeeting\u003e getMeetingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/From.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s from in the meeting book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class From {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \"From should be in the format of MM/DD/YYYY or MM/DD/YYYY HH:mm, and should not be blank.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Note: Single digit month, day, and minute can start with a leading zero.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Format should be MM/DD/YYYY or MM/DD/YY HH:mm"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Single digit month, day, and minute can start with a leading zero."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Solution below adapted from https://stackoverflow.com/a/51231"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // TODO: change back"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // public static final String VALIDATION_REGEX \u003d \"[0-9]{2}/[0-9]{2}/[0-9]{4} [0-23]{2}:[0-59]{2}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final String valueString;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code from}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param from A valid from."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //    public From(String from) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        requireNonNull(from);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        checkArgument(isValidFrom(from), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        valueString \u003d from;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        value \u003d DateParser.parseDate(from);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public From(String from) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(from);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        checkArgument(isValidFrom(from), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        valueString \u003d from;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d new Date();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid from."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidFrom(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // ToDo: Discuss with team"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new SimpleDateFormat(\"MMM d yyyy\").format(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof From"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((From) other).value));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Person\u0027s location in the location book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String EMPTY_LOCATION_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Represents the value of Location."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Location(Optional\u003cString\u003e location) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (location.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            checkArgument(isValidLocation(location.get()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d Optional.of(location);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.orElse(EMPTY_LOCATION_FIELD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof Location"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/Meeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting in the meeting book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Meeting {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final OptionalDescription description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final From from;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final To to;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Contacts contacts;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Meeting(Title title, OptionalDescription description, From from, To to,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                   Contacts contacts, Location location) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public OptionalDescription getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public From getFrom() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public To getTo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Contacts getContacts() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if both meetings have the same identity."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean isSameMeeting(Meeting otherMeeting) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (otherMeeting \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return otherMeeting !\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getFrom().equals(getFrom())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getTo().equals(getTo())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getContacts().equals(getContacts())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if both meetings have the same identity."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!(other instanceof Meeting)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Meeting otherMeeting \u003d (Meeting) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return otherMeeting.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getFrom().equals(getFrom())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getTo().equals(getTo())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getContacts().equals(getContacts())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 otherMeeting.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return Objects.hash(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Title: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getFrom())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getTo())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getContacts())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Contacts: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .append(\" Location: \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 3,
      "claraadora": 109,
      "MerlinLim": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/TitleContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean test(Meeting person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getTitle().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/To.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s to in the meeting book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class To {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \"Tos should be in the format of MM/DD/YYYY or MM/DD/YYYY HH:mm, and should not be blank.\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    + \"Note: Single digit month, day, and minute can start with a leading zero.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Format should be MM/DD/YYYY or MM/DD/YY HH:mm"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Single digit month, day, and minute can start with a leading zero."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Solution below adapted from https://stackoverflow.com/a/51231"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // TODO: change back"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // public static final String VALIDATION_REGEX \u003d \"[0-9]{2}/[0-9]{2}/[0-9]{4} [0-23]{2}:[0-59]{2}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Date value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final String valueString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code To}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param to A valid To."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //    // Todo: Discuss with team"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //    public To(String to) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        requireNonNull(to);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        checkArgument(isValidTo(to), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        valueString \u003d to;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //        value \u003d DateParser.parseDate(to);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // Todo: Discuss with team"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public To(String to) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(to);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        checkArgument(isValidTo(to), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        valueString \u003d to;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d new Date();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid To."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidTo(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // TODO: abstract?"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new SimpleDateFormat(\"MMM d yyyy\").format(value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof To"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((To) other).value));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/UniqueMeetingList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.exceptions.DuplicateMeetingException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.exceptions.MeetingNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if the list contains an equivalent meeting as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean contains(Meeting toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMeeting);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Adds a meeting to the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void add(Meeting toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting identity of {@code editedMeeting} must not be the same as"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * another existing meeting in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeeting(Meeting target, Meeting editedMeeting) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(target, editedMeeting);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.set(index, editedMeeting);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Removes the equivalent meeting from the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The meeting must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void remove(Meeting toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new MeetingNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetings(UniqueMeetingList replacement) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Replaces the contents of this list with {@code meetings}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * {@code meetings} must not contain duplicate meetings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void setMeetings(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireAllNonNull(meetings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!meetingsAreUnique(meetings)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DuplicateMeetingException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        internalList.setAll(meetings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Iterator\u003cMeeting\u003e iterator() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof UniqueMeetingList // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if {@code meetings} contains only unique meetings."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/exceptions/DuplicateMeetingException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Signals that the operation will result in duplicate Meetings (Meetings are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * they have the same information)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class DuplicateMeetingException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public DuplicateMeetingException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super(\"Operation would result in duplicate meetings.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "claraadora": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/meeting/meeting/exceptions/MeetingNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.meeting.meeting.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Signals that the operation is unable to find the specified meeting."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ModelPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface ModelPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "chrystalquek": 2,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ModelPersonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModelPersonManager implements ModelPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelPersonManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ModelPersonManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public ModelPersonManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!(obj instanceof ModelPersonManager)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager other \u003d (ModelPersonManager) obj;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "chrystalquek": 7,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final OptionalDescription description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Role role, OptionalDescription description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireAllNonNull(name, phone, email, role);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public OptionalDescription getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 otherPerson.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 otherPerson.getRole().equals(getRole());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Objects.hash(name, phone, email, role, description);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(\" Role: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(getRole())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(getDescription());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 19,
      "-": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String EMPTY_PHONE_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public Phone(Optional\u003cString\u003e phone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        phone.ifPresent(ph -\u003e checkArgument(isValidPhone(ph), MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        value \u003d Optional.of(phone);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return value.orElse(EMPTY_PHONE_FIELD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 10,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/Role.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.util.StringUtil.getStringJoinedBySeparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a Person\u0027s role in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public enum Role {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    DEVELOPER(\"Developer\", \"dev\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    STAKEHOLDER(\"Stakeholder\", \"stk\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \"Role should only be a \" + getStringJoinedBySeparator(Arrays.stream(Role.values())"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    .map(role -\u003e role.getArgument() + \" (\" + role.toString() + \")\"), \" or \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            getStringJoinedBySeparator(Arrays.stream(Role.values()).map(role -\u003e role.getArgument()), \"|\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String argument;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Role(String name, String argument) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.argument \u003d argument;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Role getRole(String arg) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(arg);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        checkArgument(isValidRole(arg), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role role \u003d Role.getEnumByArgument(arg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns true if a given string is a valid role."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static boolean isValidRole(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Role getEnumByArgument(String argument) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        for (Role role : Role.values()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (role.argument.equals(argument)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                return role;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String getArgument() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return argument;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/UniquePersonList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Contacts.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s contacts in the meeting book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class Contacts {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String EMPTY_CONTACTS_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \"Contacts can only take numerical values separated with commas\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Contacts can only take numerical values separated with commas."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * First character should not be a blank string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @@author claraadora-reused"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reused from https://stackoverflow.com/a/1396228 with minor modifications"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\d+)(,\\\\s*\\\\d+)*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents the value of Contacts."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Contacts}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param contacts A valid Optional of contact name strings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contacts(Optional\u003cString\u003e contacts) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contacts.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            checkArgument(isValidContacts(contacts.get()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d contacts;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Contacts}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param contacts A valid Optional of contact name strings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Contacts(String contacts) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(contacts);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidContacts(contacts), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d Optional.of(contacts);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid contacts."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidContacts(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.orElse(EMPTY_CONTACTS_FIELD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Contacts"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Contacts) other).value));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "claraadora": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TIME_REGEX \u003d \"(([0-1]\\\\d)|(2[0-3])):([0-5]\\\\d)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DATE_REGEX \u003d \"(([0-2]\\\\d)|(3[0-1]))-((0[1-9])|(1[0-2]))-(\\\\d{4})\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            \"Dates should be in the format of DD-MM-YYYY or DD-MM-YYYY HH:mm, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    + \"and should not be blank. Note: Single digit month, day, and \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    + \"minute must start with a leading zero.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"%s(\\\\s(%s))?\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            DATE_REGEX, TIME_REGEX);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd-MM-yyyy[ HH:mm]\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String EMPTY_DATETIME_VALUE_STRING \u003d \"-\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public final Optional\u003cLocalDateTime\u003e value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public final String valueString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Constructs a {@code date}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DateTime(String date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Check for constraints"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        checkArgument(isValidDateTime(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Parse value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        TemporalAccessor temporalAccessor \u003d DATE_TIME_FORMATTER.parseBest(date,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                LocalDateTime::from, LocalDate::from);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (temporalAccessor instanceof LocalDateTime) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            LocalDateTime dateTimeParsed \u003d (LocalDateTime) temporalAccessor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.value \u003d Optional.of(dateTimeParsed);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.valueString \u003d dateTimeParsed.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            LocalDate dateParsed \u003d (LocalDate) temporalAccessor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.value \u003d Optional.of((dateParsed).atStartOfDay());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.valueString \u003d dateParsed.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Constructs a {@code date}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param date A valid optional DateTime."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public DateTime(Optional\u003cString\u003e date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Check for constraints"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        date.ifPresent(d -\u003e checkArgument(isValidDateTime(d), MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Parse value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Optional\u003cTemporalAccessor\u003e temporalAccessor \u003d date.map(d -\u003e DATE_TIME_FORMATTER"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .parseBest(d, LocalDateTime::from, LocalDate::from));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Optional\u003cLocalDateTime\u003e dateTimeParsed \u003d temporalAccessor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .filter(t -\u003e t instanceof LocalDateTime)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .map(t -\u003e ((LocalDateTime) t));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Optional\u003cLocalDate\u003e dateParsed \u003d temporalAccessor"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .filter(t -\u003e t instanceof LocalDate)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .map(t -\u003e ((LocalDate) t));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (dateTimeParsed.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.value \u003d dateTimeParsed;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.valueString \u003d dateTimeParsed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .map(dt -\u003e dt.format(DATE_TIME_FORMATTER))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .orElse(EMPTY_DATETIME_VALUE_STRING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.value \u003d dateParsed.map(LocalDate::atStartOfDay);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.valueString \u003d dateParsed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .map(dt -\u003e dt.format(DATE_TIME_FORMATTER))"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .orElse(EMPTY_DATETIME_VALUE_STRING);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns true if a given string is a valid DateTime."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param test string to test."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @return result of match."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Checks is DateTime exists."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @return true if value in DateTime exists."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this.value.isEmpty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public int compareTo(DateTime o) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        if (value.isEmpty() \u0026\u0026 o.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return this.value.map(v1 -\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    o.value.map(v2-\u003e v1.compareTo(v2)).orElse(-1))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    .orElse(1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || (other instanceof DateTime) // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                \u0026\u0026 ((value.isEmpty() \u0026\u0026 ((DateTime) other).value.isEmpty()) //if v1 and v2 empty, return true"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                || value.map(v1 -\u003e ((DateTime) other)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .value.map(v2-\u003e v1.equals(v2))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .orElse(false)) // if v2 not present, return false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                .orElse(false)); // if v1 not present return false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return valueString;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Represents a Deliverable\u0027s description in the deliverable book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO: to be deprecated"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs an empty description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Description createEmptyDescription() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Description(\"NIL\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            || (other instanceof Description) // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u0026\u0026 value.equals((((Description) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 56,
      "shadowezz": 8,
      "claraadora": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/OptionalDescription.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Deliverable\u0027s description in the deliverable book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO: to be renamed"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class OptionalDescription {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String EMPTY_DESCRIPTION_FIELD \u003d \"-\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Optional\u003cString\u003e value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public OptionalDescription(Optional\u003cString\u003e description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (description.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            checkArgument(isValidDescription(description.get()), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public OptionalDescription(String description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d Optional.of(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns true if a given string is a valid deadline."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.orElse(EMPTY_DESCRIPTION_FIELD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                || (other instanceof OptionalDescription) // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                \u0026\u0026 value.equals((((OptionalDescription) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "claraadora": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    Role.getRole(\"stk\"), new OptionalDescription(\"End user\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static Deliverable[] getSampleDeliverables() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable[] {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            new Deliverable(new Title(\"Settle login screens\"), new Description(\"Include forget password option\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                new Deadline(\"04-11-2020 15:00\"), true, \"2,4\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            new Deliverable(new Title(\"Settle profile page\"), new Description(\"Include change password option\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                new Deadline(\"15-11-2020 12:00\"), true, \"1,2,3\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            new Deliverable(new Title(\"Finalise v1.1 app design\"), new Description(\"Include forget password option\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                new Deadline(\"12-12-2020 23:59\"), false, \"2,5\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static Meeting[] getSampleMeetings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Meeting[] {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Meeting 1\"), new OptionalDescription(\"With business associates\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"01-01-2020 12:00\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"01-01-2020 14:00\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"1,2,3\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Singapore\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(\"Meeting 2\"), new OptionalDescription(\"With product designers\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new From(\"02-01-2020 12:00\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new To(\"02-01-2020 14:00\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Contacts(\"4,5,6\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new Location(\"Jakarta\"))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static ReadOnlyDeliverableBook getSampleDeliverableBook() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableBook sampleDb \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (Deliverable sampleDeliverable : getSampleDeliverables()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            sampleDb.addDeliverable(sampleDeliverable);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return sampleDb;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static ReadOnlyMeetingBook getSampleMeetingBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingBook sampleMb \u003d new MeetingBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        for (Meeting sampleMeeting : getSampleMeetings()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            sampleMb.addMeeting(sampleMeeting);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return sampleMb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 4,
      "shadowezz": 19,
      "-": 32,
      "chrystalquek": 13,
      "claraadora": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Title.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO : discuss immutability (update the rest upon decision)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a Meeting\u0027s title in the meeting book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \"Title can take any values, and it must not be blank.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * \" \" (a blank string) is not a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                || (other instanceof Title"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 46,
      "shadowezz": 1,
      "claraadora": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/DeliverableBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Represents a storage for {@link DeliverableBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface DeliverableBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Returns DeliverableBook data as a {@link ReadOnlyDeliverableBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see #getDeliverableBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Saves the given {@link ReadOnlyDeliverableBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param deliverableBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see #saveDeliverableBook(ReadOnlyDeliverableBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/JsonAdaptedDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Jackson-friendly version of {@link Deliverable}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * To be updated."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class JsonAdaptedDeliverable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deliverable\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private final String contacts;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final String isComplete;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeliverable} with the given deliverable details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public JsonAdaptedDeliverable(@JsonProperty(\"title\") String title, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                             @JsonProperty(\"deadline\") String deadline, @JsonProperty(\"contacts\") String contacts,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                                  @JsonProperty(\"isComplete\") String isComplete) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts a given {@code Deliverable} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonAdaptedDeliverable(Deliverable source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline \u003d source.getDeadline().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts \u003d source.getContacts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        isComplete \u003d Boolean.toString(source.getIsComplete());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts this Jackson-friendly adapted deliverable object into the model\u0027s {@code Deliverable} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deliverable."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!Deadline.isValidDeadline(deadline) \u0026\u0026 !deadline.equals(\"NIL\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            throw new IllegalValueException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        final Deadline modelDeadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        final boolean modelIsComplete;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!isComplete.equals(Boolean.toString(true)) \u0026\u0026 !isComplete.equals(Boolean.toString(false))) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new IllegalValueException(\"isComplete can only be true or false.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else if (isComplete.equals(Boolean.toString(true))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            modelIsComplete \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            modelIsComplete \u003d false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable(modelTitle, modelDescription, modelDeadline, modelIsComplete, contacts);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 31,
      "shadowezz": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/JsonDeliverableBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * A class to access DeliverableBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class JsonDeliverableBookStorage implements DeliverableBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonDeliverableBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonDeliverableBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return readDeliverableBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Similar to {@link #readDeliverableBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook(Path filePath)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Optional\u003cJsonSerializableDeliverableBook\u003e jsonDeliverableBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                filePath, JsonSerializableDeliverableBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!jsonDeliverableBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return Optional.of(jsonDeliverableBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        saveDeliverableBook(deliverableBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(deliverableBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableDeliverableBook(deliverableBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/JsonSerializableDeliverableBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * An Immutable DeliverableBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "@JsonRootName(value \u003d \"deliverablebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class JsonSerializableDeliverableBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d \"Deliverables list contains duplicate deliverable(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final List\u003cJsonAdaptedDeliverable\u003e deliverables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Constructs a {@code JsonSerializableDeliverableBook} with the given deliverables."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonSerializableDeliverableBook(@JsonProperty(\"deliverables\") List\u003cJsonAdaptedDeliverable\u003e deliverables) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverables.addAll(deliverables);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts a given {@code ReadOnlyDeliverableBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableDeliverableBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public JsonSerializableDeliverableBook(ReadOnlyDeliverableBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverables.addAll(source.getDeliverableList().stream().map(JsonAdaptedDeliverable::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Converts this deliverable book into the model\u0027s {@code DeliverableBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableBook deliverableBook \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        for (JsonAdaptedDeliverable jsonAdaptedDeliverable : deliverables) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            Deliverable deliverable \u003d jsonAdaptedDeliverable.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (deliverableBook.hasDeliverable(deliverable)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            deliverableBook.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/StorageDeliverable.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * API of the Storage component for Deliverable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public interface StorageDeliverable extends DeliverableBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Path getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/deliverable/StorageDeliverableManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.storage.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.ReadOnlyDeliverableBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Manages storage of DeliverableBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class StorageDeliverableManager implements StorageDeliverable {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageDeliverableManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private DeliverableBookStorage deliverableBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code StorageDeliverableManager} with the given {@code DeliverableBookStorage}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * and {@code UserPrefsStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public StorageDeliverableManager(DeliverableBookStorage deliverableBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverableBookStorage \u003d deliverableBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DeliverableBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Path getDeliverableBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBookStorage.getDeliverableBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return readDeliverableBook(deliverableBookStorage.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Optional\u003cReadOnlyDeliverableBook\u003e readDeliverableBook(Path filePath)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.fine(\"Attempting to read data from deliverable file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return deliverableBookStorage.readDeliverableBook(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        saveDeliverableBook(deliverableBook, deliverableBookStorage.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void saveDeliverableBook(ReadOnlyDeliverableBook deliverableBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        logger.fine(\"Attempting to write to data deliverable file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableBookStorage.saveDeliverableBook(deliverableBook, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/JsonAdaptedMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Jackson-friendly version of {@link Meeting}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class JsonAdaptedMeeting {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final String from;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final String to;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Optional\u003cString\u003e contacts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Optional\u003cString\u003e location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code JsonAdaptedMeeting} with the given meeting details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonAdaptedMeeting(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                              @JsonProperty(\"description\") Optional\u003cString\u003e description,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                             @JsonProperty(\"from\") String from, @JsonProperty(\"to\") String to,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                             @JsonProperty(\"contacts\") Optional\u003cString\u003e contacts,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                              @JsonProperty(\"location\") Optional\u003cString\u003e location) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts a given {@code Meeting} into this class for Jackson use."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonAdaptedMeeting(Meeting source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        from \u003d source.getFrom().valueString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        to \u003d source.getTo().valueString;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        contacts \u003d source.getContacts().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Meeting toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Title"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Description"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (description.isPresent() \u0026\u0026 !OptionalDescription.isValidDescription(description.get())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final OptionalDescription modelDescription \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // From"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (from \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, From.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!From.isValidFrom(from)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(From.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final From modelFrom \u003d new From(from);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // To"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (to \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, To.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!To.isValidTo(to)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final To modelTo \u003d new To(to);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Contacts"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (contacts.isPresent() \u0026\u0026 !Contacts.isValidContacts(contacts.get())) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Contacts modelContacts \u003d new Contacts(contacts);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // Location"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (location.isPresent() \u0026\u0026 !Location.isValidLocation(location.get())) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return new Meeting(modelTitle, modelDescription, modelFrom, modelTo, modelContacts, modelLocation);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "claraadora": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/JsonMeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * A class to access MeetingBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class JsonMeetingBookStorage implements MeetingBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMeetingBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonMeetingBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return readMeetingBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Similar to {@link #readMeetingBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        Optional\u003cJsonSerializableMeetingBook\u003e jsonMeetingBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                filePath, JsonSerializableMeetingBook.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!jsonMeetingBook.isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return Optional.of(jsonMeetingBook.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(meetingBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMeetingBook(meetingBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/JsonSerializableMeetingBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * An Immutable MeetingBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "@JsonRootName(value \u003d \"meetingbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class JsonSerializableMeetingBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DELIVERABLE \u003d \"Meetings list contains duplicate meeting(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final List\u003cJsonAdaptedMeeting\u003e meetings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Constructs a {@code JsonSerializableMeetingBook} with the given meetings."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonSerializableMeetingBook(@JsonProperty(\"meetings\") List\u003cJsonAdaptedMeeting\u003e meetings) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetings.addAll(meetings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts a given {@code ReadOnlyMeetingBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMeetingBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public JsonSerializableMeetingBook(ReadOnlyMeetingBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetings.addAll(source.getMeetingList().stream().map(JsonAdaptedMeeting::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Converts this meeting book into the model\u0027s {@code MeetingBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingBook meetingBook \u003d new MeetingBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        for (JsonAdaptedMeeting jsonAdaptedMeeting : meetings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            Meeting meeting \u003d jsonAdaptedMeeting.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (meetingBook.hasMeeting(meeting)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DELIVERABLE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            meetingBook.addMeeting(meeting);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/MeetingBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Represents a storage for {@link MeetingBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface MeetingBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Returns MeetingBook data as a {@link ReadOnlyMeetingBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see #getMeetingBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Saves the given {@link ReadOnlyMeetingBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @param meetingBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see #saveMeetingBook(ReadOnlyMeetingBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/StorageMeeting.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "// TODO: build and change to MeetingBookStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public interface StorageMeeting extends MeetingBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Path getMeetingBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/meeting/StorageMeetingManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Manages storage of MeetingBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class StorageMeetingManager implements StorageMeeting {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StoragePersonManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private MeetingBookStorage meetingBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code MeetingBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public StorageMeetingManager(MeetingBookStorage meetingBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meetingBookStorage \u003d meetingBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MeetingBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBookStorage.getMeetingBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return readMeetingBook(meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public Optional\u003cReadOnlyMeetingBook\u003e readMeetingBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return meetingBookStorage.readMeetingBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        saveMeetingBook(meetingBook, meetingBookStorage.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void saveMeetingBook(ReadOnlyMeetingBook meetingBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingBookStorage.saveMeetingBook(meetingBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Represents a storage for {@link AddressBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 42,
      "claraadora": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Optional\u003cString\u003e phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") Optional\u003cString\u003e phone,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                             @JsonProperty(\"role\") String role,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                             @JsonProperty(\"description\") Optional\u003cString\u003e description) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role \u003d source.getRole().getArgument();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (phone.isPresent() \u0026\u0026 !Phone.isValidPhone(phone.get())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final Role modelRole \u003d Role.getRole(role);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    OptionalDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (description.isPresent() \u0026\u0026 !OptionalDescription.isValidDescription(description.get())) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throw new IllegalValueException(OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        final OptionalDescription modelDescription \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelRole, modelDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 36,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/StoragePerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public interface StoragePerson extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "chrystalquek": 1,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/person/StoragePersonManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class StoragePersonManager implements StoragePerson {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StoragePersonManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public StoragePersonManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "chrystalquek": 3,
      "claraadora": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "         * @see LogicPerson#execute(String)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverableCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * An UI component that displays information of a {@code Deliverable}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"DeliverableListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public final Deliverable deliverable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label deadline;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Label contacts;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private Label isCompleted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableCode} with the given {@code Deliverable} and index to display."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableCard(Deliverable deliverable, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.deliverable \u003d deliverable;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        title.setText(deliverable.getTitle().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description.setText(\"Description: \" + deliverable.getDescription().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline.setText(\"Deadline: \" + deliverable.getDeadline().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts.setText(\"Contacts: \" + deliverable.getContacts());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (deliverable.getIsComplete()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setText(\"completed\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setText(\"on-going\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            isCompleted.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        if (!(other instanceof DeliverableCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        DeliverableCard card \u003d (DeliverableCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u0026\u0026 deliverable.equals(card.deliverable);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 11,
      "shadowezz": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeliverableListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * Panel containing a list of deliverables."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private static final String FXML \u003d \"DeliverableListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeliverableListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private ListView\u003cDeliverable\u003e deliverableListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableListPanel(ObservableList\u003cDeliverable\u003e deliverableList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableListView.setItems(deliverableList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        deliverableListView.setCellFactory(listView -\u003e new DeliverableListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deliverable} using a {@code DeliverableCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    class DeliverableListViewCell extends ListCell\u003cDeliverable\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        protected void updateItem(Deliverable deliverable, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            super.updateItem(deliverable, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            if (empty || deliverable \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                setGraphic(new DeliverableCard(deliverable, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.SwitchCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeeting;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModeEnum mode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicMode logicMode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicPerson logicPerson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private LogicDeliverable logicDeliverable;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private LogicMeeting logicMeeting;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private DeliverableListPanel deliverableListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private MeetingListPanel meetingListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button helpButton;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button deliverableButton;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button meetingButton;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Button personButton;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private StackPane listPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} {@code LogicMode},"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * {@code LogicPerson} and {@code LogicDeliverable}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public MainWindow(Stage primaryStage, LogicMode logicMode, LogicPerson logicPerson,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                      LogicDeliverable logicDeliverable, LogicMeeting logicMeeting) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicMode \u003d logicMode;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicPerson \u003d logicPerson;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.logicDeliverable \u003d logicDeliverable;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.logicMeeting \u003d logicMeeting;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // all managers\u0027 Gui points to same GuiSettings object so its fine"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setWindowDefaultSize(logicPerson.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        mode \u003d ModeEnum.PERSON; // default to contacts list first"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setUnderlineButton(personButton);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        setAccelerator(helpButton, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the accelerator of a Button."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void setAccelerator(Button button, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(button);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Scene scene \u003d button.getScene();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(scene);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        scene.getAccelerators().put("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                keyCombination,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new Runnable() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    @FXML public void run() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        button.fire();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Change Ui according to current mode."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @param mode the mode to change Ui to."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void switchMode(ModeEnum mode) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        listPanelPlaceholder.getChildren().clear(); // remove current list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        statusbarPlaceholder.getChildren().clear(); // remove current status bar"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        resultDisplay.setFeedbackToUser(String.format(MESSAGE_SUCCESS, mode)); // if userinput is through clicking"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switch (mode) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        case PERSON:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logicPerson.getAddressBookFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(personButton);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        case DELIVERABLE:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            listPanelPlaceholder.getChildren().add(deliverableListPanel.getRoot());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            statusBarFooter \u003d new StatusBarFooter(logicDeliverable.getDeliverableBookFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(deliverableButton);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        case MEETING:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            listPanelPlaceholder.getChildren().add(meetingListPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            statusBarFooter \u003d new StatusBarFooter(logicMeeting.getMeetingBookFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            setUnderlineButton(meetingButton);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assert false : \"from default: \" + ModeEnum.getModeOptions();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void setUnderlineButton(Button button) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        personButton.setUnderline(false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        deliverableButton.setUnderline(false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        meetingButton.setUnderline(false);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        button.setUnderline(true);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    // TODO define switch tabs here"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Switches to contact mode."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void switchPerson() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        switchMode(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Switches to deliverable mode."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void switchDeliverable() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        switchMode(ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Switches to meeting mode."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public void switchMeeting() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        switchMode(ModeEnum.MEETING);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logicPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        listPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        deliverableListPanel \u003d new DeliverableListPanel(logicDeliverable.getFilteredDeliverableList());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingListPanel \u003d new MeetingListPanel(logicMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logicPerson.getAddressBookFilePath());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicPerson.setGuiSettings(guiSettings); // its just to save last guiSetting used"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see LogicPerson#execute(String)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            CommandResult commandResult \u003d null;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (logicMode.isModeCommand(commandText)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                commandResult \u003d logicMode.execute(commandText);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                switch (mode) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                case PERSON:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    commandResult \u003d logicPerson.execute(commandText);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                case DELIVERABLE:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    commandResult \u003d logicDeliverable.execute(commandText);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                case MEETING:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    commandResult \u003d logicMeeting.execute(commandText);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                    assert false : \"from default: \" + ModeEnum.getModeOptions();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            requireNonNull(commandResult);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            if (commandResult.getMode() !\u003d null) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                switchMode(commandResult.getMode());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 25,
      "-": 158,
      "chrystalquek": 101,
      "claraadora": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * An UI component that displays information of a {@code Meeting}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final String FXML \u003d \"MeetingListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public final Meeting meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label to;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label from;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label contacts;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private Label loc;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a {@code MeetingCode} with the given {@code Meeting} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingCard(Meeting meeting, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        title.setText(meeting.getTitle().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        description.setText(meeting.getDescription().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        from.setText(meeting.getFrom().valueString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        to.setText(meeting.getTo().valueString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        contacts.setText(meeting.getContacts().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        loc.setText(meeting.getLocation().toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        if (!(other instanceof MeetingCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        MeetingCard card \u003d (MeetingCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u0026\u0026 meeting.equals(card.meeting);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MeetingListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": " * Panel containing a list of meetings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "public class MeetingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private static final String FXML \u003d \"MeetingListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MeetingListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private ListView\u003cMeeting\u003e meetingListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Creates a {@code MeetingListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public MeetingListPanel(ObservableList\u003cMeeting\u003e meetingList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingListView.setItems(meetingList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        meetingListView.setCellFactory(listView -\u003e new MeetingListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Meeting} using a {@code MeetingCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    class MeetingListViewCell extends ListCell\u003cMeeting\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        protected void updateItem(Meeting meeting, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            super.updateItem(meeting, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            if (empty || meeting \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                setGraphic(new MeetingCard(meeting, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "claraadora"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "claraadora": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonCode} with the given {@code Person} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        phone.setText(person.getPhone().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description.setText(person.getDescription().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role.setText(person.getRole().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        if (person.getRole().equals(Role.DEVELOPER)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            role.setStyle(\"-fx-background-color: #32cd32\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            role.setStyle(\"-fx-background-color: #ffa500\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 65,
      "chrystalquek": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.LogicDeliverable;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.LogicMeeting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicMode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.LogicPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicMode logicMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicPerson logicPerson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private LogicDeliverable logicDeliverable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private LogicMeeting logicMeeting;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public UiManager(LogicMode logicMode, LogicPerson logicPerson,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                     LogicDeliverable logicDeliverable, LogicMeeting logicMeeting) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO use only a central logic object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicMode \u003d logicMode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.logicPerson \u003d logicPerson;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.logicDeliverable \u003d logicDeliverable;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.logicMeeting \u003d logicMeeting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logicMode, logicPerson, logicDeliverable, logicMeeting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            mainWindow.fillInnerParts(); // TODO change to dashboard. for now default to contact list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 3,
      "-": 83,
      "chrystalquek": 8,
      "claraadora": 6
    }
  },
  {
    "path": "src/main/resources/view/DeliverableListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cLabel fx:id\u003d\"isCompleted\" styleClass\u003d\"tag_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "            \u003cLabel fx:id\u003d\"contacts\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$contacts\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 4,
      "shadowezz": 30,
      "chrystalquek": 1
    }
  },
  {
    "path": "src/main/resources/view/DeliverableListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    \u003cListView fx:id\u003d\"deliverableListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cHBox id\u003d\"navBar\" fx:id\u003d\"navBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cHBox HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"deliverableButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchDeliverable\" text\u003d\"Deliverable\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"meetingButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchMeeting\" text\u003d\"Meeting\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            \u003cButton fx:id\u003d\"personButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#switchPerson\" text\u003d\"Contact\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cRegion HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cButton fx:id\u003d\"helpButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003c/Button\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        \u003cVBox fx:id\u003d\"list\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "chrystalquek": 15
    }
  },
  {
    "path": "src/main/resources/view/MeetingListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$title\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cLabel fx:id\u003d\"to\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$to\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cLabel fx:id\u003d\"from\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$from\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cLabel fx:id\u003d\"contacts\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$contacts\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            \u003cLabel fx:id\u003d\"loc\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$loc\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "claraadora": 36
    }
  },
  {
    "path": "src/main/resources/view/MeetingListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "claraadora": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"tag_label\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicModeManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.testutil.ModeUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "class LogicModeManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicMode logicMode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logicMode \u003d new LogicModeManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String exitCommand \u003d ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(exitCommand, ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult result \u003d logicMode.execute(inputCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logicMode.execute(inputCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_isModeCommand() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(logicMode.isModeCommand(ModeUtil.getSwitchCommand(ModeEnum.PERSON)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO add more modes here"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(logicMode.isModeCommand(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(logicMode.isModeCommand(HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicPersonManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.ROLE_DESC_STK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class LogicPersonManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private LogicPerson logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        StoragePersonManager storage \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logic \u003d new LogicPersonManager(modelPerson, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, modelPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        StoragePersonManager storage \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        logic \u003d new LogicPersonManager(modelPerson, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                AddCommand.COMMAND_WORD + ROLE_DESC_STK + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        + DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager expectedModel \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d LogicPersonManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            ModelPerson expectedModelPerson) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedModelPerson, modelPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, ModelPerson)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * @see #assertCommandSuccess(String, String, ModelPerson)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            String expectedMessage, ModelPerson expectedModelPerson) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedModelPerson, modelPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 126,
      "chrystalquek": 30,
      "claraadora": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, null)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, null)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, null)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different mode value -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, ModeEnum.PERSON)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, null).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, null).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different mode value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertNotEquals(commandResult.hashCode(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new CommandResult(\"feedback\", false, true, ModeEnum.PERSON).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "chrystalquek": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ReadOnlyMeetingBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void constructor_nullMeeting_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingStubAcceptingMeetingAdded modelStub \u003d new ModelMeetingStubAcceptingMeetingAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validMeeting).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validMeeting), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(Arrays.asList(validMeeting), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting validMeeting \u003d new MeetingBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validMeeting);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingStub modelStub \u003d new ModelMeetingStubWithMeeting(validMeeting);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_MEETING, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting testA \u003d new MeetingBuilder().withTitle(\"TestA\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting testB \u003d new MeetingBuilder().withTitle(\"TestB\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addTestACommand \u003d new AddCommand(testA);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addTestBCommand \u003d new AddCommand(testB);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(addTestACommand.equals(addTestACommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(testA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(addTestACommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(addTestACommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(addTestACommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(addTestACommand.equals(addTestBCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private class ModelMeetingStub implements ModelMeeting {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public Path getMeetingBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setMeetingBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void addMeeting(Meeting person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setMeetingBook(ReadOnlyMeetingBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void deleteMeeting(Meeting target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void setMeeting(Meeting target, Meeting editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ObservableList\u003cMeeting\u003e getFilteredMeetingList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void updateFilteredMeetingList(Predicate\u003cMeeting\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private class ModelMeetingStubWithMeeting extends ModelMeetingStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        private final Meeting meeting;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingStubWithMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            this.meeting \u003d meeting;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean hasMeeting(Meeting person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return this.meeting.isSameMeeting(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private class ModelMeetingStubAcceptingMeetingAdded extends ModelMeetingStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        final ArrayList\u003cMeeting\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public boolean hasMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return personsAdded.stream().anyMatch(meeting::isSameMeeting);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public void addMeeting(Meeting meeting) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            requireNonNull(meeting);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            personsAdded.add(meeting);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        public ReadOnlyMeetingBook getMeetingBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            return new MeetingBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TITLE_A \u003d \"Meeting1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TITLE_B \u003d \"Meeting2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_DESCRIPTION_A \u003d \"With business associates\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_DESCRIPTION_B \u003d \"With product designers\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_FROM_A \u003d \"01-01-2020 14:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_FROM_B \u003d \"01-01-2020 12:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TO_A \u003d \"02-01-2020 14:00\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_TO_B \u003d \"02-01-2020 12:00\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_CONTACTS_A \u003d \"1,2,3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_CONTACTS_B \u003d \"4,5,6\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_LOCATION_A \u003d \"Singapore\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String VALID_LOCATION_B \u003d \"Jakarta\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_DESC_A \u003d \" \" + PREFIX_TITLE + VALID_TITLE_A;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_DESC_B \u003d \" \" + PREFIX_TITLE + VALID_TITLE_B;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DESCRIPTION_DESC_A \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_A;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DESCRIPTION_DESC_B \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_DESC_A \u003d \" \" + PREFIX_FROM + VALID_FROM_A;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_DESC_B \u003d \" \" + PREFIX_FROM + VALID_FROM_B;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_DESC_A \u003d \" \" + PREFIX_TO + VALID_TO_A;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_DESC_B \u003d \" \" + PREFIX_TO + VALID_TO_B;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String CONTACTS_DESC_A \u003d \" \" + PREFIX_CONTACTS + VALID_CONTACTS_A;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String CONTACTS_DESC_B \u003d \" \" + PREFIX_CONTACTS + VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String LOCATION_DESC_A \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_A;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String LOCATION_DESC_B \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_B;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Meeting\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_FROM_DESC \u003d \" \" + PREFIX_FROM + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_TO_DESC \u003d \" \" + PREFIX_TO; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_CONTACTS_DESC \u003d \" \" + PREFIX_CONTACTS + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"Home*\"; // \u0027friend\u0027 not allowed in roles"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final Meeting DESC_A;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final Meeting DESC_B;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    static {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //        DESC_A \u003d new MeetingBuilder().withTitle(VALID_TITLE_A)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //                .withDescription(VALID_DESCRIPTION_A).withFrom(VALID_FROM_A).withTo(VALID_TO_A)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //                .withContacts(VALID_CONTACTS_A).withLocation(VALID_LOCATION_A).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //        DESC_B \u003d new MeetingBuilder().withTitle(VALID_TITLE_B)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //                .withDescription(VALID_DESCRIPTION_B).withFrom(VALID_FROM_B).withTo(VALID_TO_B)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //                .withContacts(VALID_CONTACTS_B).withLocation(VALID_LOCATION_B).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelMeeting actualModelMeeting,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                                            CommandResult expectedCommandResult, ModelMeeting expectedModelPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            CommandResult result \u003d command.execute(actualModelMeeting);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedModelPerson, actualModelMeeting);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ModelMeeting, CommandResult, ModelMeeting)}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelMeeting actualModelMeeting, String expectedMessage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                                            ModelMeeting expectedModelMeeting) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(command, actualModelMeeting, expectedCommandResult, expectedModelMeeting);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertCommandFailure(Command command, ModelMeeting actualModelMeeting, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        MeetingBook expectedMeetingBook \u003d new MeetingBook(actualModelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        List\u003cMeeting\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModelMeeting));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedMeetingBook, actualModelMeeting.getMeetingBook());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(expectedFilteredList, actualModelMeeting.getFilteredMeetingList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void showMeetingAtIndex(ModelMeeting modelMeeting, Index targetIndex) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c modelMeeting.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meeting \u003d modelMeeting.getFilteredMeetingList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        final String[] splitName \u003d meeting.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(1, modelMeeting.getFilteredMeetingList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 128,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/meeting/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.commands.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.showMeetingAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.DeleteCommand.MESSAGE_DELETE_MEETING_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.DeleteCommand.MESSAGE_MEETING_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeeting;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalMeetings.getTypicalMeetingBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeeting;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.ModelMeetingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private ModelMeeting modelMeeting \u003d new ModelMeetingManager(getTypicalMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting meetingToDelete \u003d getTypicalMeeting().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_MEETING_SUCCESS, meetingToDelete);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeetingManager expectedModel \u003d new ModelMeetingManager(modelMeeting.getMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModel.deleteMeeting(meetingToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelMeeting, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelMeeting.getFilteredMeetingList().size() + 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandFailure(deleteCommand, modelMeeting, MESSAGE_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Meeting personToDelete \u003d modelMeeting.getFilteredMeetingList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DELETE_MEETING_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        ModelMeeting expectedModelPerson \u003d new ModelMeetingManager(modelMeeting.getMeetingBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        expectedModelPerson.deleteMeeting(personToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        showNoMeeting(expectedModelPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelMeeting, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        showMeetingAtIndex(modelMeeting, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelMeeting.getMeetingBook().getMeetingList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertCommandFailure(deleteCommand, modelMeeting, MESSAGE_MEETING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private void showNoMeeting(ModelMeeting modelMeeting) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        modelMeeting.updateFilteredMeetingList(p -\u003e false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(modelMeeting.getFilteredMeetingList().isEmpty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandSuccess(Command command,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                            CommandResult expectedCommandResult) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, CommandResult)}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandSuccess(Command command,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                            String expectedMessage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, expectedCommandResult);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), expectedCommandResult);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, null);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), expectedCommandResult);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/mode/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.commands.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.mode.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class SwitchCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void execute_validMode_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchPersonCommand \u003d new SwitchCommand(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedPersonMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, ModeEnum.PERSON);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(switchPersonCommand, new CommandResult(expectedPersonMessage, false, false,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ModeEnum.PERSON));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchDeliverableCommand \u003d new SwitchCommand(ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedDeliverableMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(switchDeliverableCommand, new CommandResult(expectedDeliverableMessage, false, false,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ModeEnum.DELIVERABLE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchMeetingCommand \u003d new SwitchCommand(ModeEnum.MEETING);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMeetingMessage \u003d String.format(SwitchCommand.MESSAGE_SUCCESS, ModeEnum.MEETING);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(switchMeetingCommand, new CommandResult(expectedMeetingMessage, false, false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ModeEnum.MEETING));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO add more modes here"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchFirstCommand \u003d new SwitchCommand(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchSecondCommand \u003d new SwitchCommand(ModeEnum.DELIVERABLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommand));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand switchFirstCommandCopy \u003d new SwitchCommand(ModeEnum.PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommandCopy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(switchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(switchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different mode -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(switchFirstCommand.equals(switchSecondCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 1,
      "chrystalquek": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), modelPerson,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModelPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person personInList \u003d modelPerson.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), modelPerson, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "chrystalquek": 9,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonStubAcceptingPersonAdded modelStub \u003d new ModelPersonStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonStub modelStub \u003d new ModelPersonStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private class ModelPersonStub implements ModelPerson {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private class ModelPersonStubWithPerson extends ModelPersonStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private class ModelPersonStubAcceptingPersonAdded extends ModelPersonStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 183,
      "chrystalquek": 9,
      "claraadora": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson modelPerson \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), modelPerson, ClearCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), modelPerson, ClearCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "chrystalquek": 7,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_ROLE_DEV \u003d \"dev\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_ROLE_STK \u003d \"stk\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_DESCRIPTION_AMY \u003d \"End user\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String VALID_DESCRIPTION_BOB \u003d \"Admin personnel\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String ROLE_DESC_DEV \u003d \" \" + PREFIX_ROLE + VALID_ROLE_DEV;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String ROLE_DESC_STK \u003d \" \" + PREFIX_ROLE + VALID_ROLE_STK;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DESCRIPTION_DESC_AMY \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DESCRIPTION_DESC_BOB \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"friend\"; // \u0027friend\u0027 not allowed in roles"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \" \"; // \u0027\u0027 not allowed in roles"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelPerson actualModelPerson,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                                            CommandResult expectedCommandResult, ModelPerson expectedModelPerson) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            CommandResult result \u003d command.execute(actualModelPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(expectedModelPerson, actualModelPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, ModelPerson, CommandResult, ModelPerson)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandSuccess(Command command, ModelPerson actualModelPerson, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                                            ModelPerson expectedModelPerson) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, actualModelPerson, expectedCommandResult, expectedModelPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void assertCommandFailure(Command command, ModelPerson actualModelPerson, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModelPerson.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModelPerson));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedAddressBook, actualModelPerson.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedFilteredList, actualModelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static void showPersonAtIndex(ModelPerson modelPerson, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person person \u003d modelPerson.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(1, modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "chrystalquek": 39,
      "claraadora": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person personToDelete \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager expectedModel \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelPerson, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelPerson.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(deleteCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person personToDelete \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPerson expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showNoPerson(expectedModelPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(deleteCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelPerson.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(deleteCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private void showNoPerson(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(modelPerson.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "chrystalquek": 19,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setPerson(modelPerson.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person lastPerson \u003d modelPerson.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedPerson \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person personInFilteredList \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        ModelPerson expectedModelPerson \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "claraadora"
        },
        "content": "                new ModelPersonManager(new AddressBook(modelPerson.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.setPerson(modelPerson.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(editCommand, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person firstPerson \u003d modelPerson.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person personInList \u003d modelPerson.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(modelPerson.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c modelPerson.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandFailure(editCommand, modelPerson, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 129,
      "chrystalquek": 26,
      "claraadora": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/EditPersonDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "chrystalquek": 3,
      "claraadora": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson expectedModelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Collections.emptyList(), modelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(command, modelPerson, expectedMessage, expectedModelPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), modelPerson.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "chrystalquek": 9,
      "claraadora": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/person/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.commands.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson modelPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPerson expectedModelPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelPerson \u003d new ModelPersonManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        expectedModelPerson \u003d new ModelPersonManager(modelPerson.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ListCommand(), modelPerson, ListCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        showPersonAtIndex(modelPerson, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertCommandSuccess(new ListCommand(), modelPerson, ListCommand.MESSAGE_SUCCESS, expectedModelPerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "chrystalquek": 7,
      "claraadora": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.CONTACTS_DESC_A;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.CONTACTS_DESC_B;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.DESCRIPTION_DESC_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.DESCRIPTION_DESC_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.FROM_DESC_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.FROM_DESC_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_CONTACTS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_FROM_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_TITLE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.INVALID_TO_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.LOCATION_DESC_A;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.LOCATION_DESC_B;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.TITLE_DESC_A;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.TITLE_DESC_B;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.TO_DESC_A;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.TO_DESC_B;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_B;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.testutil.TypicalMeetings.MEETING_B;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.testutil.TypicalMeetings.MEETING_E;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.logic.commands.meeting.AddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "//import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.model.meeting.meeting.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.model.meeting.meeting.Title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.testutil.MeetingBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class AddCommandParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        Meeting expectedMeeting \u003d new MeetingBuilder(MEETING_B).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//         // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // multiple TITLES - last TITLE accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_A + TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // multiple DESCRIPTIONS - last DESCRIPTION accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_A + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // multiple FROMS - last FROM accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_A + FROM_DESC_B"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // multiple TOS - last TO accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B + TO_DESC_A"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // multiple CONTACTS - last CONTACTS accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B + TO_DESC_A"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_A + CONTACTS_DESC_B + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // multiple LOCATIONS - last LOCATION accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B + TO_DESC_A"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_A + LOCATION_DESC_B, new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    // TODO: Fix Optional Values"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    //  Check TypicalPersons MEETING_E to for handling"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        Meeting expectedMeeting \u003d new MeetingBuilder(MEETING_E).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseSuccess(parser, TITLE_DESC_A + FROM_DESC_A,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                new AddCommand(expectedMeeting));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // missing TITLE prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, VALID_TITLE_B + FROM_DESC_B,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // missing FROM prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, TITLE_DESC_B + VALID_FROM_B,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // all prefixes missing"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, VALID_TITLE_B + VALID_FROM_B,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    //TODO: Modify INVALID types"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid TITLE"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid DESCRIPTION"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser,TITLE_DESC_B + INVALID_DESCRIPTION_DESC + FROM_DESC_B"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid FROM"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + INVALID_FROM_DESC"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B, From.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid TO"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + INVALID_TO_DESC + CONTACTS_DESC_B + LOCATION_DESC_B, To.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid CONTACTS"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser,TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + INVALID_CONTACTS_DESC + LOCATION_DESC_A, Contacts.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid LOCATION"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + TO_DESC_B + CONTACTS_DESC_B + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, INVALID_TITLE_DESC + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                + INVALID_TO_DESC, Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, TITLE_DESC_B + DESCRIPTION_DESC_B + FROM_DESC_B"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                        + TO_DESC_B + CONTACTS_DESC_B + LOCATION_DESC_B,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 144,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedCommand, parser.parse(userInput));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.logic.commands.meeting.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/meeting/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//package seedu.address.logic.parser.meeting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "////import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import static seedu.address.logic.parser.meeting.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//import seedu.address.logic.commands.meeting.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//class EditCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    private static final String EMPTY \u003d \" \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    void parse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // TODO:Create Meeting Templates"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // TODO:Create Meeting Templates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/mode/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(expectedCommand, parser.parse(userInput));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/mode/ModeParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.testutil.ModeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModeParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private final ModeParser parser \u003d new ModeParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        SwitchCommand command \u003d (SwitchCommand) parser.parseCommand(ModeUtil.getSwitchCommand(ModeEnum.PERSON));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(new SwitchCommand(ModeEnum.PERSON), command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseCommand_isModeCommand() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.isModeCommand(ModeUtil.getSwitchCommand(ModeEnum.PERSON)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // TODO add more modes here"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.isModeCommand(ExitCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(parser.isModeCommand(HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/mode/SwitchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.mode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.mode.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.mode.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_validArgs_returnsSwitchCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ModeEnum.PERSON.toString().toLowerCase(), new SwitchCommand(ModeEnum.PERSON));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESCRIPTION_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.DESCRIPTION_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.ROLE_DESC_STK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_STK + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_AMY + DESCRIPTION_DESC_BOB, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPersonWithoutPhone \u003d new PersonBuilder(AMY).withPhone().build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ROLE_DESC_STK + NAME_DESC_AMY + EMAIL_DESC_AMY + DESCRIPTION_DESC_AMY,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new AddCommand(expectedPersonWithoutPhone));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person expectedPersonWithoutDescription \u003d new PersonBuilder(AMY).withDescription().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseSuccess(parser, ROLE_DESC_STK + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new AddCommand(expectedPersonWithoutDescription));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        + DESCRIPTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        + DESCRIPTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // missing role"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                ROLE_DESC_STK + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, INVALID_ROLE_DESC + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + INVALID_DESCRIPTION_DESC, OptionalDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, ROLE_DESC_STK + INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // empty preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + DESCRIPTION_DESC_BOB,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "chrystalquek": 64,
      "claraadora": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "chrystalquek": 3,
      "claraadora": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.person.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            assertEquals(expectedCommand, parser.parse(userInput));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "chrystalquek": 2,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 135,
      "chrystalquek": 15,
      "claraadora": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "chrystalquek": 3,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/person/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.logic.parser.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String VALID_ROLE \u003d \"stk\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseRole_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRole(INVALID_ROLE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseRole_validValueWithoutWhitespace_returnsRole() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role expectedRole \u003d Role.getRole(VALID_ROLE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(VALID_ROLE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void parseRole_validValueWithWhitespace_returnsTrimmedRole() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String roleWithWhitespace \u003d WHITESPACE + VALID_ROLE + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Role expectedRole \u003d Role.getRole(VALID_ROLE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(roleWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 113,
      "chrystalquek": 15,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 96,
      "chrystalquek": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelPersonManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.model.person.ModelPerson.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPersonManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModelPersonManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private ModelPersonManager modelManager \u003d new ModelPersonManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        modelManager \u003d new ModelPersonManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        ModelPersonManager modelManagerCopy \u003d new ModelPersonManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(modelManager.equals(new ModelPersonManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(modelManager.equals(new ModelPersonManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(modelManager.equals(new ModelPersonManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "chrystalquek": 9,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deliverable/deliverable/DeliverableTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.model.deliverable.deliverable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.HOMEPAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import static seedu.address.testutil.TypicalDeliverables.NAVIGATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.testutil.DeliverableBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    //Not implemented yet"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void isSameDeliverable() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(HOMEPAGE.isSameDeliverable(HOMEPAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(HOMEPAGE.isSameDeliverable(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable editedHomepage \u003d new DeliverableBuilder(HOMEPAGE).withTitle(\"Implement home page\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(HOMEPAGE.isSameDeliverable(editedHomepage));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same title -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable editedNavigation \u003d new DeliverableBuilder(NAVIGATION).withTitle(\"Build home page\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(HOMEPAGE.isSameDeliverable(editedNavigation));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable homepageCopy \u003d new DeliverableBuilder(HOMEPAGE).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(HOMEPAGE.equals(homepageCopy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertTrue(HOMEPAGE.isSameDeliverable(HOMEPAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(HOMEPAGE.equals(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(HOMEPAGE.equals(5));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different deliverable -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(HOMEPAGE.equals(NAVIGATION));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        Deliverable editedHomepage \u003d new DeliverableBuilder(HOMEPAGE).withTitle(\"Implement home page\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        assertFalse(HOMEPAGE.isSameDeliverable(editedHomepage));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // Keywords match phone and email, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 3,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_ROLE_DEV;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withRole(VALID_ROLE_DEV).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withRole(VALID_ROLE_DEV).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .withRole(VALID_ROLE_DEV).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different role -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withRole(VALID_ROLE_DEV).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 13,
      "-": 73,
      "claraadora": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/RoleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "class RoleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.getRole(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void constructor_invalidRole_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String invalidRole \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Role.getRole(invalidRole));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void isValidRole() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // null Role"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // invalid Roles"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"Role\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertFalse(Role.isValidRole(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        // valid Roles"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(Role.isValidRole(\"stk\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertTrue(Role.isValidRole(\"dev\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_DESCRIPTION_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withDescription(VALID_DESCRIPTION_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 6,
      "-": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.model.person.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_SAMPLE_A \u003d \"30-11-2020 10:00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_DATE_A \u003d \"30-11-2020\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_SAMPLE_B \u003d \"31-11-2020 23:00\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_DATE_B \u003d \"30-02-2020\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String VALID_DATE_C \u003d \"29-02-2019\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TIME_A \u003d \"23:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void isValidDateTimeSuccess() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(TIME_A.matches(DateTime.TIME_REGEX));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(VALID_DATE_A.matches(DateTime.DATE_REGEX));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Date no Time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(VALID_DATE_A));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        // Date and Time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(VALID_SAMPLE_A));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void parseSuccess() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime dt \u003d new DateTime(VALID_SAMPLE_A);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_SAMPLE_A, dt.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime dtNoTime \u003d new DateTime(VALID_DATE_A);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_DATE_A, dtNoTime.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Optional"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        dt \u003d new DateTime(Optional.of(VALID_SAMPLE_A));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_SAMPLE_A, dt.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        dtNoTime \u003d new DateTime(Optional.of(VALID_DATE_A));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(VALID_DATE_A, dtNoTime.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Optional Empty"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(\"-\", new DateTime(Optional.empty()).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void resolveOverflowParseSuccess() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime resolveA \u003d new DateTime(VALID_SAMPLE_B);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(\"30-11-2020 23:00\", resolveA.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime resolveB \u003d new DateTime(VALID_DATE_B);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(\"29-02-2020\", resolveB.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime resolveC \u003d new DateTime(VALID_DATE_C);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(\"28-02-2019\", resolveC.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    void compareSuccess() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime a \u003d new DateTime(VALID_SAMPLE_A);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime b \u003d new DateTime(VALID_SAMPLE_B);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime c \u003d new DateTime(VALID_DATE_A);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        DateTime a1 \u003d new DateTime(Optional.empty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(a.compareTo(b), -1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(a.compareTo(a), 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(a.compareTo(c), 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Compare Empty Optionals"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Empty Optionals have highest priority"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(a1.compareTo(a), 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(a.compareTo(a1), -1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        //Both are Empty Optionals"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        assertEquals(a1.compareTo(a1), 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StoragePersonManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.storage.person.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.person.StoragePersonManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class StoragePersonManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private StoragePersonManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        storageManager \u003d new StoragePersonManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 63,
      "chrystalquek": 6,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.storage.person.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_PHONE \u003d Optional.of(\"+651234\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e INVALID_DESCRIPTION \u003d Optional.of(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_PHONE \u003d Optional.of(BENSON.getPhone().toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final Optional\u003cString\u003e VALID_DESCRIPTION \u003d Optional.of(BENSON.getDescription().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private static final String VALID_ROLE \u003d BENSON.getRole().getArgument();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_nullRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                null, VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_invalidRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ROLE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d Role.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROLE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                        INVALID_DESCRIPTION);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d OptionalDescription.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                VALID_ROLE, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OptionalDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "chrystalquek": 47,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonAddressBookStoragePersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class JsonAddressBookStoragePersonTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "chrystalquek": 3,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "chrystalquek": 1,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/person/JsonUserPrefsStoragePersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "claraadora"
        },
        "content": "package seedu.address.storage.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class JsonUserPrefsStoragePersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "chrystalquek": 1,
      "claraadora": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "chrystalquek": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverableBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.DeliverableBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * A utility class to help with building DeliverableBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " *     {@code DeliverableBook ab \u003d new DeliverableBookBuilder().withTitle(\"Profile screens\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeliverableBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private DeliverableBook deliverableBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverableBook \u003d new DeliverableBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBookBuilder(DeliverableBook deliverableBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deliverableBook \u003d deliverableBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Adds a new {@code Deliverable} to the {@code DeliverableBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBookBuilder withDeliverable(Deliverable deliverable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deliverableBook.addDeliverable(deliverable);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return deliverableBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverableBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Description;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * A utility class to help with building Deliverable objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class DeliverableBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Login screen\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Must include username and password fields\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_DEADLINE \u003d \"12-12-2020 23:59\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final boolean DEFAULT_IS_COMPLETE \u003d false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static final String DEFAULT_CONTACTS \u003d \"2,4\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    private String contacts;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Creates a {@code DeliverableBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline \u003d new Deadline(DEFAULT_DEADLINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts \u003d DEFAULT_CONTACTS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        isComplete \u003d DEFAULT_IS_COMPLETE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Initializes the DeliverableBuilder with the data of {@code deliverableToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder(Deliverable deliverableToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        title \u003d deliverableToCopy.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        description \u003d deliverableToCopy.getDescription();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        deadline \u003d deliverableToCopy.getDeadline();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        contacts \u003d deliverableToCopy.getContacts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        isComplete \u003d deliverableToCopy.getIsComplete();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Title} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Description} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Deadline} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withDeadline(String deadline) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.deadline \u003d new Deadline(deadline);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Sets the {@code Contacts} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public DeliverableBuilder withContacts(String contacts) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        this.contacts \u003d contacts;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     * Sets the {@code isComplete} of the {@code Deliverable} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public DeliverableBuilder withIsComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public Deliverable build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new Deliverable(title, description, deadline, isComplete, contacts);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 44,
      "shadowezz": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeliverableUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_CONTACTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import static seedu.address.logic.parser.deliverable.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " * A utility class for Deliverable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gabztcr"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "public class DeliverableUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns an add command string for adding the {@code deliverable}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getAddCommand(Deliverable deliverable) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getDeliverableDetails(deliverable);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the part of command string for the given {@code deliverable}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getDeliverableDetails(Deliverable deliverable) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        sb.append(PREFIX_TITLE + deliverable.getTitle().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + deliverable.getDescription().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sb.append(PREFIX_DEADLINE + deliverable.getDeadline().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        sb.append(PREFIX_CONTACTS + deliverable.getContacts());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gabztcr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    public static String getEditDeliverableDescriptorDetails() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gabztcr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gabztcr": 41,
      "shadowezz": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.setDescription(person.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Description} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public EditPersonDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.setDescription(new OptionalDescription(description));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "chrystalquek": 9,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MeetingBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class MeetingBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Test\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Refine functional requirements\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            + \"with business associates\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"12-12-2020 09:00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_CONTACTS \u003d \"3,6,9\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Singapore\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    private OptionalDescription description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private From from;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private To to;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private Contacts contacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Constructor for Meeting builder, instantiate to use default attributes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d new OptionalDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.from \u003d new From(DEFAULT_FROM);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.to \u003d new To(DEFAULT_TO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.contacts \u003d new Contacts(DEFAULT_CONTACTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Copies meeting attributes into builder."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * @param meetingToCopy specified meeting to build."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder(Meeting meetingToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.title \u003d meetingToCopy.getTitle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.description \u003d meetingToCopy.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.from \u003d meetingToCopy.getFrom();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.to \u003d meetingToCopy.getTo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.contacts \u003d meetingToCopy.getContacts();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.location \u003d meetingToCopy.getLocation();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Title} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Description} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.description \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code From} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withFrom(String from) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.from \u003d new From(from);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code To} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withTo(String to) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        this.to \u003d new To(to);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Contacts} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withContacts(String contacts) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.contacts \u003d new Contacts(contacts);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Sets the {@code Location} of the {@code Meeting} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public MeetingBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "claraadora"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public Meeting build() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new Meeting(title, description, from, to, contacts, location);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 96,
      "claraadora": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModeUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.commons.ModeEnum;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.logic.commands.mode.SwitchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "public class ModeUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Returns an switch command string for changing the {@code mode}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static String getSwitchCommand(ModeEnum mode) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return SwitchCommand.COMMAND_WORD + \" \" + mode.getArgument();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "chrystalquek": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Role;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"stk\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"End user\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    private OptionalDescription description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role \u003d Role.getRole(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description \u003d new OptionalDescription(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        role \u003d personToCopy.getRole();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        description \u003d personToCopy.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withPhone() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.phone \u003d new Phone(Optional.empty());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Description} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d new OptionalDescription(description);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Description} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withDescription() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.description \u003d new OptionalDescription(Optional.empty());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     * Sets the {@code Role} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public PersonBuilder withRole(String role) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        this.role \u003d Role.getRole(role);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return new Person(name, phone, email, role, description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "chrystalquek": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.parser.person.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.logic.commands.person.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        sb.append(PREFIX_ROLE + person.getRole().getArgument() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        person.getPhone().value.ifPresent(phone -\u003e sb.append(PREFIX_PHONE + phone + \" \"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        person.getDescription().value.ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION + description + \" \"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value.orElse(\"\")).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "                .append(description.value.orElse(\"\")).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 36,
      "chrystalquek": 9,
      "claraadora": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.person.ModelPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Index getMidIndex(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Index.fromOneBased(modelPerson.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Index getLastIndex(ModelPerson modelPerson) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return Index.fromOneBased(modelPerson.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "    public static Person getPerson(ModelPerson modelPerson, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "        return modelPerson.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "chrystalquek": 7,
      "claraadora": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDeliverables.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "import seedu.address.model.deliverable.deliverable.Deliverable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " * A utility class containing a list of {@code Deliverable} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shadowezz"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "public class TypicalDeliverables {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final Deliverable HOMEPAGE \u003d new DeliverableBuilder().withTitle(\"Build home page\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withDescription(\"Include company description.\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withDeadline(\"12-11-2020 20:00\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withContacts(\"3\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withIsComplete(false)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static final Deliverable NAVIGATION \u003d new DeliverableBuilder().withTitle(\"Implement navigation\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withDescription(\"Include about us tab\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withDeadline(\"12-07-2020 20:00\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withContacts(\"5,6\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .withIsComplete(true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "            .build();;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    private TypicalDeliverables() {} //prevents instantiation"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shadowezz"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    public static List\u003cDeliverable\u003e getTypicalDeliverables() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(HOMEPAGE, NAVIGATION));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shadowezz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shadowezz": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMeetings.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_A;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_CONTACTS_B;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_DESCRIPTION_A;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_DESCRIPTION_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_FROM_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_A;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_LOCATION_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_A;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TITLE_B;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_A;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import static seedu.address.logic.commands.meeting.CommandTestUtil.VALID_TO_B;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.MeetingBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.From;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.Meeting;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.meeting.meeting.To;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.Contacts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import seedu.address.model.util.OptionalDescription;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "import seedu.address.model.util.Title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "public class TypicalMeetings {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_C \u003d \"Final\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DESCRIPTION_C \u003d \"Discuss final features\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_C \u003d \"12-12-2020 08:00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_C \u003d \"12-12-2020 10:00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String CONTACTS_C \u003d \"3,2,1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String LOCATION_C \u003d \"Somewhere\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TITLE_D \u003d \"Mid v1.2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String DESCRIPTION_D \u003d \"Discuss features\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String FROM_D \u003d \"12-24-2020 08:00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final String TO_D \u003d \"12-24-2020 08:00\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String CONTACTS_D \u003d \"6,7,8\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "claraadora"
        },
        "content": "    public static final String LOCATION_D \u003d \"Somewhere\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final String TITLE_E \u003d \"Mid v1.2\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final String DESCRIPTION_E \u003d \"NIL\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final String FROM_E \u003d \"12-24-2020 08:00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final String TO_E \u003d \"NIL\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final String CONTACTS_E \u003d \"NIL\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final String LOCATION_E \u003d \"NIL\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_A \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(VALID_TITLE_A), new OptionalDescription(VALID_DESCRIPTION_A), new From(VALID_FROM_A),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    new To(VALID_TO_A), new Contacts(VALID_CONTACTS_A), new Location(VALID_LOCATION_A));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_B \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(VALID_TITLE_B), new OptionalDescription(VALID_DESCRIPTION_B), new From(VALID_FROM_B),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    new To(VALID_TO_B), new Contacts(VALID_CONTACTS_B), new Location(VALID_LOCATION_B));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_C \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(TITLE_C), new OptionalDescription(DESCRIPTION_C), new From(FROM_C),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    new To(TO_C), new Contacts(CONTACTS_C), new Location(LOCATION_C));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static final Meeting MEETING_D \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "claraadora"
        },
        "content": "            new Meeting(new Title(TITLE_D), new OptionalDescription(DESCRIPTION_D), new From(FROM_D), new To(TO_D),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "                    new Contacts(CONTACTS_D), new Location(LOCATION_D));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //    public static final Meeting MEETING_E \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //            new Meeting(new Title(TITLE_E), new Description(DESCRIPTION_E), new From(FROM_E), new To(TO_E),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    //                    new Contacts(CONTACTS_E), new Location(LOCATION_E));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static MeetingBook getTypicalMeetingBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        MeetingBook ab \u003d new MeetingBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        for (Meeting meeting : getTypicalMeeting()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "            ab.addMeeting(meeting);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    public static List\u003cMeeting\u003e getTypicalMeeting() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(MEETING_A, MEETING_B));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MerlinLim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MerlinLim": 76,
      "claraadora": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "claraadora"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import static seedu.address.logic.commands.person.CommandTestUtil.VALID_ROLE_STK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "import seedu.address.model.person.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(\"stk\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withDescription(\"End user\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(\"stk\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withDescription(\"Admin personnel\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"heinz@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"werner@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"lydia@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"anna@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"stefan@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(\"hans@example.com\").withRole(\"stk\").withDescription().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withDescription(\"End user\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(VALID_ROLE_STK).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withDescription(\"Admin personnel\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "chrystalquek"
        },
        "content": "            .withRole(VALID_ROLE_STK).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "chrystalquek": 21,
      "claraadora": 6
    }
  }
]
